{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/listbox/listbox.esm.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { FilterService } from 'primevue/api';\nimport SearchIcon from 'primevue/icons/search';\nimport Ripple from 'primevue/ripple';\nimport { UniqueComponentId, ObjectUtils, DomHandler } from 'primevue/utils';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseComponent from 'primevue/basecomponent';\nimport ListboxStyle from 'primevue/listbox/style';\nimport { resolveComponent, resolveDirective, openBlock, createElementBlock, mergeProps, createElementVNode, renderSlot, withDirectives, vModelText, normalizeClass, createBlock, resolveDynamicComponent, toDisplayString, createCommentVNode, createVNode, createSlots, withCtx, Fragment, renderList, createTextVNode } from 'vue';\n\nvar script$1 = {\n  name: 'BaseListbox',\n  \"extends\": BaseComponent,\n  props: {\n    modelValue: null,\n    options: Array,\n    optionLabel: null,\n    optionValue: null,\n    optionDisabled: null,\n    optionGroupLabel: null,\n    optionGroupChildren: null,\n    listStyle: null,\n    invalid: {\n      type: Boolean,\n      \"default\": false\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    dataKey: null,\n    multiple: {\n      type: Boolean,\n      \"default\": false\n    },\n    metaKeySelection: {\n      type: Boolean,\n      \"default\": false\n    },\n    filter: Boolean,\n    filterPlaceholder: String,\n    filterLocale: String,\n    filterMatchMode: {\n      type: String,\n      \"default\": 'contains'\n    },\n    filterFields: {\n      type: Array,\n      \"default\": null\n    },\n    filterInputProps: null,\n    virtualScrollerOptions: {\n      type: Object,\n      \"default\": null\n    },\n    autoOptionFocus: {\n      type: Boolean,\n      \"default\": true\n    },\n    selectOnFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    focusOnHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    filterMessage: {\n      type: String,\n      \"default\": null\n    },\n    selectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptySelectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptyFilterMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptyMessage: {\n      type: String,\n      \"default\": null\n    },\n    filterIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    tabindex: {\n      type: Number,\n      \"default\": 0\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: ListboxStyle,\n  provide: function provide() {\n    return {\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar script = {\n  name: 'Listbox',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:modelValue', 'change', 'focus', 'blur', 'filter'],\n  list: null,\n  virtualScroller: null,\n  optionTouched: false,\n  startRangeIndex: -1,\n  searchTimeout: null,\n  searchValue: '',\n  data: function data() {\n    return {\n      id: this.$attrs.id,\n      filterValue: null,\n      focused: false,\n      focusedOptionIndex: -1\n    };\n  },\n  watch: {\n    '$attrs.id': function $attrsId(newValue) {\n      this.id = newValue || UniqueComponentId();\n    },\n    options: function options() {\n      this.autoUpdateModel();\n    }\n  },\n  mounted: function mounted() {\n    this.id = this.id || UniqueComponentId();\n    this.autoUpdateModel();\n  },\n  methods: {\n    getOptionIndex: function getOptionIndex(index, fn) {\n      return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return this.optionLabel ? ObjectUtils.resolveFieldData(option, this.optionLabel) : option;\n    },\n    getOptionValue: function getOptionValue(option) {\n      return this.optionValue ? ObjectUtils.resolveFieldData(option, this.optionValue) : option;\n    },\n    getOptionRenderKey: function getOptionRenderKey(option, index) {\n      return (this.dataKey ? ObjectUtils.resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n    },\n    getPTOptions: function getPTOptions(option, itemOptions, index, key) {\n      return this.ptm(key, {\n        context: {\n          selected: this.isSelected(option),\n          focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n          disabled: this.isOptionDisabled(option)\n        }\n      });\n    },\n    isOptionDisabled: function isOptionDisabled(option) {\n      return this.optionDisabled ? ObjectUtils.resolveFieldData(option, this.optionDisabled) : false;\n    },\n    isOptionGroup: function isOptionGroup(option) {\n      return this.optionGroupLabel && option.optionGroup && option.group;\n    },\n    getOptionGroupLabel: function getOptionGroupLabel(optionGroup) {\n      return ObjectUtils.resolveFieldData(optionGroup, this.optionGroupLabel);\n    },\n    getOptionGroupChildren: function getOptionGroupChildren(optionGroup) {\n      return ObjectUtils.resolveFieldData(optionGroup, this.optionGroupChildren);\n    },\n    getAriaPosInset: function getAriaPosInset(index) {\n      var _this = this;\n      return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter(function (option) {\n        return _this.isOptionGroup(option);\n      }).length : index) + 1;\n    },\n    onFirstHiddenFocus: function onFirstHiddenFocus() {\n      DomHandler.focus(this.list);\n      var firstFocusableEl = DomHandler.getFirstFocusableElement(this.$el, ':not([data-p-hidden-focusable=\"true\"])');\n      this.$refs.lastHiddenFocusableElement.tabIndex = DomHandler.isElement(firstFocusableEl) ? undefined : -1;\n      this.$refs.firstHiddenFocusableElement.tabIndex = -1;\n    },\n    onLastHiddenFocus: function onLastHiddenFocus(event) {\n      var relatedTarget = event.relatedTarget;\n      if (relatedTarget === this.list) {\n        var firstFocusableEl = DomHandler.getFirstFocusableElement(this.$el, ':not([data-p-hidden-focusable=\"true\"])');\n        DomHandler.focus(firstFocusableEl);\n        this.$refs.firstHiddenFocusableElement.tabIndex = undefined;\n      } else {\n        DomHandler.focus(this.$refs.firstHiddenFocusableElement);\n      }\n      this.$refs.lastHiddenFocusableElement.tabIndex = -1;\n    },\n    onFocusout: function onFocusout(event) {\n      if (!this.$el.contains(event.relatedTarget) && this.$refs.lastHiddenFocusableElement && this.$refs.firstHiddenFocusableElement) {\n        this.$refs.lastHiddenFocusableElement.tabIndex = this.$refs.firstHiddenFocusableElement.tabIndex = undefined;\n      }\n    },\n    onListFocus: function onListFocus(event) {\n      this.focused = true;\n      this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n      this.autoUpdateModel();\n      this.$emit('focus', event);\n    },\n    onListBlur: function onListBlur(event) {\n      this.focused = false;\n      this.focusedOptionIndex = this.startRangeIndex = -1;\n      this.searchValue = '';\n      this.$emit('blur', event);\n    },\n    onListKeyDown: function onListKeyDown(event) {\n      var _this2 = this;\n      var metaKey = event.metaKey || event.ctrlKey;\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event);\n          break;\n        case 'Home':\n          this.onHomeKey(event);\n          break;\n        case 'End':\n          this.onEndKey(event);\n          break;\n        case 'PageDown':\n          this.onPageDownKey(event);\n          break;\n        case 'PageUp':\n          this.onPageUpKey(event);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n        case 'Space':\n          this.onSpaceKey(event);\n          break;\n        case 'Tab':\n          //NOOP\n          break;\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          this.onShiftKey(event);\n          break;\n        default:\n          if (this.multiple && event.code === 'KeyA' && metaKey) {\n            var value = this.visibleOptions.filter(function (option) {\n              return _this2.isValidOption(option);\n            }).map(function (option) {\n              return _this2.getOptionValue(option);\n            });\n            this.updateModel(event, value);\n            event.preventDefault();\n            break;\n          }\n          if (!metaKey && ObjectUtils.isPrintableCharacter(event.key)) {\n            this.searchOptions(event, event.key);\n            event.preventDefault();\n          }\n          break;\n      }\n    },\n    onOptionSelect: function onOptionSelect(event, option) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      if (this.disabled || this.isOptionDisabled(option)) {\n        return;\n      }\n      this.multiple ? this.onOptionSelectMultiple(event, option) : this.onOptionSelectSingle(event, option);\n      this.optionTouched = false;\n      index !== -1 && (this.focusedOptionIndex = index);\n    },\n    onOptionMouseDown: function onOptionMouseDown(event, index) {\n      this.changeFocusedOptionIndex(event, index);\n    },\n    onOptionMouseMove: function onOptionMouseMove(event, index) {\n      if (this.focusOnHover && this.focused) {\n        this.changeFocusedOptionIndex(event, index);\n      }\n    },\n    onOptionTouchEnd: function onOptionTouchEnd() {\n      if (this.disabled) {\n        return;\n      }\n      this.optionTouched = true;\n    },\n    onOptionSelectSingle: function onOptionSelectSingle(event, option) {\n      var selected = this.isSelected(option);\n      var valueChanged = false;\n      var value = null;\n      var metaSelection = this.optionTouched ? false : this.metaKeySelection;\n      if (metaSelection) {\n        var metaKey = event && (event.metaKey || event.ctrlKey);\n        if (selected) {\n          if (metaKey) {\n            value = null;\n            valueChanged = true;\n          }\n        } else {\n          value = this.getOptionValue(option);\n          valueChanged = true;\n        }\n      } else {\n        value = selected ? null : this.getOptionValue(option);\n        valueChanged = true;\n      }\n      if (valueChanged) {\n        this.updateModel(event, value);\n      }\n    },\n    onOptionSelectMultiple: function onOptionSelectMultiple(event, option) {\n      var selected = this.isSelected(option);\n      var value = null;\n      var metaSelection = this.optionTouched ? false : this.metaKeySelection;\n      if (metaSelection) {\n        var metaKey = event.metaKey || event.ctrlKey;\n        if (selected) {\n          value = metaKey ? this.removeOption(option) : [this.getOptionValue(option)];\n        } else {\n          value = metaKey ? this.modelValue || [] : [];\n          value = [].concat(_toConsumableArray(value), [this.getOptionValue(option)]);\n        }\n      } else {\n        value = selected ? this.removeOption(option) : [].concat(_toConsumableArray(this.modelValue || []), [this.getOptionValue(option)]);\n      }\n      this.updateModel(event, value);\n    },\n    onOptionSelectRange: function onOptionSelectRange(event) {\n      var _this3 = this;\n      var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n      end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n      if (start !== -1 && end !== -1) {\n        var rangeStart = Math.min(start, end);\n        var rangeEnd = Math.max(start, end);\n        var value = this.visibleOptions.slice(rangeStart, rangeEnd + 1).filter(function (option) {\n          return _this3.isValidOption(option);\n        }).map(function (option) {\n          return _this3.getOptionValue(option);\n        });\n        this.updateModel(event, value);\n      }\n    },\n    onFilterChange: function onFilterChange(event) {\n      this.$emit('filter', {\n        originalEvent: event,\n        value: event.target.value\n      });\n      this.focusedOptionIndex = this.startRangeIndex = -1;\n    },\n    onFilterBlur: function onFilterBlur() {\n      this.focusedOptionIndex = this.startRangeIndex = -1;\n    },\n    onFilterKeyDown: function onFilterKeyDown(event) {\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event);\n          break;\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          this.onArrowLeftKey(event, true);\n          break;\n        case 'Home':\n          this.onHomeKey(event, true);\n          break;\n        case 'End':\n          this.onEndKey(event, true);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          this.onShiftKey(event);\n          break;\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      var optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.findFirstFocusedOptionIndex();\n      if (this.multiple && event.shiftKey) {\n        this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n      }\n      this.changeFocusedOptionIndex(event, optionIndex);\n      event.preventDefault();\n    },\n    onArrowUpKey: function onArrowUpKey(event) {\n      var optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.findLastFocusedOptionIndex();\n      if (this.multiple && event.shiftKey) {\n        this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n      }\n      this.changeFocusedOptionIndex(event, optionIndex);\n      event.preventDefault();\n    },\n    onArrowLeftKey: function onArrowLeftKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      pressedInInputText && (this.focusedOptionIndex = -1);\n    },\n    onHomeKey: function onHomeKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (pressedInInputText) {\n        var target = event.currentTarget;\n        if (event.shiftKey) {\n          target.setSelectionRange(0, event.target.selectionStart);\n        } else {\n          target.setSelectionRange(0, 0);\n          this.focusedOptionIndex = -1;\n        }\n      } else {\n        var metaKey = event.metaKey || event.ctrlKey;\n        var optionIndex = this.findFirstOptionIndex();\n        if (this.multiple && event.shiftKey && metaKey) {\n          this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n        }\n        this.changeFocusedOptionIndex(event, optionIndex);\n      }\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (pressedInInputText) {\n        var target = event.currentTarget;\n        if (event.shiftKey) {\n          target.setSelectionRange(event.target.selectionStart, target.value.length);\n        } else {\n          var len = target.value.length;\n          target.setSelectionRange(len, len);\n          this.focusedOptionIndex = -1;\n        }\n      } else {\n        var metaKey = event.metaKey || event.ctrlKey;\n        var optionIndex = this.findLastOptionIndex();\n        if (this.multiple && event.shiftKey && metaKey) {\n          this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n        }\n        this.changeFocusedOptionIndex(event, optionIndex);\n      }\n      event.preventDefault();\n    },\n    onPageUpKey: function onPageUpKey(event) {\n      this.scrollInView(0);\n      event.preventDefault();\n    },\n    onPageDownKey: function onPageDownKey(event) {\n      this.scrollInView(this.visibleOptions.length - 1);\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      if (this.focusedOptionIndex !== -1) {\n        if (this.multiple && event.shiftKey) this.onOptionSelectRange(event, this.focusedOptionIndex);else this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n      }\n    },\n    onSpaceKey: function onSpaceKey(event) {\n      this.onEnterKey(event);\n    },\n    onShiftKey: function onShiftKey() {\n      this.startRangeIndex = this.focusedOptionIndex;\n    },\n    isOptionMatched: function isOptionMatched(option) {\n      var _this$getOptionLabel;\n      return this.isValidOption(option) && ((_this$getOptionLabel = this.getOptionLabel(option)) === null || _this$getOptionLabel === void 0 ? void 0 : _this$getOptionLabel.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)));\n    },\n    isValidOption: function isValidOption(option) {\n      return ObjectUtils.isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n    },\n    isValidSelectedOption: function isValidSelectedOption(option) {\n      return this.isValidOption(option) && this.isSelected(option);\n    },\n    isEquals: function isEquals(value1, value2) {\n      return ObjectUtils.equals(value1, value2, this.equalityKey);\n    },\n    isSelected: function isSelected(option) {\n      var _this4 = this;\n      var optionValue = this.getOptionValue(option);\n      if (this.multiple) return (this.modelValue || []).some(function (value) {\n        return _this4.isEquals(value, optionValue);\n      });else return this.isEquals(this.modelValue, optionValue);\n    },\n    findFirstOptionIndex: function findFirstOptionIndex() {\n      var _this5 = this;\n      return this.visibleOptions.findIndex(function (option) {\n        return _this5.isValidOption(option);\n      });\n    },\n    findLastOptionIndex: function findLastOptionIndex() {\n      var _this6 = this;\n      return ObjectUtils.findLastIndex(this.visibleOptions, function (option) {\n        return _this6.isValidOption(option);\n      });\n    },\n    findNextOptionIndex: function findNextOptionIndex(index) {\n      var _this7 = this;\n      var matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex(function (option) {\n        return _this7.isValidOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n    },\n    findPrevOptionIndex: function findPrevOptionIndex(index) {\n      var _this8 = this;\n      var matchedOptionIndex = index > 0 ? ObjectUtils.findLastIndex(this.visibleOptions.slice(0, index), function (option) {\n        return _this8.isValidOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n    },\n    findSelectedOptionIndex: function findSelectedOptionIndex() {\n      var _this9 = this;\n      if (this.hasSelectedOption) {\n        if (this.multiple) {\n          var _loop = function _loop() {\n              var value = _this9.modelValue[index];\n              var matchedOptionIndex = _this9.visibleOptions.findIndex(function (option) {\n                return _this9.isValidSelectedOption(option) && _this9.isEquals(value, _this9.getOptionValue(option));\n              });\n              if (matchedOptionIndex > -1) return {\n                v: matchedOptionIndex\n              };\n            },\n            _ret;\n          for (var index = this.modelValue.length - 1; index >= 0; index--) {\n            _ret = _loop();\n            if (_ret) return _ret.v;\n          }\n        } else {\n          return this.visibleOptions.findIndex(function (option) {\n            return _this9.isValidSelectedOption(option);\n          });\n        }\n      }\n      return -1;\n    },\n    findFirstSelectedOptionIndex: function findFirstSelectedOptionIndex() {\n      var _this10 = this;\n      return this.hasSelectedOption ? this.visibleOptions.findIndex(function (option) {\n        return _this10.isValidSelectedOption(option);\n      }) : -1;\n    },\n    findLastSelectedOptionIndex: function findLastSelectedOptionIndex() {\n      var _this11 = this;\n      return this.hasSelectedOption ? ObjectUtils.findLastIndex(this.visibleOptions, function (option) {\n        return _this11.isValidSelectedOption(option);\n      }) : -1;\n    },\n    findNextSelectedOptionIndex: function findNextSelectedOptionIndex(index) {\n      var _this12 = this;\n      var matchedOptionIndex = this.hasSelectedOption && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex(function (option) {\n        return _this12.isValidSelectedOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n    },\n    findPrevSelectedOptionIndex: function findPrevSelectedOptionIndex(index) {\n      var _this13 = this;\n      var matchedOptionIndex = this.hasSelectedOption && index > 0 ? ObjectUtils.findLastIndex(this.visibleOptions.slice(0, index), function (option) {\n        return _this13.isValidSelectedOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n    },\n    findNearestSelectedOptionIndex: function findNearestSelectedOptionIndex(index) {\n      var firstCheckUp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var matchedOptionIndex = -1;\n      if (this.hasSelectedOption) {\n        if (firstCheckUp) {\n          matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n          matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n        } else {\n          matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n          matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n        }\n      }\n      return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n    },\n    findFirstFocusedOptionIndex: function findFirstFocusedOptionIndex() {\n      var selectedIndex = this.findFirstSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n    },\n    findLastFocusedOptionIndex: function findLastFocusedOptionIndex() {\n      var selectedIndex = this.findLastSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n    },\n    searchOptions: function searchOptions(event, _char) {\n      var _this14 = this;\n      this.searchValue = (this.searchValue || '') + _char;\n      var optionIndex = -1;\n      if (ObjectUtils.isNotEmpty(this.searchValue)) {\n        if (this.focusedOptionIndex !== -1) {\n          optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex(function (option) {\n            return _this14.isOptionMatched(option);\n          });\n          optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex(function (option) {\n            return _this14.isOptionMatched(option);\n          }) : optionIndex + this.focusedOptionIndex;\n        } else {\n          optionIndex = this.visibleOptions.findIndex(function (option) {\n            return _this14.isOptionMatched(option);\n          });\n        }\n        if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n          optionIndex = this.findFirstFocusedOptionIndex();\n        }\n        if (optionIndex !== -1) {\n          this.changeFocusedOptionIndex(event, optionIndex);\n        }\n      }\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n      this.searchTimeout = setTimeout(function () {\n        _this14.searchValue = '';\n        _this14.searchTimeout = null;\n      }, 500);\n    },\n    removeOption: function removeOption(option) {\n      var _this15 = this;\n      return this.modelValue.filter(function (val) {\n        return !ObjectUtils.equals(val, _this15.getOptionValue(option), _this15.equalityKey);\n      });\n    },\n    changeFocusedOptionIndex: function changeFocusedOptionIndex(event, index) {\n      if (this.focusedOptionIndex !== index) {\n        this.focusedOptionIndex = index;\n        this.scrollInView();\n        if (this.selectOnFocus && !this.multiple) {\n          this.onOptionSelect(event, this.visibleOptions[index]);\n        }\n      }\n    },\n    scrollInView: function scrollInView() {\n      var _this16 = this;\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      this.$nextTick(function () {\n        var id = index !== -1 ? \"\".concat(_this16.id, \"_\").concat(index) : _this16.focusedOptionId;\n        var element = DomHandler.findSingle(_this16.list, \"li[id=\\\"\".concat(id, \"\\\"]\"));\n        if (element) {\n          element.scrollIntoView && element.scrollIntoView({\n            block: 'nearest',\n            inline: 'nearest',\n            behavior: 'smooth'\n          });\n        } else if (!_this16.virtualScrollerDisabled) {\n          _this16.virtualScroller && _this16.virtualScroller.scrollToIndex(index !== -1 ? index : _this16.focusedOptionIndex);\n        }\n      });\n    },\n    autoUpdateModel: function autoUpdateModel() {\n      if (this.selectOnFocus && this.autoOptionFocus && !this.hasSelectedOption && !this.multiple && this.focused) {\n        this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n        this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex]);\n      }\n    },\n    updateModel: function updateModel(event, value) {\n      this.$emit('update:modelValue', value);\n      this.$emit('change', {\n        originalEvent: event,\n        value: value\n      });\n    },\n    flatOptions: function flatOptions(options) {\n      var _this17 = this;\n      return (options || []).reduce(function (result, option, index) {\n        result.push({\n          optionGroup: option,\n          group: true,\n          index: index\n        });\n        var optionGroupChildren = _this17.getOptionGroupChildren(option);\n        optionGroupChildren && optionGroupChildren.forEach(function (o) {\n          return result.push(o);\n        });\n        return result;\n      }, []);\n    },\n    listRef: function listRef(el, contentRef) {\n      this.list = el;\n      contentRef && contentRef(el); // For VirtualScroller\n    },\n    virtualScrollerRef: function virtualScrollerRef(el) {\n      this.virtualScroller = el;\n    }\n  },\n  computed: {\n    visibleOptions: function visibleOptions() {\n      var options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n      return this.filterValue ? FilterService.filter(options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale) : options;\n    },\n    hasSelectedOption: function hasSelectedOption() {\n      return ObjectUtils.isNotEmpty(this.modelValue);\n    },\n    equalityKey: function equalityKey() {\n      return this.optionValue ? null : this.dataKey;\n    },\n    searchFields: function searchFields() {\n      return this.filterFields || [this.optionLabel];\n    },\n    filterResultMessageText: function filterResultMessageText() {\n      return ObjectUtils.isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n    },\n    filterMessageText: function filterMessageText() {\n      return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n    },\n    emptyFilterMessageText: function emptyFilterMessageText() {\n      return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n    },\n    emptyMessageText: function emptyMessageText() {\n      return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n    },\n    selectionMessageText: function selectionMessageText() {\n      return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n    },\n    emptySelectionMessageText: function emptySelectionMessageText() {\n      return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n    },\n    selectedMessageText: function selectedMessageText() {\n      return this.hasSelectedOption ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.modelValue.length : '1') : this.emptySelectionMessageText;\n    },\n    focusedOptionId: function focusedOptionId() {\n      return this.focusedOptionIndex !== -1 ? \"\".concat(this.id, \"_\").concat(this.focusedOptionIndex) : null;\n    },\n    ariaSetSize: function ariaSetSize() {\n      var _this18 = this;\n      return this.visibleOptions.filter(function (option) {\n        return !_this18.isOptionGroup(option);\n      }).length;\n    },\n    virtualScrollerDisabled: function virtualScrollerDisabled() {\n      return !this.virtualScrollerOptions;\n    }\n  },\n  directives: {\n    ripple: Ripple\n  },\n  components: {\n    VirtualScroller: VirtualScroller,\n    SearchIcon: SearchIcon\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1 = [\"id\"];\nvar _hoisted_2 = [\"tabindex\"];\nvar _hoisted_3 = [\"placeholder\", \"aria-owns\", \"aria-activedescendant\", \"tabindex\"];\nvar _hoisted_4 = [\"id\", \"aria-multiselectable\", \"aria-label\", \"aria-labelledby\", \"aria-activedescendant\", \"aria-disabled\"];\nvar _hoisted_5 = [\"id\"];\nvar _hoisted_6 = [\"id\", \"aria-label\", \"aria-selected\", \"aria-disabled\", \"aria-setsize\", \"aria-posinset\", \"onClick\", \"onMousedown\", \"onMousemove\", \"data-p-highlight\", \"data-p-focused\", \"data-p-disabled\"];\nvar _hoisted_7 = [\"tabindex\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_VirtualScroller = resolveComponent(\"VirtualScroller\");\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    id: $data.id,\n    \"class\": _ctx.cx('root'),\n    onFocusout: _cache[10] || (_cache[10] = function () {\n      return $options.onFocusout && $options.onFocusout.apply($options, arguments);\n    })\n  }, _ctx.ptmi('root')), [createElementVNode(\"span\", mergeProps({\n    ref: \"firstHiddenFocusableElement\",\n    role: \"presentation\",\n    \"aria-hidden\": \"true\",\n    \"class\": \"p-hidden-accessible p-hidden-focusable\",\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    onFocus: _cache[0] || (_cache[0] = function () {\n      return $options.onFirstHiddenFocus && $options.onFirstHiddenFocus.apply($options, arguments);\n    })\n  }, _ctx.ptm('hiddenFirstFocusableEl'), {\n    \"data-p-hidden-accessible\": true,\n    \"data-p-hidden-focusable\": true\n  }), null, 16, _hoisted_2), renderSlot(_ctx.$slots, \"header\", {\n    value: _ctx.modelValue,\n    options: $options.visibleOptions\n  }), _ctx.filter ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('header')\n  }, _ctx.ptm('header')), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('filterContainer')\n  }, _ctx.ptm('filterContainer')), [withDirectives(createElementVNode(\"input\", mergeProps({\n    ref: \"filterInput\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n      return $data.filterValue = $event;\n    }),\n    type: \"text\",\n    \"class\": _ctx.cx('filterInput'),\n    placeholder: _ctx.filterPlaceholder,\n    role: \"searchbox\",\n    autocomplete: \"off\",\n    \"aria-owns\": $data.id + '_list',\n    \"aria-activedescendant\": $options.focusedOptionId,\n    tabindex: !_ctx.disabled && !$data.focused ? _ctx.tabindex : -1,\n    onInput: _cache[2] || (_cache[2] = function () {\n      return $options.onFilterChange && $options.onFilterChange.apply($options, arguments);\n    }),\n    onBlur: _cache[3] || (_cache[3] = function () {\n      return $options.onFilterBlur && $options.onFilterBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[4] || (_cache[4] = function () {\n      return $options.onFilterKeyDown && $options.onFilterKeyDown.apply($options, arguments);\n    })\n  }, _objectSpread(_objectSpread({}, _ctx.filterInputProps), _ctx.ptm('filterInput'))), null, 16, _hoisted_3), [[vModelText, $data.filterValue]]), renderSlot(_ctx.$slots, \"filtericon\", {\n    \"class\": normalizeClass(_ctx.cx('filterIcon'))\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.filterIcon ? 'span' : 'SearchIcon'), mergeProps({\n      \"class\": [_ctx.cx('filterIcon'), _ctx.filterIcon]\n    }, _ctx.ptm('filterIcon')), null, 16, [\"class\"]))];\n  })], 16), createElementVNode(\"span\", mergeProps({\n    role: \"status\",\n    \"aria-live\": \"polite\",\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenFilterResult'), {\n    \"data-p-hidden-accessible\": true\n  }), toDisplayString($options.filterResultMessageText), 17)], 16)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    ref: \"listWrapper\",\n    \"class\": _ctx.cx('wrapper'),\n    style: _ctx.listStyle\n  }, _ctx.ptm('wrapper')), [createVNode(_component_VirtualScroller, mergeProps({\n    ref: $options.virtualScrollerRef\n  }, _ctx.virtualScrollerOptions, {\n    style: _ctx.listStyle,\n    items: $options.visibleOptions,\n    tabindex: -1,\n    disabled: $options.virtualScrollerDisabled,\n    pt: _ctx.ptm('virtualScroller')\n  }), createSlots({\n    content: withCtx(function (_ref) {\n      var styleClass = _ref.styleClass,\n        contentRef = _ref.contentRef,\n        items = _ref.items,\n        getItemOptions = _ref.getItemOptions,\n        contentStyle = _ref.contentStyle,\n        itemSize = _ref.itemSize;\n      return [createElementVNode(\"ul\", mergeProps({\n        ref: function ref(el) {\n          return $options.listRef(el, contentRef);\n        },\n        id: $data.id + '_list',\n        \"class\": [_ctx.cx('list'), styleClass],\n        style: contentStyle,\n        tabindex: -1,\n        role: \"listbox\",\n        \"aria-multiselectable\": _ctx.multiple,\n        \"aria-label\": _ctx.ariaLabel,\n        \"aria-labelledby\": _ctx.ariaLabelledby,\n        \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n        \"aria-disabled\": _ctx.disabled,\n        onFocus: _cache[6] || (_cache[6] = function () {\n          return $options.onListFocus && $options.onListFocus.apply($options, arguments);\n        }),\n        onBlur: _cache[7] || (_cache[7] = function () {\n          return $options.onListBlur && $options.onListBlur.apply($options, arguments);\n        }),\n        onKeydown: _cache[8] || (_cache[8] = function () {\n          return $options.onListKeyDown && $options.onListKeyDown.apply($options, arguments);\n        })\n      }, _ctx.ptm('list')), [(openBlock(true), createElementBlock(Fragment, null, renderList(items, function (option, i) {\n        return openBlock(), createElementBlock(Fragment, {\n          key: $options.getOptionRenderKey(option, $options.getOptionIndex(i, getItemOptions))\n        }, [$options.isOptionGroup(option) ? (openBlock(), createElementBlock(\"li\", mergeProps({\n          key: 0,\n          id: $data.id + '_' + $options.getOptionIndex(i, getItemOptions),\n          style: {\n            height: itemSize ? itemSize + 'px' : undefined\n          },\n          \"class\": _ctx.cx('itemGroup'),\n          role: \"option\"\n        }, _ctx.ptm('itemGroup')), [renderSlot(_ctx.$slots, \"optiongroup\", {\n          option: option.optionGroup,\n          index: $options.getOptionIndex(i, getItemOptions)\n        }, function () {\n          return [createTextVNode(toDisplayString($options.getOptionGroupLabel(option.optionGroup)), 1)];\n        })], 16, _hoisted_5)) : withDirectives((openBlock(), createElementBlock(\"li\", mergeProps({\n          key: 1,\n          id: $data.id + '_' + $options.getOptionIndex(i, getItemOptions),\n          style: {\n            height: itemSize ? itemSize + 'px' : undefined\n          },\n          \"class\": _ctx.cx('item', {\n            option: option,\n            index: i,\n            getItemOptions: getItemOptions\n          }),\n          role: \"option\",\n          \"aria-label\": $options.getOptionLabel(option),\n          \"aria-selected\": $options.isSelected(option),\n          \"aria-disabled\": $options.isOptionDisabled(option),\n          \"aria-setsize\": $options.ariaSetSize,\n          \"aria-posinset\": $options.getAriaPosInset($options.getOptionIndex(i, getItemOptions)),\n          onClick: function onClick($event) {\n            return $options.onOptionSelect($event, option, $options.getOptionIndex(i, getItemOptions));\n          },\n          onMousedown: function onMousedown($event) {\n            return $options.onOptionMouseDown($event, $options.getOptionIndex(i, getItemOptions));\n          },\n          onMousemove: function onMousemove($event) {\n            return $options.onOptionMouseMove($event, $options.getOptionIndex(i, getItemOptions));\n          },\n          onTouchend: _cache[5] || (_cache[5] = function ($event) {\n            return $options.onOptionTouchEnd();\n          })\n        }, $options.getPTOptions(option, getItemOptions, i, 'item'), {\n          \"data-p-highlight\": $options.isSelected(option),\n          \"data-p-focused\": $data.focusedOptionIndex === $options.getOptionIndex(i, getItemOptions),\n          \"data-p-disabled\": $options.isOptionDisabled(option)\n        }), [renderSlot(_ctx.$slots, \"option\", {\n          option: option,\n          index: $options.getOptionIndex(i, getItemOptions)\n        }, function () {\n          return [createTextVNode(toDisplayString($options.getOptionLabel(option)), 1)];\n        })], 16, _hoisted_6)), [[_directive_ripple]])], 64);\n      }), 128)), $data.filterValue && (!items || items && items.length === 0) ? (openBlock(), createElementBlock(\"li\", mergeProps({\n        key: 0,\n        \"class\": _ctx.cx('emptyMessage'),\n        role: \"option\"\n      }, _ctx.ptm('emptyMessage')), [renderSlot(_ctx.$slots, \"emptyfilter\", {}, function () {\n        return [createTextVNode(toDisplayString($options.emptyFilterMessageText), 1)];\n      })], 16)) : !_ctx.options || _ctx.options && _ctx.options.length === 0 ? (openBlock(), createElementBlock(\"li\", mergeProps({\n        key: 1,\n        \"class\": _ctx.cx('emptyMessage'),\n        role: \"option\"\n      }, _ctx.ptm('emptyMessage')), [renderSlot(_ctx.$slots, \"empty\", {}, function () {\n        return [createTextVNode(toDisplayString($options.emptyMessageText), 1)];\n      })], 16)) : createCommentVNode(\"\", true)], 16, _hoisted_4)];\n    }),\n    _: 2\n  }, [_ctx.$slots.loader ? {\n    name: \"loader\",\n    fn: withCtx(function (_ref2) {\n      var options = _ref2.options;\n      return [renderSlot(_ctx.$slots, \"loader\", {\n        options: options\n      })];\n    }),\n    key: \"0\"\n  } : undefined]), 1040, [\"style\", \"items\", \"disabled\", \"pt\"])], 16), renderSlot(_ctx.$slots, \"footer\", {\n    value: _ctx.modelValue,\n    options: $options.visibleOptions\n  }), !_ctx.options || _ctx.options && _ctx.options.length === 0 ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 1,\n    role: \"status\",\n    \"aria-live\": \"polite\",\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenEmptyMessage'), {\n    \"data-p-hidden-accessible\": true\n  }), toDisplayString($options.emptyMessageText), 17)) : createCommentVNode(\"\", true), createElementVNode(\"span\", mergeProps({\n    role: \"status\",\n    \"aria-live\": \"polite\",\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenSelectedMessage'), {\n    \"data-p-hidden-accessible\": true\n  }), toDisplayString($options.selectedMessageText), 17), createElementVNode(\"span\", mergeProps({\n    ref: \"lastHiddenFocusableElement\",\n    role: \"presentation\",\n    \"aria-hidden\": \"true\",\n    \"class\": \"p-hidden-accessible p-hidden-focusable\",\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    onFocus: _cache[9] || (_cache[9] = function () {\n      return $options.onLastHiddenFocus && $options.onLastHiddenFocus.apply($options, arguments);\n    })\n  }, _ctx.ptm('hiddenLastFocusableEl'), {\n    \"data-p-hidden-accessible\": true,\n    \"data-p-hidden-focusable\": true\n  }), null, 16, _hoisted_7)], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n",
      "start": 1756100540813,
      "end": 1756100540836,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100540836,
      "end": 1756100540836,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100540836,
      "end": 1756100540837,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100540837,
      "end": 1756100540839,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100540839,
      "end": 1756100540839,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100540839,
      "end": 1756100540839,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100540839,
      "end": 1756100540839,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100540839,
      "end": 1756100540839,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100540839,
      "end": 1756100540841,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100540841,
      "end": 1756100540841,
      "order": "normal"
    }
  ]
}
