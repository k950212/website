{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/vant@4.9.16_vue@3.5.11/node_modules/vant/es/calendar/CalendarMonth.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { ref, computed, defineComponent, createVNode as _createVNode } from \"vue\";\nimport { pick, addUnit, numericProp, setScrollTop, createNamespace, makeRequiredProp } from \"../utils/index.mjs\";\nimport { getMonthEndDay } from \"../date-picker/utils.mjs\";\nimport { t, bem, compareDay, getPrevDay, getNextDay, formatMonthTitle } from \"./utils.mjs\";\nimport { useRect, useToggle } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { useHeight } from \"../composables/use-height.mjs\";\nimport CalendarDay from \"./CalendarDay.mjs\";\nconst [name] = createNamespace(\"calendar-month\");\nconst calendarMonthProps = {\n  date: makeRequiredProp(Date),\n  type: String,\n  color: String,\n  minDate: Date,\n  maxDate: Date,\n  showMark: Boolean,\n  rowHeight: numericProp,\n  formatter: Function,\n  lazyRender: Boolean,\n  currentDate: [Date, Array],\n  allowSameDay: Boolean,\n  showSubtitle: Boolean,\n  showMonthTitle: Boolean,\n  firstDayOfWeek: Number\n};\nvar stdin_default = defineComponent({\n  name,\n  props: calendarMonthProps,\n  emits: [\"click\", \"clickDisabledDate\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const [visible, setVisible] = useToggle();\n    const daysRef = ref();\n    const monthRef = ref();\n    const height = useHeight(monthRef);\n    const title = computed(() => formatMonthTitle(props.date));\n    const rowHeight = computed(() => addUnit(props.rowHeight));\n    const offset = computed(() => {\n      const date = props.date.getDate();\n      const day = props.date.getDay();\n      const realDay = (day - date % 7 + 8) % 7;\n      if (props.firstDayOfWeek) {\n        return (realDay + 7 - props.firstDayOfWeek) % 7;\n      }\n      return realDay;\n    });\n    const totalDay = computed(() => getMonthEndDay(props.date.getFullYear(), props.date.getMonth() + 1));\n    const shouldRender = computed(() => visible.value || !props.lazyRender);\n    const getTitle = () => title.value;\n    const getMultipleDayType = (day) => {\n      const isSelected = (date) => props.currentDate.some((item) => compareDay(item, date) === 0);\n      if (isSelected(day)) {\n        const prevDay = getPrevDay(day);\n        const nextDay = getNextDay(day);\n        const prevSelected = isSelected(prevDay);\n        const nextSelected = isSelected(nextDay);\n        if (prevSelected && nextSelected) {\n          return \"multiple-middle\";\n        }\n        if (prevSelected) {\n          return \"end\";\n        }\n        if (nextSelected) {\n          return \"start\";\n        }\n        return \"multiple-selected\";\n      }\n      return \"\";\n    };\n    const getRangeDayType = (day) => {\n      const [startDay, endDay] = props.currentDate;\n      if (!startDay) {\n        return \"\";\n      }\n      const compareToStart = compareDay(day, startDay);\n      if (!endDay) {\n        return compareToStart === 0 ? \"start\" : \"\";\n      }\n      const compareToEnd = compareDay(day, endDay);\n      if (props.allowSameDay && compareToStart === 0 && compareToEnd === 0) {\n        return \"start-end\";\n      }\n      if (compareToStart === 0) {\n        return \"start\";\n      }\n      if (compareToEnd === 0) {\n        return \"end\";\n      }\n      if (compareToStart > 0 && compareToEnd < 0) {\n        return \"middle\";\n      }\n      return \"\";\n    };\n    const getDayType = (day) => {\n      const {\n        type,\n        minDate,\n        maxDate,\n        currentDate\n      } = props;\n      if (minDate && compareDay(day, minDate) < 0 || maxDate && compareDay(day, maxDate) > 0) {\n        return \"disabled\";\n      }\n      if (currentDate === null) {\n        return \"\";\n      }\n      if (Array.isArray(currentDate)) {\n        if (type === \"multiple\") {\n          return getMultipleDayType(day);\n        }\n        if (type === \"range\") {\n          return getRangeDayType(day);\n        }\n      } else if (type === \"single\") {\n        return compareDay(day, currentDate) === 0 ? \"selected\" : \"\";\n      }\n      return \"\";\n    };\n    const getBottomInfo = (dayType) => {\n      if (props.type === \"range\") {\n        if (dayType === \"start\" || dayType === \"end\") {\n          return t(dayType);\n        }\n        if (dayType === \"start-end\") {\n          return `${t(\"start\")}/${t(\"end\")}`;\n        }\n      }\n    };\n    const renderTitle = () => {\n      if (props.showMonthTitle) {\n        return _createVNode(\"div\", {\n          \"class\": bem(\"month-title\")\n        }, [slots[\"month-title\"] ? slots[\"month-title\"]({\n          date: props.date,\n          text: title.value\n        }) : title.value]);\n      }\n    };\n    const renderMark = () => {\n      if (props.showMark && shouldRender.value) {\n        return _createVNode(\"div\", {\n          \"class\": bem(\"month-mark\")\n        }, [props.date.getMonth() + 1]);\n      }\n    };\n    const placeholders = computed(() => {\n      const count = Math.ceil((totalDay.value + offset.value) / 7);\n      return Array(count).fill({\n        type: \"placeholder\"\n      });\n    });\n    const days = computed(() => {\n      const days2 = [];\n      const year = props.date.getFullYear();\n      const month = props.date.getMonth();\n      for (let day = 1; day <= totalDay.value; day++) {\n        const date = new Date(year, month, day);\n        const type = getDayType(date);\n        let config = {\n          date,\n          type,\n          text: day,\n          bottomInfo: getBottomInfo(type)\n        };\n        if (props.formatter) {\n          config = props.formatter(config);\n        }\n        days2.push(config);\n      }\n      return days2;\n    });\n    const disabledDays = computed(() => days.value.filter((day) => day.type === \"disabled\"));\n    const scrollToDate = (body, targetDate) => {\n      if (daysRef.value) {\n        const daysRect = useRect(daysRef.value);\n        const totalRows = placeholders.value.length;\n        const currentRow = Math.ceil((targetDate.getDate() + offset.value) / 7);\n        const rowOffset = (currentRow - 1) * daysRect.height / totalRows;\n        setScrollTop(body, daysRect.top + rowOffset + body.scrollTop - useRect(body).top);\n      }\n    };\n    const renderDay = (item, index) => _createVNode(CalendarDay, {\n      \"item\": item,\n      \"index\": index,\n      \"color\": props.color,\n      \"offset\": offset.value,\n      \"rowHeight\": rowHeight.value,\n      \"onClick\": (item2) => emit(\"click\", item2),\n      \"onClickDisabledDate\": (item2) => emit(\"clickDisabledDate\", item2)\n    }, pick(slots, [\"top-info\", \"bottom-info\", \"text\"]));\n    const renderDays = () => _createVNode(\"div\", {\n      \"ref\": daysRef,\n      \"role\": \"grid\",\n      \"class\": bem(\"days\")\n    }, [renderMark(), (shouldRender.value ? days : placeholders).value.map(renderDay)]);\n    useExpose({\n      getTitle,\n      getHeight: () => height.value,\n      setVisible,\n      scrollToDate,\n      disabledDays\n    });\n    return () => _createVNode(\"div\", {\n      \"class\": bem(\"month\"),\n      \"ref\": monthRef\n    }, [renderTitle(), renderDays()]);\n  }\n});\nexport {\n  stdin_default as default\n};\n",
      "start": 1756100544741,
      "end": 1756100544757,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100544757,
      "end": 1756100544757,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100544757,
      "end": 1756100544758,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100544758,
      "end": 1756100544758,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100544758,
      "end": 1756100544758,
      "order": "normal"
    }
  ]
}
