{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/megamenu/megamenu.esm.js?nuxt_component=async&nuxt_component_name=MegaMenu&nuxt_component_export=default",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import BarsIcon from 'primevue/icons/bars';\nimport { ObjectUtils, UniqueComponentId, ZIndexUtils, DomHandler } from 'primevue/utils';\nimport BaseComponent from 'primevue/basecomponent';\nimport MegaMenuStyle from 'primevue/megamenu/style';\nimport AngleDownIcon from 'primevue/icons/angledown';\nimport AngleRightIcon from 'primevue/icons/angleright';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps, resolveComponent, resolveDirective, openBlock, createElementBlock, toDisplayString, createCommentVNode, Fragment, renderList, createElementVNode, withDirectives, createBlock, resolveDynamicComponent, normalizeClass, normalizeStyle, renderSlot, createVNode, normalizeProps, guardReactiveProps } from 'vue';\n\nvar script$2 = {\n  name: 'BaseMegaMenu',\n  \"extends\": BaseComponent,\n  props: {\n    model: {\n      type: Array,\n      \"default\": null\n    },\n    orientation: {\n      type: String,\n      \"default\": 'horizontal'\n    },\n    breakpoint: {\n      type: String,\n      \"default\": '960px'\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    tabindex: {\n      type: Number,\n      \"default\": 0\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: MegaMenuStyle,\n  provide: function provide() {\n    return {\n      $parentInstance: this\n    };\n  }\n};\n\nvar script$1 = {\n  name: 'MegaMenuSub',\n  hostName: 'MegaMenu',\n  \"extends\": BaseComponent,\n  emits: ['item-click', 'item-mouseenter'],\n  props: {\n    menuId: {\n      type: String,\n      \"default\": null\n    },\n    focusedItemId: {\n      type: String,\n      \"default\": null\n    },\n    horizontal: {\n      type: Boolean,\n      \"default\": false\n    },\n    submenu: {\n      type: Object,\n      \"default\": null\n    },\n    mobileActive: {\n      type: Boolean,\n      \"default\": false\n    },\n    items: {\n      type: Array,\n      \"default\": null\n    },\n    level: {\n      type: Number,\n      \"default\": 0\n    },\n    templates: {\n      type: Object,\n      \"default\": null\n    },\n    activeItem: {\n      type: Object,\n      \"default\": null\n    },\n    tabindex: {\n      type: Number,\n      \"default\": 0\n    }\n  },\n  methods: {\n    getSubListId: function getSubListId(processedItem) {\n      return \"\".concat(this.getItemId(processedItem), \"_list\");\n    },\n    getSubListKey: function getSubListKey(processedItem) {\n      return this.getSubListId(processedItem);\n    },\n    getItemId: function getItemId(processedItem) {\n      return \"\".concat(this.menuId, \"_\").concat(processedItem.key);\n    },\n    getItemKey: function getItemKey(processedItem) {\n      return this.getItemId(processedItem);\n    },\n    getItemProp: function getItemProp(processedItem, name, params) {\n      return processedItem && processedItem.item ? ObjectUtils.getItemValue(processedItem.item[name], params) : undefined;\n    },\n    getItemLabel: function getItemLabel(processedItem) {\n      return this.getItemProp(processedItem, 'label');\n    },\n    getPTOptions: function getPTOptions(processedItem, index, key) {\n      return this.ptm(key, {\n        context: {\n          item: processedItem,\n          index: index,\n          active: this.isItemActive(processedItem),\n          focused: this.isItemFocused(processedItem),\n          disabled: this.isItemDisabled(processedItem)\n        }\n      });\n    },\n    isItemActive: function isItemActive(processedItem) {\n      return ObjectUtils.isNotEmpty(this.activeItem) ? this.activeItem.key === processedItem.key : false;\n    },\n    isItemVisible: function isItemVisible(processedItem) {\n      return this.getItemProp(processedItem, 'visible') !== false;\n    },\n    isItemDisabled: function isItemDisabled(processedItem) {\n      return this.getItemProp(processedItem, 'disabled');\n    },\n    isItemFocused: function isItemFocused(processedItem) {\n      return this.focusedItemId === this.getItemId(processedItem);\n    },\n    isItemGroup: function isItemGroup(processedItem) {\n      return ObjectUtils.isNotEmpty(processedItem.items);\n    },\n    onItemClick: function onItemClick(event, processedItem) {\n      this.getItemProp(processedItem, 'command', {\n        originalEvent: event,\n        item: processedItem.item\n      });\n      this.$emit('item-click', {\n        originalEvent: event,\n        processedItem: processedItem,\n        isFocus: true\n      });\n    },\n    onItemMouseEnter: function onItemMouseEnter(event, processedItem) {\n      this.$emit('item-mouseenter', {\n        originalEvent: event,\n        processedItem: processedItem\n      });\n    },\n    getAriaSetSize: function getAriaSetSize() {\n      var _this = this;\n      return this.items.filter(function (processedItem) {\n        return _this.isItemVisible(processedItem) && !_this.getItemProp(processedItem, 'separator');\n      }).length;\n    },\n    getAriaPosInset: function getAriaPosInset(index) {\n      var _this2 = this;\n      return index - this.items.slice(0, index).filter(function (processedItem) {\n        return _this2.isItemVisible(processedItem) && _this2.getItemProp(processedItem, 'separator');\n      }).length + 1;\n    },\n    getMenuItemProps: function getMenuItemProps(processedItem, index) {\n      return {\n        action: mergeProps({\n          \"class\": this.cx('action'),\n          tabindex: -1,\n          'aria-hidden': true\n        }, this.getPTOptions(processedItem, index, 'action')),\n        icon: mergeProps({\n          \"class\": [this.cx('icon'), this.getItemProp(processedItem, 'icon')]\n        }, this.getPTOptions(processedItem, index, 'icon')),\n        label: mergeProps({\n          \"class\": this.cx('label')\n        }, this.getPTOptions(processedItem, index, 'label')),\n        submenuicon: mergeProps({\n          \"class\": this.cx('submenuIcon')\n        }, this.getPTOptions(processedItem, index, 'submenuIcon'))\n      };\n    }\n  },\n  components: {\n    AngleRightIcon: AngleRightIcon,\n    AngleDownIcon: AngleDownIcon\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\n\nvar _hoisted_1$1 = [\"tabindex\"];\nvar _hoisted_2$1 = [\"id\", \"aria-label\", \"aria-disabled\", \"aria-expanded\", \"aria-haspopup\", \"aria-level\", \"aria-setsize\", \"aria-posinset\", \"data-p-highlight\", \"data-p-focused\", \"data-p-disabled\"];\nvar _hoisted_3 = [\"onClick\", \"onMouseenter\"];\nvar _hoisted_4 = [\"href\", \"target\"];\nvar _hoisted_5 = [\"id\"];\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_MegaMenuSub = resolveComponent(\"MegaMenuSub\", true);\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"ul\", mergeProps({\n    \"class\": $props.level === 0 ? _ctx.cx('menu') : _ctx.cx('submenu'),\n    tabindex: $props.tabindex\n  }, $props.level === 0 ? _ctx.ptm('menu') : _ctx.ptm('submenu')), [$props.submenu ? (openBlock(), createElementBlock(\"li\", mergeProps({\n    key: 0,\n    \"class\": [_ctx.cx('submenuHeader', {\n      submenu: $props.submenu\n    }), $options.getItemProp($props.submenu, 'class')],\n    style: $options.getItemProp($props.submenu, 'style'),\n    role: \"presentation\"\n  }, _ctx.ptm('submenuHeader')), toDisplayString($options.getItemLabel($props.submenu)), 17)) : createCommentVNode(\"\", true), (openBlock(true), createElementBlock(Fragment, null, renderList($props.items, function (processedItem, index) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.getItemKey(processedItem)\n    }, [$options.isItemVisible(processedItem) && !$options.getItemProp(processedItem, 'separator') ? (openBlock(), createElementBlock(\"li\", mergeProps({\n      key: 0,\n      id: $options.getItemId(processedItem),\n      style: $options.getItemProp(processedItem, 'style'),\n      \"class\": [_ctx.cx('menuitem', {\n        processedItem: processedItem\n      }), $options.getItemProp(processedItem, 'class')],\n      role: \"menuitem\",\n      \"aria-label\": $options.getItemLabel(processedItem),\n      \"aria-disabled\": $options.isItemDisabled(processedItem) || undefined,\n      \"aria-expanded\": $options.isItemGroup(processedItem) ? $options.isItemActive(processedItem) : undefined,\n      \"aria-haspopup\": $options.isItemGroup(processedItem) && !$options.getItemProp(processedItem, 'to') ? 'menu' : undefined,\n      \"aria-level\": $props.level + 1,\n      \"aria-setsize\": $options.getAriaSetSize(),\n      \"aria-posinset\": $options.getAriaPosInset(index)\n    }, $options.getPTOptions(processedItem, index, 'menuitem'), {\n      \"data-p-highlight\": $options.isItemActive(processedItem),\n      \"data-p-focused\": $options.isItemFocused(processedItem),\n      \"data-p-disabled\": $options.isItemDisabled(processedItem)\n    }), [createElementVNode(\"div\", mergeProps({\n      \"class\": _ctx.cx('content'),\n      onClick: function onClick($event) {\n        return $options.onItemClick($event, processedItem);\n      },\n      onMouseenter: function onMouseenter($event) {\n        return $options.onItemMouseEnter($event, processedItem);\n      }\n    }, $options.getPTOptions(processedItem, index, 'content')), [!$props.templates.item ? withDirectives((openBlock(), createElementBlock(\"a\", mergeProps({\n      key: 0,\n      href: $options.getItemProp(processedItem, 'url'),\n      \"class\": _ctx.cx('action'),\n      target: $options.getItemProp(processedItem, 'target'),\n      tabindex: \"-1\",\n      \"aria-hidden\": \"true\"\n    }, $options.getPTOptions(processedItem, index, 'action')), [$props.templates.itemicon ? (openBlock(), createBlock(resolveDynamicComponent($props.templates.itemicon), {\n      key: 0,\n      item: processedItem.item,\n      \"class\": normalizeClass(_ctx.cx('icon'))\n    }, null, 8, [\"item\", \"class\"])) : $options.getItemProp(processedItem, 'icon') ? (openBlock(), createElementBlock(\"span\", mergeProps({\n      key: 1,\n      \"class\": [_ctx.cx('icon'), $options.getItemProp(processedItem, 'icon')]\n    }, $options.getPTOptions(processedItem, index, 'icon')), null, 16)) : createCommentVNode(\"\", true), createElementVNode(\"span\", mergeProps({\n      \"class\": $props.level === 0 ? _ctx.cx('label') : _ctx.cx('submenuLabel')\n    }, $props.level === 0 ? $options.getPTOptions(processedItem, index, 'label') : $options.getPTOptions(processedItem, index, 'submenuLabel')), toDisplayString($options.getItemLabel(processedItem)), 17), $options.isItemGroup(processedItem) ? (openBlock(), createElementBlock(Fragment, {\n      key: 2\n    }, [$props.templates.submenuicon ? (openBlock(), createBlock(resolveDynamicComponent($props.templates.submenuicon), mergeProps({\n      key: 0,\n      active: $options.isItemActive(processedItem),\n      \"class\": _ctx.cx('submenuIcon')\n    }, $options.getPTOptions(processedItem, index, 'submenuIcon')), null, 16, [\"active\", \"class\"])) : (openBlock(), createBlock(resolveDynamicComponent($props.horizontal || $props.mobileActive ? 'AngleDownIcon' : 'AngleRightIcon'), mergeProps({\n      key: 1,\n      \"class\": _ctx.cx('submenuIcon')\n    }, $options.getPTOptions(processedItem, index, 'submenuIcon')), null, 16, [\"class\"]))], 64)) : createCommentVNode(\"\", true)], 16, _hoisted_4)), [[_directive_ripple]]) : (openBlock(), createBlock(resolveDynamicComponent($props.templates.item), {\n      key: 1,\n      item: processedItem.item,\n      hasSubmenu: $options.isItemGroup(processedItem),\n      label: $options.getItemLabel(processedItem),\n      props: $options.getMenuItemProps(processedItem, index)\n    }, null, 8, [\"item\", \"hasSubmenu\", \"label\", \"props\"]))], 16, _hoisted_3), $options.isItemVisible(processedItem) && $options.isItemGroup(processedItem) ? (openBlock(), createElementBlock(\"div\", mergeProps({\n      key: 0,\n      \"class\": _ctx.cx('panel')\n    }, _ctx.ptm('panel')), [createElementVNode(\"div\", mergeProps({\n      \"class\": _ctx.cx('grid')\n    }, _ctx.ptm('grid')), [(openBlock(true), createElementBlock(Fragment, null, renderList(processedItem.items, function (col) {\n      return openBlock(), createElementBlock(\"div\", mergeProps({\n        key: $options.getItemKey(col),\n        \"class\": _ctx.cx('column', {\n          processedItem: processedItem\n        })\n      }, _ctx.ptm('column')), [(openBlock(true), createElementBlock(Fragment, null, renderList(col, function (submenu) {\n        return openBlock(), createBlock(_component_MegaMenuSub, {\n          key: $options.getSubListKey(submenu),\n          id: $options.getSubListId(submenu),\n          style: normalizeStyle(_ctx.sx('submenu', true, {\n            processedItem: processedItem\n          })),\n          role: \"menu\",\n          menuId: $props.menuId,\n          focusedItemId: $props.focusedItemId,\n          submenu: submenu,\n          items: submenu.items,\n          templates: $props.templates,\n          level: $props.level + 1,\n          mobileActive: $props.mobileActive,\n          pt: _ctx.pt,\n          unstyled: _ctx.unstyled,\n          onItemClick: _cache[0] || (_cache[0] = function ($event) {\n            return _ctx.$emit('item-click', $event);\n          }),\n          onItemMouseenter: _cache[1] || (_cache[1] = function ($event) {\n            return _ctx.$emit('item-mouseenter', $event);\n          })\n        }, null, 8, [\"id\", \"style\", \"menuId\", \"focusedItemId\", \"submenu\", \"items\", \"templates\", \"level\", \"mobileActive\", \"pt\", \"unstyled\"]);\n      }), 128))], 16);\n    }), 128))], 16)], 16)) : createCommentVNode(\"\", true)], 16, _hoisted_2$1)) : createCommentVNode(\"\", true), $options.isItemVisible(processedItem) && $options.getItemProp(processedItem, 'separator') ? (openBlock(), createElementBlock(\"li\", mergeProps({\n      key: 1,\n      id: $options.getItemId(processedItem),\n      \"class\": [_ctx.cx('separator'), $options.getItemProp(processedItem, 'class')],\n      style: $options.getItemProp(processedItem, 'style'),\n      role: \"separator\"\n    }, _ctx.ptm('separator')), null, 16, _hoisted_5)) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16, _hoisted_1$1);\n}\n\nscript$1.render = render$1;\n\nvar script = {\n  name: 'MegaMenu',\n  \"extends\": script$2,\n  inheritAttrs: false,\n  emits: ['focus', 'blur'],\n  outsideClickListener: null,\n  resizeListener: null,\n  matchMediaListener: null,\n  container: null,\n  menubar: null,\n  searchTimeout: null,\n  searchValue: null,\n  data: function data() {\n    return {\n      id: this.$attrs.id,\n      mobileActive: false,\n      focused: false,\n      focusedItemInfo: {\n        index: -1,\n        key: '',\n        parentKey: ''\n      },\n      activeItem: null,\n      dirty: false,\n      query: null,\n      queryMatches: false\n    };\n  },\n  watch: {\n    '$attrs.id': function $attrsId(newValue) {\n      this.id = newValue || UniqueComponentId();\n    },\n    activeItem: function activeItem(newItem) {\n      if (ObjectUtils.isNotEmpty(newItem)) {\n        this.bindOutsideClickListener();\n        this.bindResizeListener();\n      } else {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.id = this.id || UniqueComponentId();\n    this.bindMatchMediaListener();\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.mobileActive = false;\n    this.unbindOutsideClickListener();\n    this.unbindResizeListener();\n    this.unbindMatchMediaListener();\n  },\n  methods: {\n    getItemProp: function getItemProp(item, name) {\n      return item ? ObjectUtils.getItemValue(item[name]) : undefined;\n    },\n    getItemLabel: function getItemLabel(item) {\n      return this.getItemProp(item, 'label');\n    },\n    isItemDisabled: function isItemDisabled(item) {\n      return this.getItemProp(item, 'disabled');\n    },\n    isItemVisible: function isItemVisible(item) {\n      return this.getItemProp(item, 'visible') !== false;\n    },\n    isItemGroup: function isItemGroup(item) {\n      return ObjectUtils.isNotEmpty(this.getItemProp(item, 'items'));\n    },\n    isItemSeparator: function isItemSeparator(item) {\n      return this.getItemProp(item, 'separator');\n    },\n    getProccessedItemLabel: function getProccessedItemLabel(processedItem) {\n      return processedItem ? this.getItemLabel(processedItem.item) : undefined;\n    },\n    isProccessedItemGroup: function isProccessedItemGroup(processedItem) {\n      return processedItem && ObjectUtils.isNotEmpty(processedItem.items);\n    },\n    toggle: function toggle(event) {\n      var _this = this;\n      if (this.mobileActive) {\n        this.mobileActive = false;\n        ZIndexUtils.clear(this.menubar);\n        this.hide();\n      } else {\n        this.mobileActive = true;\n        ZIndexUtils.set('menu', this.menubar, this.$primevue.config.zIndex.menu);\n        setTimeout(function () {\n          _this.show();\n        }, 1);\n      }\n      this.bindOutsideClickListener();\n      event.preventDefault();\n    },\n    show: function show() {\n      this.focusedItemInfo = {\n        index: this.findFirstFocusedItemIndex(),\n        level: 0,\n        parentKey: ''\n      };\n      DomHandler.focus(this.menubar);\n    },\n    hide: function hide(event, isFocus) {\n      var _this2 = this;\n      if (this.mobileActive) {\n        this.mobileActive = false;\n        setTimeout(function () {\n          DomHandler.focus(_this2.$refs.menubutton);\n        }, 0);\n      }\n      this.activeItem = null;\n      this.focusedItemInfo = {\n        index: -1,\n        key: '',\n        parentKey: ''\n      };\n      isFocus && DomHandler.focus(this.menubar);\n      this.dirty = false;\n    },\n    onFocus: function onFocus(event) {\n      this.focused = true;\n      if (this.focusedItemInfo.index === -1) {\n        var index = this.findFirstFocusedItemIndex();\n        var processedItem = this.findVisibleItem(index);\n        this.focusedItemInfo = {\n          index: index,\n          key: processedItem.key,\n          parentKey: processedItem.parentKey\n        };\n      }\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      this.focused = false;\n      this.focusedItemInfo = {\n        index: -1,\n        key: '',\n        parentKey: ''\n      };\n      this.searchValue = '';\n      this.dirty = false;\n      this.$emit('blur', event);\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (this.disabled) {\n        event.preventDefault();\n        return;\n      }\n      var metaKey = event.metaKey || event.ctrlKey;\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event);\n          break;\n        case 'ArrowLeft':\n          this.onArrowLeftKey(event);\n          break;\n        case 'ArrowRight':\n          this.onArrowRightKey(event);\n          break;\n        case 'Home':\n          this.onHomeKey(event);\n          break;\n        case 'End':\n          this.onEndKey(event);\n          break;\n        case 'Space':\n          this.onSpaceKey(event);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n        case 'PageDown':\n        case 'PageUp':\n        case 'Backspace':\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          //NOOP\n          break;\n        default:\n          if (!metaKey && ObjectUtils.isPrintableCharacter(event.key)) {\n            this.searchItems(event, event.key);\n          }\n          break;\n      }\n    },\n    onItemChange: function onItemChange(event) {\n      var processedItem = event.processedItem,\n        isFocus = event.isFocus;\n      if (ObjectUtils.isEmpty(processedItem)) return;\n      var index = processedItem.index,\n        key = processedItem.key,\n        parentKey = processedItem.parentKey,\n        items = processedItem.items;\n      var grouped = ObjectUtils.isNotEmpty(items);\n      grouped && (this.activeItem = processedItem);\n      this.focusedItemInfo = {\n        index: index,\n        key: key,\n        parentKey: parentKey\n      };\n      grouped && (this.dirty = true);\n      isFocus && DomHandler.focus(this.menubar);\n    },\n    onItemClick: function onItemClick(event) {\n      var originalEvent = event.originalEvent,\n        processedItem = event.processedItem;\n      var grouped = this.isProccessedItemGroup(processedItem);\n      var root = ObjectUtils.isEmpty(processedItem.parent);\n      var selected = this.isSelected(processedItem);\n      if (selected) {\n        var index = processedItem.index,\n          key = processedItem.key,\n          parentKey = processedItem.parentKey;\n        this.activeItem = null;\n        this.focusedItemInfo = {\n          index: index,\n          key: key,\n          parentKey: parentKey\n        };\n        this.dirty = !root;\n        DomHandler.focus(this.menubar);\n      } else {\n        if (grouped) {\n          this.onItemChange(event);\n        } else {\n          var rootProcessedItem = root ? processedItem : this.activeItem;\n          this.hide(originalEvent);\n          this.changeFocusedItemInfo(originalEvent, rootProcessedItem ? rootProcessedItem.index : -1);\n          this.mobileActive = false;\n          DomHandler.focus(this.menubar);\n        }\n      }\n    },\n    onItemMouseEnter: function onItemMouseEnter(event) {\n      if (!this.mobileActive && this.dirty) {\n        this.onItemChange(event);\n      }\n    },\n    menuButtonClick: function menuButtonClick(event) {\n      this.toggle(event);\n    },\n    menuButtonKeydown: function menuButtonKeydown(event) {\n      (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') && this.menuButtonClick(event);\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      if (this.horizontal) {\n        if (ObjectUtils.isNotEmpty(this.activeItem) && this.activeItem.key === this.focusedItemInfo.key) {\n          this.focusedItemInfo = {\n            index: -1,\n            key: '',\n            parentKey: this.activeItem.key\n          };\n        } else {\n          var processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n          var grouped = this.isProccessedItemGroup(processedItem);\n          if (grouped) {\n            this.onItemChange({\n              originalEvent: event,\n              processedItem: processedItem\n            });\n            this.focusedItemInfo = {\n              index: -1,\n              key: processedItem.key,\n              parentKey: processedItem.parentKey\n            };\n            this.searchValue = '';\n          }\n        }\n      }\n      var itemIndex = this.focusedItemInfo.index !== -1 ? this.findNextItemIndex(this.focusedItemInfo.index) : this.findFirstFocusedItemIndex();\n      this.changeFocusedItemInfo(event, itemIndex);\n      event.preventDefault();\n    },\n    onArrowUpKey: function onArrowUpKey(event) {\n      if (event.altKey && this.horizontal) {\n        if (this.focusedItemInfo.index !== -1) {\n          var processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n          var grouped = this.isProccessedItemGroup(processedItem);\n          if (!grouped && ObjectUtils.isNotEmpty(this.activeItem)) {\n            if (this.focusedItemInfo.index === 0) {\n              this.focusedItemInfo = {\n                index: this.activeItem.index,\n                key: this.activeItem.key,\n                parentKey: this.activeItem.parentKey\n              };\n              this.activeItem = null;\n            } else {\n              this.changeFocusedItemInfo(event, this.findFirstItemIndex());\n            }\n          }\n        }\n        event.preventDefault();\n      } else {\n        var itemIndex = this.focusedItemInfo.index !== -1 ? this.findPrevItemIndex(this.focusedItemInfo.index) : this.findLastFocusedItemIndex();\n        this.changeFocusedItemInfo(event, itemIndex);\n        event.preventDefault();\n      }\n    },\n    onArrowLeftKey: function onArrowLeftKey(event) {\n      var processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n      var grouped = this.isProccessedItemGroup(processedItem);\n      if (grouped) {\n        if (this.horizontal) {\n          var itemIndex = this.focusedItemInfo.index !== -1 ? this.findPrevItemIndex(this.focusedItemInfo.index) : this.findLastFocusedItemIndex();\n          this.changeFocusedItemInfo(event, itemIndex);\n        }\n      } else {\n        if (this.vertical && ObjectUtils.isNotEmpty(this.activeItem)) {\n          if (processedItem.columnIndex === 0) {\n            this.focusedItemInfo = {\n              index: this.activeItem.index,\n              key: this.activeItem.key,\n              parentKey: this.activeItem.parentKey\n            };\n            this.activeItem = null;\n          }\n        }\n        var columnIndex = processedItem.columnIndex - 1;\n        var _itemIndex = this.visibleItems.findIndex(function (item) {\n          return item.columnIndex === columnIndex;\n        });\n        _itemIndex !== -1 && this.changeFocusedItemInfo(event, _itemIndex);\n      }\n      event.preventDefault();\n    },\n    onArrowRightKey: function onArrowRightKey(event) {\n      var processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n      var grouped = this.isProccessedItemGroup(processedItem);\n      if (grouped) {\n        if (this.vertical) {\n          if (ObjectUtils.isNotEmpty(this.activeItem) && this.activeItem.key === processedItem.key) {\n            this.focusedItemInfo = {\n              index: -1,\n              key: '',\n              parentKey: this.activeItem.key\n            };\n          } else {\n            var _processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n            var _grouped = this.isProccessedItemGroup(_processedItem);\n            if (_grouped) {\n              this.onItemChange({\n                originalEvent: event,\n                processedItem: _processedItem\n              });\n              this.focusedItemInfo = {\n                index: -1,\n                key: _processedItem.key,\n                parentKey: _processedItem.parentKey\n              };\n              this.searchValue = '';\n            }\n          }\n        }\n        var itemIndex = this.focusedItemInfo.index !== -1 ? this.findNextItemIndex(this.focusedItemInfo.index) : this.findFirstFocusedItemIndex();\n        this.changeFocusedItemInfo(event, itemIndex);\n      } else {\n        var columnIndex = processedItem.columnIndex + 1;\n        var _itemIndex2 = this.visibleItems.findIndex(function (item) {\n          return item.columnIndex === columnIndex;\n        });\n        _itemIndex2 !== -1 && this.changeFocusedItemInfo(event, _itemIndex2);\n      }\n      event.preventDefault();\n    },\n    onHomeKey: function onHomeKey(event) {\n      this.changeFocusedItemInfo(event, this.findFirstItemIndex());\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event) {\n      this.changeFocusedItemInfo(event, this.findLastItemIndex());\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      if (this.focusedItemInfo.index !== -1) {\n        var element = DomHandler.findSingle(this.menubar, \"li[id=\\\"\".concat(\"\".concat(this.focusedItemId), \"\\\"]\"));\n        var anchorElement = element && DomHandler.findSingle(element, 'a[data-pc-section=\"action\"]');\n        anchorElement ? anchorElement.click() : element && element.click();\n        var processedItem = this.visibleItems[this.focusedItemInfo.index];\n        var grouped = this.isProccessedItemGroup(processedItem);\n        !grouped && this.changeFocusedItemInfo(event, this.findFirstFocusedItemIndex());\n      }\n      event.preventDefault();\n    },\n    onSpaceKey: function onSpaceKey(event) {\n      this.onEnterKey(event);\n    },\n    onEscapeKey: function onEscapeKey(event) {\n      if (ObjectUtils.isNotEmpty(this.activeItem)) {\n        this.focusedItemInfo = {\n          index: this.activeItem.index,\n          key: this.activeItem.key\n        };\n        this.activeItem = null;\n      }\n      event.preventDefault();\n    },\n    onTabKey: function onTabKey(event) {\n      if (this.focusedItemInfo.index !== -1) {\n        var processedItem = this.findVisibleItem(this.focusedItemInfo.index);\n        var grouped = this.isProccessedItemGroup(processedItem);\n        !grouped && this.onItemChange({\n          originalEvent: event,\n          processedItem: processedItem\n        });\n      }\n      this.hide();\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this3 = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          var isOutsideContainer = _this3.container && !_this3.container.contains(event.target);\n          var isOutsideTarget = !(_this3.target && (_this3.target === event.target || _this3.target.contains(event.target)));\n          if (isOutsideContainer && isOutsideTarget) {\n            _this3.hide();\n          }\n        };\n        document.addEventListener('click', this.outsideClickListener);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this4 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function (event) {\n          if (!DomHandler.isTouchDevice()) {\n            _this4.hide(event, true);\n          }\n          _this4.mobileActive = false;\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    bindMatchMediaListener: function bindMatchMediaListener() {\n      var _this5 = this;\n      if (!this.matchMediaListener) {\n        var query = matchMedia(\"(max-width: \".concat(this.breakpoint, \")\"));\n        this.query = query;\n        this.queryMatches = query.matches;\n        this.matchMediaListener = function () {\n          _this5.queryMatches = query.matches;\n          _this5.mobileActive = false;\n        };\n        this.query.addEventListener('change', this.matchMediaListener);\n      }\n    },\n    unbindMatchMediaListener: function unbindMatchMediaListener() {\n      if (this.matchMediaListener) {\n        this.query.removeEventListener('change', this.matchMediaListener);\n        this.matchMediaListener = null;\n      }\n    },\n    isItemMatched: function isItemMatched(processedItem) {\n      var _this$getProccessedIt;\n      return this.isValidItem(processedItem) && ((_this$getProccessedIt = this.getProccessedItemLabel(processedItem)) === null || _this$getProccessedIt === void 0 ? void 0 : _this$getProccessedIt.toLocaleLowerCase().startsWith(this.searchValue.toLocaleLowerCase()));\n    },\n    isValidItem: function isValidItem(processedItem) {\n      return !!processedItem && !this.isItemDisabled(processedItem.item) && !this.isItemSeparator(processedItem.item) && this.isItemVisible(processedItem.item);\n    },\n    isValidSelectedItem: function isValidSelectedItem(processedItem) {\n      return this.isValidItem(processedItem) && this.isSelected(processedItem);\n    },\n    isSelected: function isSelected(processedItem) {\n      return ObjectUtils.isNotEmpty(this.activeItem) ? this.activeItem.key === processedItem.key : false;\n    },\n    findFirstItemIndex: function findFirstItemIndex() {\n      var _this6 = this;\n      return this.visibleItems.findIndex(function (processedItem) {\n        return _this6.isValidItem(processedItem);\n      });\n    },\n    findLastItemIndex: function findLastItemIndex() {\n      var _this7 = this;\n      return ObjectUtils.findLastIndex(this.visibleItems, function (processedItem) {\n        return _this7.isValidItem(processedItem);\n      });\n    },\n    findNextItemIndex: function findNextItemIndex(index) {\n      var _this8 = this;\n      var matchedItemIndex = index < this.visibleItems.length - 1 ? this.visibleItems.slice(index + 1).findIndex(function (processedItem) {\n        return _this8.isValidItem(processedItem);\n      }) : -1;\n      return matchedItemIndex > -1 ? matchedItemIndex + index + 1 : index;\n    },\n    findPrevItemIndex: function findPrevItemIndex(index) {\n      var _this9 = this;\n      var matchedItemIndex = index > 0 ? ObjectUtils.findLastIndex(this.visibleItems.slice(0, index), function (processedItem) {\n        return _this9.isValidItem(processedItem);\n      }) : -1;\n      return matchedItemIndex > -1 ? matchedItemIndex : index;\n    },\n    findSelectedItemIndex: function findSelectedItemIndex() {\n      var _this10 = this;\n      return this.visibleItems.findIndex(function (processedItem) {\n        return _this10.isValidSelectedItem(processedItem);\n      });\n    },\n    findFirstFocusedItemIndex: function findFirstFocusedItemIndex() {\n      var selectedIndex = this.findSelectedItemIndex();\n      return selectedIndex < 0 ? this.findFirstItemIndex() : selectedIndex;\n    },\n    findLastFocusedItemIndex: function findLastFocusedItemIndex() {\n      var selectedIndex = this.findSelectedItemIndex();\n      return selectedIndex < 0 ? this.findLastItemIndex() : selectedIndex;\n    },\n    findVisibleItem: function findVisibleItem(index) {\n      return ObjectUtils.isNotEmpty(this.visibleItems) ? this.visibleItems[index] : null;\n    },\n    searchItems: function searchItems(event, _char) {\n      var _this11 = this;\n      this.searchValue = (this.searchValue || '') + _char;\n      var itemIndex = -1;\n      var matched = false;\n      if (this.focusedItemInfo.index !== -1) {\n        itemIndex = this.visibleItems.slice(this.focusedItemInfo.index).findIndex(function (processedItem) {\n          return _this11.isItemMatched(processedItem);\n        });\n        itemIndex = itemIndex === -1 ? this.visibleItems.slice(0, this.focusedItemInfo.index).findIndex(function (processedItem) {\n          return _this11.isItemMatched(processedItem);\n        }) : itemIndex + this.focusedItemInfo.index;\n      } else {\n        itemIndex = this.visibleItems.findIndex(function (processedItem) {\n          return _this11.isItemMatched(processedItem);\n        });\n      }\n      if (itemIndex !== -1) {\n        matched = true;\n      }\n      if (itemIndex === -1 && this.focusedItemInfo.index === -1) {\n        itemIndex = this.findFirstFocusedItemIndex();\n      }\n      if (itemIndex !== -1) {\n        this.changeFocusedItemInfo(event, itemIndex);\n      }\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n      this.searchTimeout = setTimeout(function () {\n        _this11.searchValue = '';\n        _this11.searchTimeout = null;\n      }, 500);\n      return matched;\n    },\n    changeFocusedItemInfo: function changeFocusedItemInfo(event, index) {\n      var processedItem = this.findVisibleItem(index);\n      this.focusedItemInfo.index = index;\n      this.focusedItemInfo.key = ObjectUtils.isNotEmpty(processedItem) ? processedItem.key : '';\n      this.scrollInView();\n    },\n    scrollInView: function scrollInView() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      var id = index !== -1 ? \"\".concat(this.id, \"_\").concat(index) : this.focusedItemId;\n      var element = DomHandler.findSingle(this.menubar, \"li[id=\\\"\".concat(id, \"\\\"]\"));\n      if (element) {\n        element.scrollIntoView && element.scrollIntoView({\n          block: 'nearest',\n          inline: 'start'\n        });\n      }\n    },\n    createProcessedItems: function createProcessedItems(items) {\n      var _this12 = this;\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var parentKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n      var columnIndex = arguments.length > 4 ? arguments[4] : undefined;\n      var processedItems = [];\n      items && items.forEach(function (item, index) {\n        var key = (parentKey !== '' ? parentKey + '_' : '') + (columnIndex !== undefined ? columnIndex + '_' : '') + index;\n        var newItem = {\n          item: item,\n          index: index,\n          level: level,\n          key: key,\n          parent: parent,\n          parentKey: parentKey,\n          columnIndex: columnIndex !== undefined ? columnIndex : parent.columnIndex !== undefined ? parent.columnIndex : index\n        };\n        newItem['items'] = level === 0 && item.items && item.items.length > 0 ? item.items.map(function (_items, _index) {\n          return _this12.createProcessedItems(_items, level + 1, newItem, key, _index);\n        }) : _this12.createProcessedItems(item.items, level + 1, newItem, key);\n        processedItems.push(newItem);\n      });\n      return processedItems;\n    },\n    containerRef: function containerRef(el) {\n      this.container = el;\n    },\n    menubarRef: function menubarRef(el) {\n      this.menubar = el ? el.$el : undefined;\n    }\n  },\n  computed: {\n    processedItems: function processedItems() {\n      return this.createProcessedItems(this.model || []);\n    },\n    visibleItems: function visibleItems() {\n      var processedItem = ObjectUtils.isNotEmpty(this.activeItem) ? this.activeItem : null;\n      return processedItem && processedItem.key === this.focusedItemInfo.parentKey ? processedItem.items.reduce(function (items, col) {\n        col.forEach(function (submenu) {\n          submenu.items.forEach(function (a) {\n            items.push(a);\n          });\n        });\n        return items;\n      }, []) : this.processedItems;\n    },\n    horizontal: function horizontal() {\n      return this.orientation === 'horizontal';\n    },\n    vertical: function vertical() {\n      return this.orientation === 'vertical';\n    },\n    focusedItemId: function focusedItemId() {\n      return ObjectUtils.isNotEmpty(this.focusedItemInfo.key) ? \"\".concat(this.id, \"_\").concat(this.focusedItemInfo.key) : null;\n    }\n  },\n  components: {\n    MegaMenuSub: script$1,\n    BarsIcon: BarsIcon\n  }\n};\n\nvar _hoisted_1 = [\"id\"];\nvar _hoisted_2 = [\"aria-haspopup\", \"aria-expanded\", \"aria-controls\", \"aria-label\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_BarsIcon = resolveComponent(\"BarsIcon\");\n  var _component_MegaMenuSub = resolveComponent(\"MegaMenuSub\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: $options.containerRef,\n    id: $data.id,\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root')), [_ctx.$slots.start ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('start')\n  }, _ctx.ptm('start')), [renderSlot(_ctx.$slots, \"start\")], 16)) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, \"menubutton\", {\n    id: $data.id,\n    \"class\": normalizeClass(_ctx.cx('menubutton')),\n    toggleCallback: function toggleCallback(event) {\n      return $options.menuButtonClick(event);\n    }\n  }, function () {\n    var _ctx$$primevue$config;\n    return [_ctx.model && _ctx.model.length > 0 ? (openBlock(), createElementBlock(\"a\", mergeProps({\n      key: 0,\n      ref: \"menubutton\",\n      role: \"button\",\n      tabindex: \"0\",\n      \"class\": _ctx.cx('menubutton'),\n      \"aria-haspopup\": _ctx.model.length && _ctx.model.length > 0 ? true : false,\n      \"aria-expanded\": $data.mobileActive,\n      \"aria-controls\": $data.id,\n      \"aria-label\": (_ctx$$primevue$config = _ctx.$primevue.config.locale.aria) === null || _ctx$$primevue$config === void 0 ? void 0 : _ctx$$primevue$config.navigation,\n      onClick: _cache[0] || (_cache[0] = function ($event) {\n        return $options.menuButtonClick($event);\n      }),\n      onKeydown: _cache[1] || (_cache[1] = function ($event) {\n        return $options.menuButtonKeydown($event);\n      })\n    }, _ctx.ptm('menubutton')), [renderSlot(_ctx.$slots, \"menubuttonicon\", {}, function () {\n      return [createVNode(_component_BarsIcon, normalizeProps(guardReactiveProps(_ctx.ptm('menubuttonicon'))), null, 16)];\n    })], 16, _hoisted_2)) : createCommentVNode(\"\", true)];\n  }), createVNode(_component_MegaMenuSub, {\n    ref: $options.menubarRef,\n    id: $data.id + '_list',\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    role: \"menubar\",\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-disabled\": _ctx.disabled || undefined,\n    \"aria-orientation\": _ctx.orientation,\n    \"aria-activedescendant\": $data.focused ? $options.focusedItemId : undefined,\n    menuId: $data.id,\n    focusedItemId: $data.focused ? $options.focusedItemId : undefined,\n    items: $options.processedItems,\n    horizontal: $options.horizontal,\n    templates: _ctx.$slots,\n    activeItem: $data.activeItem,\n    mobileActive: $data.mobileActive,\n    level: 0,\n    pt: _ctx.pt,\n    unstyled: _ctx.unstyled,\n    onFocus: $options.onFocus,\n    onBlur: $options.onBlur,\n    onKeydown: $options.onKeyDown,\n    onItemClick: $options.onItemClick,\n    onItemMouseenter: $options.onItemMouseEnter\n  }, null, 8, [\"id\", \"tabindex\", \"aria-label\", \"aria-labelledby\", \"aria-disabled\", \"aria-orientation\", \"aria-activedescendant\", \"menuId\", \"focusedItemId\", \"items\", \"horizontal\", \"templates\", \"activeItem\", \"mobileActive\", \"pt\", \"unstyled\", \"onFocus\", \"onBlur\", \"onKeydown\", \"onItemClick\", \"onItemMouseenter\"]), _ctx.$slots.end ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('end')\n  }, _ctx.ptm('end')), [renderSlot(_ctx.$slots, \"end\")], 16)) : createCommentVNode(\"\", true)], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n",
      "start": 1756100540241,
      "end": 1756100540257,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "result": "import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => import(\"/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/megamenu/megamenu.esm.js\").then(r => r[\"default\"] || r.default || r))",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "replace",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100540257,
      "end": 1756100540257,
      "order": "normal"
    }
  ]
}
