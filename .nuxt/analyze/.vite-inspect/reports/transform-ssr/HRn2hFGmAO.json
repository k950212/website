{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/swiper@10.3.1/node_modules/swiper/modules/thumbs.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { g as getDocument } from '../shared/ssr-window.esm.mjs';\nimport { j as isObject, e as elementChildren } from '../shared/utils.mjs';\n\nfunction Thumb(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\n      thumbsContainerClass: 'swiper-thumbs'\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass)) return;\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\n    let slideToIndex;\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt(thumbsSwiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n    if (swiper.params.loop) {\n      swiper.slideToLoop(slideToIndex);\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  }\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized) return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper.update();\n    } else if (isObject(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n    swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on('tap', onThumbClick);\n    return true;\n  }\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n\n    // Activate thumbs\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.forEach(slideEl => slideEl.classList.remove(thumbActiveClass));\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        elementChildren(thumbsSwiper.slidesEl, `[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).forEach(slideEl => {\n          slideEl.classList.add(thumbActiveClass);\n        });\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        if (thumbsSwiper.slides[swiper.realIndex + i]) {\n          thumbsSwiper.slides[swiper.realIndex + i].classList.add(thumbActiveClass);\n        }\n      }\n    }\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      const currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n      if (thumbsSwiper.params.loop) {\n        const newThumbsSlide = thumbsSwiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') === `${swiper.realIndex}`)[0];\n        newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\n      }\n      if (useOffset) {\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) ;\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n      }\n    }\n  }\n  on('beforeInit', () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper) return;\n    if (typeof thumbs.swiper === 'string' || thumbs.swiper instanceof HTMLElement) {\n      const document = getDocument();\n      const getThumbsElementAndInit = () => {\n        const thumbsElement = typeof thumbs.swiper === 'string' ? document.querySelector(thumbs.swiper) : thumbs.swiper;\n        if (thumbsElement && thumbsElement.swiper) {\n          thumbs.swiper = thumbsElement.swiper;\n          init();\n          update(true);\n        } else if (thumbsElement) {\n          const onThumbsSwiper = e => {\n            thumbs.swiper = e.detail[0];\n            thumbsElement.removeEventListener('init', onThumbsSwiper);\n            init();\n            update(true);\n            thumbs.swiper.update();\n            swiper.update();\n          };\n          thumbsElement.addEventListener('init', onThumbsSwiper);\n        }\n        return thumbsElement;\n      };\n      const watchForThumbsToAppear = () => {\n        if (swiper.destroyed) return;\n        const thumbsElement = getThumbsElementAndInit();\n        if (!thumbsElement) {\n          requestAnimationFrame(watchForThumbsToAppear);\n        }\n      };\n      requestAnimationFrame(watchForThumbsToAppear);\n    } else {\n      init();\n      update(true);\n    }\n  });\n  on('slideChange update resize observerUpdate', () => {\n    update();\n  });\n  on('setTransition', (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on('beforeDestroy', () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    if (swiperCreated) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}\n\nexport { Thumb as default };\n",
      "start": 1756100544574,
      "end": 1756100544600,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100544600,
      "end": 1756100544600,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { g as getDocument } from \"../shared/ssr-window.esm.mjs\";\nimport { j as isObject, e as elementChildren } from \"../shared/utils.mjs\";\nfunction Thumb(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: \"swiper-slide-thumb-active\",\n      thumbsContainerClass: \"swiper-thumbs\"\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed)\n      return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass))\n      return;\n    if (typeof clickedIndex === \"undefined\" || clickedIndex === null)\n      return;\n    let slideToIndex;\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt(thumbsSwiper.clickedSlide.getAttribute(\"data-swiper-slide-index\"), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n    if (swiper.params.loop) {\n      swiper.slideToLoop(slideToIndex);\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  }\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized)\n      return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper.update();\n    } else if (isObject(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n    swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on(\"tap\", onThumbClick);\n    return true;\n  }\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed)\n      return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === \"auto\" ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.forEach((slideEl) => slideEl.classList.remove(thumbActiveClass));\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        elementChildren(thumbsSwiper.slidesEl, `[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).forEach((slideEl) => {\n          slideEl.classList.add(thumbActiveClass);\n        });\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        if (thumbsSwiper.slides[swiper.realIndex + i]) {\n          thumbsSwiper.slides[swiper.realIndex + i].classList.add(thumbActiveClass);\n        }\n      }\n    }\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      const currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n      if (thumbsSwiper.params.loop) {\n        const newThumbsSlide = thumbsSwiper.slides.filter((slideEl) => slideEl.getAttribute(\"data-swiper-slide-index\") === `${swiper.realIndex}`)[0];\n        newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);\n        direction = swiper.activeIndex > swiper.previousIndex ? \"next\" : \"prev\";\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? \"next\" : \"prev\";\n      }\n      if (useOffset) {\n        newThumbsIndex += direction === \"next\" ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1)\n          ;\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : void 0);\n      }\n    }\n  }\n  on(\"beforeInit\", () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper)\n      return;\n    if (typeof thumbs.swiper === \"string\" || thumbs.swiper instanceof HTMLElement) {\n      const document = getDocument();\n      const getThumbsElementAndInit = () => {\n        const thumbsElement = typeof thumbs.swiper === \"string\" ? document.querySelector(thumbs.swiper) : thumbs.swiper;\n        if (thumbsElement && thumbsElement.swiper) {\n          thumbs.swiper = thumbsElement.swiper;\n          init();\n          update(true);\n        } else if (thumbsElement) {\n          const onThumbsSwiper = (e) => {\n            thumbs.swiper = e.detail[0];\n            thumbsElement.removeEventListener(\"init\", onThumbsSwiper);\n            init();\n            update(true);\n            thumbs.swiper.update();\n            swiper.update();\n          };\n          thumbsElement.addEventListener(\"init\", onThumbsSwiper);\n        }\n        return thumbsElement;\n      };\n      const watchForThumbsToAppear = () => {\n        if (swiper.destroyed)\n          return;\n        const thumbsElement = getThumbsElementAndInit();\n        if (!thumbsElement) {\n          requestAnimationFrame(watchForThumbsToAppear);\n        }\n      };\n      requestAnimationFrame(watchForThumbsToAppear);\n    } else {\n      init();\n      update(true);\n    }\n  });\n  on(\"slideChange update resize observerUpdate\", () => {\n    update();\n  });\n  on(\"setTransition\", (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed)\n      return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on(\"beforeDestroy\", () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed)\n      return;\n    if (swiperCreated) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}\nexport { Thumb as default };\n",
      "start": 1756100544600,
      "end": 1756100544920,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/yunhao/Project/website/node_modules/.pnpm/swiper@10.3.1/node_modules/swiper/modules/thumbs.mjs\"],\n  \"sourcesContent\": [\"import { g as getDocument } from '../shared/ssr-window.esm.mjs';\\nimport { j as isObject, e as elementChildren } from '../shared/utils.mjs';\\n\\nfunction Thumb(_ref) {\\n  let {\\n    swiper,\\n    extendParams,\\n    on\\n  } = _ref;\\n  extendParams({\\n    thumbs: {\\n      swiper: null,\\n      multipleActiveThumbs: true,\\n      autoScrollOffset: 0,\\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\\n      thumbsContainerClass: 'swiper-thumbs'\\n    }\\n  });\\n  let initialized = false;\\n  let swiperCreated = false;\\n  swiper.thumbs = {\\n    swiper: null\\n  };\\n  function onThumbClick() {\\n    const thumbsSwiper = swiper.thumbs.swiper;\\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\\n    const clickedIndex = thumbsSwiper.clickedIndex;\\n    const clickedSlide = thumbsSwiper.clickedSlide;\\n    if (clickedSlide && clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass)) return;\\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\\n    let slideToIndex;\\n    if (thumbsSwiper.params.loop) {\\n      slideToIndex = parseInt(thumbsSwiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);\\n    } else {\\n      slideToIndex = clickedIndex;\\n    }\\n    if (swiper.params.loop) {\\n      swiper.slideToLoop(slideToIndex);\\n    } else {\\n      swiper.slideTo(slideToIndex);\\n    }\\n  }\\n  function init() {\\n    const {\\n      thumbs: thumbsParams\\n    } = swiper.params;\\n    if (initialized) return false;\\n    initialized = true;\\n    const SwiperClass = swiper.constructor;\\n    if (thumbsParams.swiper instanceof SwiperClass) {\\n      swiper.thumbs.swiper = thumbsParams.swiper;\\n      Object.assign(swiper.thumbs.swiper.originalParams, {\\n        watchSlidesProgress: true,\\n        slideToClickedSlide: false\\n      });\\n      Object.assign(swiper.thumbs.swiper.params, {\\n        watchSlidesProgress: true,\\n        slideToClickedSlide: false\\n      });\\n      swiper.thumbs.swiper.update();\\n    } else if (isObject(thumbsParams.swiper)) {\\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\\n      Object.assign(thumbsSwiperParams, {\\n        watchSlidesProgress: true,\\n        slideToClickedSlide: false\\n      });\\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\\n      swiperCreated = true;\\n    }\\n    swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass);\\n    swiper.thumbs.swiper.on('tap', onThumbClick);\\n    return true;\\n  }\\n  function update(initial) {\\n    const thumbsSwiper = swiper.thumbs.swiper;\\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\\n\\n    // Activate thumbs\\n    let thumbsToActivate = 1;\\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\\n      thumbsToActivate = swiper.params.slidesPerView;\\n    }\\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\\n      thumbsToActivate = 1;\\n    }\\n    thumbsToActivate = Math.floor(thumbsToActivate);\\n    thumbsSwiper.slides.forEach(slideEl => slideEl.classList.remove(thumbActiveClass));\\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\\n      for (let i = 0; i < thumbsToActivate; i += 1) {\\n        elementChildren(thumbsSwiper.slidesEl, `[data-swiper-slide-index=\\\"${swiper.realIndex + i}\\\"]`).forEach(slideEl => {\\n          slideEl.classList.add(thumbActiveClass);\\n        });\\n      }\\n    } else {\\n      for (let i = 0; i < thumbsToActivate; i += 1) {\\n        if (thumbsSwiper.slides[swiper.realIndex + i]) {\\n          thumbsSwiper.slides[swiper.realIndex + i].classList.add(thumbActiveClass);\\n        }\\n      }\\n    }\\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\\n      const currentThumbsIndex = thumbsSwiper.activeIndex;\\n      let newThumbsIndex;\\n      let direction;\\n      if (thumbsSwiper.params.loop) {\\n        const newThumbsSlide = thumbsSwiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') === `${swiper.realIndex}`)[0];\\n        newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);\\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\\n      } else {\\n        newThumbsIndex = swiper.realIndex;\\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\\n      }\\n      if (useOffset) {\\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\\n      }\\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\\n        if (thumbsSwiper.params.centeredSlides) {\\n          if (newThumbsIndex > currentThumbsIndex) {\\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\\n          } else {\\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\\n          }\\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) ;\\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\\n      }\\n    }\\n  }\\n  on('beforeInit', () => {\\n    const {\\n      thumbs\\n    } = swiper.params;\\n    if (!thumbs || !thumbs.swiper) return;\\n    if (typeof thumbs.swiper === 'string' || thumbs.swiper instanceof HTMLElement) {\\n      const document = getDocument();\\n      const getThumbsElementAndInit = () => {\\n        const thumbsElement = typeof thumbs.swiper === 'string' ? document.querySelector(thumbs.swiper) : thumbs.swiper;\\n        if (thumbsElement && thumbsElement.swiper) {\\n          thumbs.swiper = thumbsElement.swiper;\\n          init();\\n          update(true);\\n        } else if (thumbsElement) {\\n          const onThumbsSwiper = e => {\\n            thumbs.swiper = e.detail[0];\\n            thumbsElement.removeEventListener('init', onThumbsSwiper);\\n            init();\\n            update(true);\\n            thumbs.swiper.update();\\n            swiper.update();\\n          };\\n          thumbsElement.addEventListener('init', onThumbsSwiper);\\n        }\\n        return thumbsElement;\\n      };\\n      const watchForThumbsToAppear = () => {\\n        if (swiper.destroyed) return;\\n        const thumbsElement = getThumbsElementAndInit();\\n        if (!thumbsElement) {\\n          requestAnimationFrame(watchForThumbsToAppear);\\n        }\\n      };\\n      requestAnimationFrame(watchForThumbsToAppear);\\n    } else {\\n      init();\\n      update(true);\\n    }\\n  });\\n  on('slideChange update resize observerUpdate', () => {\\n    update();\\n  });\\n  on('setTransition', (_s, duration) => {\\n    const thumbsSwiper = swiper.thumbs.swiper;\\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\\n    thumbsSwiper.setTransition(duration);\\n  });\\n  on('beforeDestroy', () => {\\n    const thumbsSwiper = swiper.thumbs.swiper;\\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\\n    if (swiperCreated) {\\n      thumbsSwiper.destroy();\\n    }\\n  });\\n  Object.assign(swiper.thumbs, {\\n    init,\\n    update\\n  });\\n}\\n\\nexport { Thumb as default };\\n\"],\n  \"mappings\": \"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\",\n  \"names\": []\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100544920,
      "end": 1756100544920,
      "order": "normal"
    }
  ]
}
