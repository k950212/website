{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/swiper@10.3.1/node_modules/swiper/modules/scrollbar.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { g as getDocument } from '../shared/ssr-window.esm.mjs';\nimport { c as createElement, n as nextTick, b as elementOffset } from '../shared/utils.mjs';\nimport { c as createElementIfNotDefined } from '../shared/create-element-if-not-defined.mjs';\n\nfunction Scrollbar(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const document = getDocument();\n  let isTouched = false;\n  let timeout = null;\n  let dragTimeout = null;\n  let dragStartPos;\n  let dragSize;\n  let trackSize;\n  let divider;\n  extendParams({\n    scrollbar: {\n      el: null,\n      dragSize: 'auto',\n      hide: false,\n      draggable: false,\n      snapOnRelease: true,\n      lockClass: 'swiper-scrollbar-lock',\n      dragClass: 'swiper-scrollbar-drag',\n      scrollbarDisabledClass: 'swiper-scrollbar-disabled',\n      horizontalClass: `swiper-scrollbar-horizontal`,\n      verticalClass: `swiper-scrollbar-vertical`\n    }\n  });\n  swiper.scrollbar = {\n    el: null,\n    dragEl: null\n  };\n  function setTranslate() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      dragEl,\n      el\n    } = scrollbar;\n    const params = swiper.params.scrollbar;\n    const progress = swiper.params.loop ? swiper.progressLoop : swiper.progress;\n    let newSize = dragSize;\n    let newPos = (trackSize - dragSize) * progress;\n    if (rtl) {\n      newPos = -newPos;\n      if (newPos > 0) {\n        newSize = dragSize - newPos;\n        newPos = 0;\n      } else if (-newPos + dragSize > trackSize) {\n        newSize = trackSize + newPos;\n      }\n    } else if (newPos < 0) {\n      newSize = dragSize + newPos;\n      newPos = 0;\n    } else if (newPos + dragSize > trackSize) {\n      newSize = trackSize - newPos;\n    }\n    if (swiper.isHorizontal()) {\n      dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;\n      dragEl.style.width = `${newSize}px`;\n    } else {\n      dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;\n      dragEl.style.height = `${newSize}px`;\n    }\n    if (params.hide) {\n      clearTimeout(timeout);\n      el.style.opacity = 1;\n      timeout = setTimeout(() => {\n        el.style.opacity = 0;\n        el.style.transitionDuration = '400ms';\n      }, 1000);\n    }\n  }\n  function setTransition(duration) {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;\n  }\n  function updateSize() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const {\n      scrollbar\n    } = swiper;\n    const {\n      dragEl,\n      el\n    } = scrollbar;\n    dragEl.style.width = '';\n    dragEl.style.height = '';\n    trackSize = swiper.isHorizontal() ? el.offsetWidth : el.offsetHeight;\n    divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n    if (swiper.params.scrollbar.dragSize === 'auto') {\n      dragSize = trackSize * divider;\n    } else {\n      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n    }\n    if (swiper.isHorizontal()) {\n      dragEl.style.width = `${dragSize}px`;\n    } else {\n      dragEl.style.height = `${dragSize}px`;\n    }\n    if (divider >= 1) {\n      el.style.display = 'none';\n    } else {\n      el.style.display = '';\n    }\n    if (swiper.params.scrollbar.hide) {\n      el.style.opacity = 0;\n    }\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      scrollbar.el.classList[swiper.isLocked ? 'add' : 'remove'](swiper.params.scrollbar.lockClass);\n    }\n  }\n  function getPointerPosition(e) {\n    return swiper.isHorizontal() ? e.clientX : e.clientY;\n  }\n  function setDragPosition(e) {\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      el\n    } = scrollbar;\n    let positionRatio;\n    positionRatio = (getPointerPosition(e) - elementOffset(el)[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n    positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n    if (rtl) {\n      positionRatio = 1 - positionRatio;\n    }\n    const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n    swiper.updateProgress(position);\n    swiper.setTranslate(position);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  function onDragStart(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      wrapperEl\n    } = swiper;\n    const {\n      el,\n      dragEl\n    } = scrollbar;\n    isTouched = true;\n    dragStartPos = e.target === dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;\n    e.preventDefault();\n    e.stopPropagation();\n    wrapperEl.style.transitionDuration = '100ms';\n    dragEl.style.transitionDuration = '100ms';\n    setDragPosition(e);\n    clearTimeout(dragTimeout);\n    el.style.transitionDuration = '0ms';\n    if (params.hide) {\n      el.style.opacity = 1;\n    }\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style['scroll-snap-type'] = 'none';\n    }\n    emit('scrollbarDragStart', e);\n  }\n  function onDragMove(e) {\n    const {\n      scrollbar,\n      wrapperEl\n    } = swiper;\n    const {\n      el,\n      dragEl\n    } = scrollbar;\n    if (!isTouched) return;\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n    setDragPosition(e);\n    wrapperEl.style.transitionDuration = '0ms';\n    el.style.transitionDuration = '0ms';\n    dragEl.style.transitionDuration = '0ms';\n    emit('scrollbarDragMove', e);\n  }\n  function onDragEnd(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      wrapperEl\n    } = swiper;\n    const {\n      el\n    } = scrollbar;\n    if (!isTouched) return;\n    isTouched = false;\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style['scroll-snap-type'] = '';\n      wrapperEl.style.transitionDuration = '';\n    }\n    if (params.hide) {\n      clearTimeout(dragTimeout);\n      dragTimeout = nextTick(() => {\n        el.style.opacity = 0;\n        el.style.transitionDuration = '400ms';\n      }, 1000);\n    }\n    emit('scrollbarDragEnd', e);\n    if (params.snapOnRelease) {\n      swiper.slideToClosest();\n    }\n  }\n  function events(method) {\n    const {\n      scrollbar,\n      params\n    } = swiper;\n    const el = scrollbar.el;\n    if (!el) return;\n    const target = el;\n    const activeListener = params.passiveListeners ? {\n      passive: false,\n      capture: false\n    } : false;\n    const passiveListener = params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    if (!target) return;\n    const eventMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n    target[eventMethod]('pointerdown', onDragStart, activeListener);\n    document[eventMethod]('pointermove', onDragMove, activeListener);\n    document[eventMethod]('pointerup', onDragEnd, passiveListener);\n  }\n  function enableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    events('on');\n  }\n  function disableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    events('off');\n  }\n  function init() {\n    const {\n      scrollbar,\n      el: swiperEl\n    } = swiper;\n    swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n      el: 'swiper-scrollbar'\n    });\n    const params = swiper.params.scrollbar;\n    if (!params.el) return;\n    let el;\n    if (typeof params.el === 'string' && swiper.isElement) {\n      el = swiper.el.querySelector(params.el);\n    }\n    if (!el && typeof params.el === 'string') {\n      el = document.querySelectorAll(params.el);\n    } else if (!el) {\n      el = params.el;\n    }\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && el.length > 1 && swiperEl.querySelectorAll(params.el).length === 1) {\n      el = swiperEl.querySelector(params.el);\n    }\n    if (el.length > 0) el = el[0];\n    el.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    let dragEl;\n    if (el) {\n      dragEl = el.querySelector(`.${swiper.params.scrollbar.dragClass}`);\n      if (!dragEl) {\n        dragEl = createElement('div', swiper.params.scrollbar.dragClass);\n        el.append(dragEl);\n      }\n    }\n    Object.assign(scrollbar, {\n      el,\n      dragEl\n    });\n    if (params.draggable) {\n      enableDraggable();\n    }\n    if (el) {\n      el.classList[swiper.enabled ? 'remove' : 'add'](swiper.params.scrollbar.lockClass);\n    }\n  }\n  function destroy() {\n    const params = swiper.params.scrollbar;\n    const el = swiper.scrollbar.el;\n    if (el) {\n      el.classList.remove(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    }\n    disableDraggable();\n  }\n  on('init', () => {\n    if (swiper.params.scrollbar.enabled === false) {\n      // eslint-disable-next-line\n      disable();\n    } else {\n      init();\n      updateSize();\n      setTranslate();\n    }\n  });\n  on('update resize observerUpdate lock unlock', () => {\n    updateSize();\n  });\n  on('setTranslate', () => {\n    setTranslate();\n  });\n  on('setTransition', (_s, duration) => {\n    setTransition(duration);\n  });\n  on('enable disable', () => {\n    const {\n      el\n    } = swiper.scrollbar;\n    if (el) {\n      el.classList[swiper.enabled ? 'remove' : 'add'](swiper.params.scrollbar.lockClass);\n    }\n  });\n  on('destroy', () => {\n    destroy();\n  });\n  const enable = () => {\n    swiper.el.classList.remove(swiper.params.scrollbar.scrollbarDisabledClass);\n    if (swiper.scrollbar.el) {\n      swiper.scrollbar.el.classList.remove(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n    init();\n    updateSize();\n    setTranslate();\n  };\n  const disable = () => {\n    swiper.el.classList.add(swiper.params.scrollbar.scrollbarDisabledClass);\n    if (swiper.scrollbar.el) {\n      swiper.scrollbar.el.classList.add(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n    destroy();\n  };\n  Object.assign(swiper.scrollbar, {\n    enable,\n    disable,\n    updateSize,\n    setTranslate,\n    init,\n    destroy\n  });\n}\n\nexport { Scrollbar as default };\n",
      "start": 1756100544550,
      "end": 1756100544593,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100544593,
      "end": 1756100544593,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { g as getDocument } from \"../shared/ssr-window.esm.mjs\";\nimport { c as createElement, n as nextTick, b as elementOffset } from \"../shared/utils.mjs\";\nimport { c as createElementIfNotDefined } from \"../shared/create-element-if-not-defined.mjs\";\nfunction Scrollbar(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const document = getDocument();\n  let isTouched = false;\n  let timeout = null;\n  let dragTimeout = null;\n  let dragStartPos;\n  let dragSize;\n  let trackSize;\n  let divider;\n  extendParams({\n    scrollbar: {\n      el: null,\n      dragSize: \"auto\",\n      hide: false,\n      draggable: false,\n      snapOnRelease: true,\n      lockClass: \"swiper-scrollbar-lock\",\n      dragClass: \"swiper-scrollbar-drag\",\n      scrollbarDisabledClass: \"swiper-scrollbar-disabled\",\n      horizontalClass: `swiper-scrollbar-horizontal`,\n      verticalClass: `swiper-scrollbar-vertical`\n    }\n  });\n  swiper.scrollbar = {\n    el: null,\n    dragEl: null\n  };\n  function setTranslate() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      dragEl,\n      el\n    } = scrollbar;\n    const params = swiper.params.scrollbar;\n    const progress = swiper.params.loop ? swiper.progressLoop : swiper.progress;\n    let newSize = dragSize;\n    let newPos = (trackSize - dragSize) * progress;\n    if (rtl) {\n      newPos = -newPos;\n      if (newPos > 0) {\n        newSize = dragSize - newPos;\n        newPos = 0;\n      } else if (-newPos + dragSize > trackSize) {\n        newSize = trackSize + newPos;\n      }\n    } else if (newPos < 0) {\n      newSize = dragSize + newPos;\n      newPos = 0;\n    } else if (newPos + dragSize > trackSize) {\n      newSize = trackSize - newPos;\n    }\n    if (swiper.isHorizontal()) {\n      dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;\n      dragEl.style.width = `${newSize}px`;\n    } else {\n      dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;\n      dragEl.style.height = `${newSize}px`;\n    }\n    if (params.hide) {\n      clearTimeout(timeout);\n      el.style.opacity = 1;\n      timeout = setTimeout(() => {\n        el.style.opacity = 0;\n        el.style.transitionDuration = \"400ms\";\n      }, 1e3);\n    }\n  }\n  function setTransition(duration) {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;\n  }\n  function updateSize() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    const {\n      scrollbar\n    } = swiper;\n    const {\n      dragEl,\n      el\n    } = scrollbar;\n    dragEl.style.width = \"\";\n    dragEl.style.height = \"\";\n    trackSize = swiper.isHorizontal() ? el.offsetWidth : el.offsetHeight;\n    divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n    if (swiper.params.scrollbar.dragSize === \"auto\") {\n      dragSize = trackSize * divider;\n    } else {\n      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n    }\n    if (swiper.isHorizontal()) {\n      dragEl.style.width = `${dragSize}px`;\n    } else {\n      dragEl.style.height = `${dragSize}px`;\n    }\n    if (divider >= 1) {\n      el.style.display = \"none\";\n    } else {\n      el.style.display = \"\";\n    }\n    if (swiper.params.scrollbar.hide) {\n      el.style.opacity = 0;\n    }\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      scrollbar.el.classList[swiper.isLocked ? \"add\" : \"remove\"](swiper.params.scrollbar.lockClass);\n    }\n  }\n  function getPointerPosition(e) {\n    return swiper.isHorizontal() ? e.clientX : e.clientY;\n  }\n  function setDragPosition(e) {\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      el\n    } = scrollbar;\n    let positionRatio;\n    positionRatio = (getPointerPosition(e) - elementOffset(el)[swiper.isHorizontal() ? \"left\" : \"top\"] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n    positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n    if (rtl) {\n      positionRatio = 1 - positionRatio;\n    }\n    const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n    swiper.updateProgress(position);\n    swiper.setTranslate(position);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  function onDragStart(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      wrapperEl\n    } = swiper;\n    const {\n      el,\n      dragEl\n    } = scrollbar;\n    isTouched = true;\n    dragStartPos = e.target === dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? \"left\" : \"top\"] : null;\n    e.preventDefault();\n    e.stopPropagation();\n    wrapperEl.style.transitionDuration = \"100ms\";\n    dragEl.style.transitionDuration = \"100ms\";\n    setDragPosition(e);\n    clearTimeout(dragTimeout);\n    el.style.transitionDuration = \"0ms\";\n    if (params.hide) {\n      el.style.opacity = 1;\n    }\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style[\"scroll-snap-type\"] = \"none\";\n    }\n    emit(\"scrollbarDragStart\", e);\n  }\n  function onDragMove(e) {\n    const {\n      scrollbar,\n      wrapperEl\n    } = swiper;\n    const {\n      el,\n      dragEl\n    } = scrollbar;\n    if (!isTouched)\n      return;\n    if (e.preventDefault)\n      e.preventDefault();\n    else\n      e.returnValue = false;\n    setDragPosition(e);\n    wrapperEl.style.transitionDuration = \"0ms\";\n    el.style.transitionDuration = \"0ms\";\n    dragEl.style.transitionDuration = \"0ms\";\n    emit(\"scrollbarDragMove\", e);\n  }\n  function onDragEnd(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      wrapperEl\n    } = swiper;\n    const {\n      el\n    } = scrollbar;\n    if (!isTouched)\n      return;\n    isTouched = false;\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style[\"scroll-snap-type\"] = \"\";\n      wrapperEl.style.transitionDuration = \"\";\n    }\n    if (params.hide) {\n      clearTimeout(dragTimeout);\n      dragTimeout = nextTick(() => {\n        el.style.opacity = 0;\n        el.style.transitionDuration = \"400ms\";\n      }, 1e3);\n    }\n    emit(\"scrollbarDragEnd\", e);\n    if (params.snapOnRelease) {\n      swiper.slideToClosest();\n    }\n  }\n  function events(method) {\n    const {\n      scrollbar,\n      params\n    } = swiper;\n    const el = scrollbar.el;\n    if (!el)\n      return;\n    const target = el;\n    const activeListener = params.passiveListeners ? {\n      passive: false,\n      capture: false\n    } : false;\n    const passiveListener = params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    if (!target)\n      return;\n    const eventMethod = method === \"on\" ? \"addEventListener\" : \"removeEventListener\";\n    target[eventMethod](\"pointerdown\", onDragStart, activeListener);\n    document[eventMethod](\"pointermove\", onDragMove, activeListener);\n    document[eventMethod](\"pointerup\", onDragEnd, passiveListener);\n  }\n  function enableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    events(\"on\");\n  }\n  function disableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    events(\"off\");\n  }\n  function init() {\n    const {\n      scrollbar,\n      el: swiperEl\n    } = swiper;\n    swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n      el: \"swiper-scrollbar\"\n    });\n    const params = swiper.params.scrollbar;\n    if (!params.el)\n      return;\n    let el;\n    if (typeof params.el === \"string\" && swiper.isElement) {\n      el = swiper.el.querySelector(params.el);\n    }\n    if (!el && typeof params.el === \"string\") {\n      el = document.querySelectorAll(params.el);\n    } else if (!el) {\n      el = params.el;\n    }\n    if (swiper.params.uniqueNavElements && typeof params.el === \"string\" && el.length > 1 && swiperEl.querySelectorAll(params.el).length === 1) {\n      el = swiperEl.querySelector(params.el);\n    }\n    if (el.length > 0)\n      el = el[0];\n    el.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    let dragEl;\n    if (el) {\n      dragEl = el.querySelector(`.${swiper.params.scrollbar.dragClass}`);\n      if (!dragEl) {\n        dragEl = createElement(\"div\", swiper.params.scrollbar.dragClass);\n        el.append(dragEl);\n      }\n    }\n    Object.assign(scrollbar, {\n      el,\n      dragEl\n    });\n    if (params.draggable) {\n      enableDraggable();\n    }\n    if (el) {\n      el.classList[swiper.enabled ? \"remove\" : \"add\"](swiper.params.scrollbar.lockClass);\n    }\n  }\n  function destroy() {\n    const params = swiper.params.scrollbar;\n    const el = swiper.scrollbar.el;\n    if (el) {\n      el.classList.remove(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    }\n    disableDraggable();\n  }\n  on(\"init\", () => {\n    if (swiper.params.scrollbar.enabled === false) {\n      disable();\n    } else {\n      init();\n      updateSize();\n      setTranslate();\n    }\n  });\n  on(\"update resize observerUpdate lock unlock\", () => {\n    updateSize();\n  });\n  on(\"setTranslate\", () => {\n    setTranslate();\n  });\n  on(\"setTransition\", (_s, duration) => {\n    setTransition(duration);\n  });\n  on(\"enable disable\", () => {\n    const {\n      el\n    } = swiper.scrollbar;\n    if (el) {\n      el.classList[swiper.enabled ? \"remove\" : \"add\"](swiper.params.scrollbar.lockClass);\n    }\n  });\n  on(\"destroy\", () => {\n    destroy();\n  });\n  const enable = () => {\n    swiper.el.classList.remove(swiper.params.scrollbar.scrollbarDisabledClass);\n    if (swiper.scrollbar.el) {\n      swiper.scrollbar.el.classList.remove(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n    init();\n    updateSize();\n    setTranslate();\n  };\n  const disable = () => {\n    swiper.el.classList.add(swiper.params.scrollbar.scrollbarDisabledClass);\n    if (swiper.scrollbar.el) {\n      swiper.scrollbar.el.classList.add(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n    destroy();\n  };\n  Object.assign(swiper.scrollbar, {\n    enable,\n    disable,\n    updateSize,\n    setTranslate,\n    init,\n    destroy\n  });\n}\nexport { Scrollbar as default };\n",
      "start": 1756100544593,
      "end": 1756100544914,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/yunhao/Project/website/node_modules/.pnpm/swiper@10.3.1/node_modules/swiper/modules/scrollbar.mjs\"],\n  \"sourcesContent\": [\"import { g as getDocument } from '../shared/ssr-window.esm.mjs';\\nimport { c as createElement, n as nextTick, b as elementOffset } from '../shared/utils.mjs';\\nimport { c as createElementIfNotDefined } from '../shared/create-element-if-not-defined.mjs';\\n\\nfunction Scrollbar(_ref) {\\n  let {\\n    swiper,\\n    extendParams,\\n    on,\\n    emit\\n  } = _ref;\\n  const document = getDocument();\\n  let isTouched = false;\\n  let timeout = null;\\n  let dragTimeout = null;\\n  let dragStartPos;\\n  let dragSize;\\n  let trackSize;\\n  let divider;\\n  extendParams({\\n    scrollbar: {\\n      el: null,\\n      dragSize: 'auto',\\n      hide: false,\\n      draggable: false,\\n      snapOnRelease: true,\\n      lockClass: 'swiper-scrollbar-lock',\\n      dragClass: 'swiper-scrollbar-drag',\\n      scrollbarDisabledClass: 'swiper-scrollbar-disabled',\\n      horizontalClass: `swiper-scrollbar-horizontal`,\\n      verticalClass: `swiper-scrollbar-vertical`\\n    }\\n  });\\n  swiper.scrollbar = {\\n    el: null,\\n    dragEl: null\\n  };\\n  function setTranslate() {\\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\\n    const {\\n      scrollbar,\\n      rtlTranslate: rtl\\n    } = swiper;\\n    const {\\n      dragEl,\\n      el\\n    } = scrollbar;\\n    const params = swiper.params.scrollbar;\\n    const progress = swiper.params.loop ? swiper.progressLoop : swiper.progress;\\n    let newSize = dragSize;\\n    let newPos = (trackSize - dragSize) * progress;\\n    if (rtl) {\\n      newPos = -newPos;\\n      if (newPos > 0) {\\n        newSize = dragSize - newPos;\\n        newPos = 0;\\n      } else if (-newPos + dragSize > trackSize) {\\n        newSize = trackSize + newPos;\\n      }\\n    } else if (newPos < 0) {\\n      newSize = dragSize + newPos;\\n      newPos = 0;\\n    } else if (newPos + dragSize > trackSize) {\\n      newSize = trackSize - newPos;\\n    }\\n    if (swiper.isHorizontal()) {\\n      dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;\\n      dragEl.style.width = `${newSize}px`;\\n    } else {\\n      dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;\\n      dragEl.style.height = `${newSize}px`;\\n    }\\n    if (params.hide) {\\n      clearTimeout(timeout);\\n      el.style.opacity = 1;\\n      timeout = setTimeout(() => {\\n        el.style.opacity = 0;\\n        el.style.transitionDuration = '400ms';\\n      }, 1000);\\n    }\\n  }\\n  function setTransition(duration) {\\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\\n    swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;\\n  }\\n  function updateSize() {\\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\\n    const {\\n      scrollbar\\n    } = swiper;\\n    const {\\n      dragEl,\\n      el\\n    } = scrollbar;\\n    dragEl.style.width = '';\\n    dragEl.style.height = '';\\n    trackSize = swiper.isHorizontal() ? el.offsetWidth : el.offsetHeight;\\n    divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\\n    if (swiper.params.scrollbar.dragSize === 'auto') {\\n      dragSize = trackSize * divider;\\n    } else {\\n      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\\n    }\\n    if (swiper.isHorizontal()) {\\n      dragEl.style.width = `${dragSize}px`;\\n    } else {\\n      dragEl.style.height = `${dragSize}px`;\\n    }\\n    if (divider >= 1) {\\n      el.style.display = 'none';\\n    } else {\\n      el.style.display = '';\\n    }\\n    if (swiper.params.scrollbar.hide) {\\n      el.style.opacity = 0;\\n    }\\n    if (swiper.params.watchOverflow && swiper.enabled) {\\n      scrollbar.el.classList[swiper.isLocked ? 'add' : 'remove'](swiper.params.scrollbar.lockClass);\\n    }\\n  }\\n  function getPointerPosition(e) {\\n    return swiper.isHorizontal() ? e.clientX : e.clientY;\\n  }\\n  function setDragPosition(e) {\\n    const {\\n      scrollbar,\\n      rtlTranslate: rtl\\n    } = swiper;\\n    const {\\n      el\\n    } = scrollbar;\\n    let positionRatio;\\n    positionRatio = (getPointerPosition(e) - elementOffset(el)[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\\n    positionRatio = Math.max(Math.min(positionRatio, 1), 0);\\n    if (rtl) {\\n      positionRatio = 1 - positionRatio;\\n    }\\n    const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\\n    swiper.updateProgress(position);\\n    swiper.setTranslate(position);\\n    swiper.updateActiveIndex();\\n    swiper.updateSlidesClasses();\\n  }\\n  function onDragStart(e) {\\n    const params = swiper.params.scrollbar;\\n    const {\\n      scrollbar,\\n      wrapperEl\\n    } = swiper;\\n    const {\\n      el,\\n      dragEl\\n    } = scrollbar;\\n    isTouched = true;\\n    dragStartPos = e.target === dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;\\n    e.preventDefault();\\n    e.stopPropagation();\\n    wrapperEl.style.transitionDuration = '100ms';\\n    dragEl.style.transitionDuration = '100ms';\\n    setDragPosition(e);\\n    clearTimeout(dragTimeout);\\n    el.style.transitionDuration = '0ms';\\n    if (params.hide) {\\n      el.style.opacity = 1;\\n    }\\n    if (swiper.params.cssMode) {\\n      swiper.wrapperEl.style['scroll-snap-type'] = 'none';\\n    }\\n    emit('scrollbarDragStart', e);\\n  }\\n  function onDragMove(e) {\\n    const {\\n      scrollbar,\\n      wrapperEl\\n    } = swiper;\\n    const {\\n      el,\\n      dragEl\\n    } = scrollbar;\\n    if (!isTouched) return;\\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\\n    setDragPosition(e);\\n    wrapperEl.style.transitionDuration = '0ms';\\n    el.style.transitionDuration = '0ms';\\n    dragEl.style.transitionDuration = '0ms';\\n    emit('scrollbarDragMove', e);\\n  }\\n  function onDragEnd(e) {\\n    const params = swiper.params.scrollbar;\\n    const {\\n      scrollbar,\\n      wrapperEl\\n    } = swiper;\\n    const {\\n      el\\n    } = scrollbar;\\n    if (!isTouched) return;\\n    isTouched = false;\\n    if (swiper.params.cssMode) {\\n      swiper.wrapperEl.style['scroll-snap-type'] = '';\\n      wrapperEl.style.transitionDuration = '';\\n    }\\n    if (params.hide) {\\n      clearTimeout(dragTimeout);\\n      dragTimeout = nextTick(() => {\\n        el.style.opacity = 0;\\n        el.style.transitionDuration = '400ms';\\n      }, 1000);\\n    }\\n    emit('scrollbarDragEnd', e);\\n    if (params.snapOnRelease) {\\n      swiper.slideToClosest();\\n    }\\n  }\\n  function events(method) {\\n    const {\\n      scrollbar,\\n      params\\n    } = swiper;\\n    const el = scrollbar.el;\\n    if (!el) return;\\n    const target = el;\\n    const activeListener = params.passiveListeners ? {\\n      passive: false,\\n      capture: false\\n    } : false;\\n    const passiveListener = params.passiveListeners ? {\\n      passive: true,\\n      capture: false\\n    } : false;\\n    if (!target) return;\\n    const eventMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\\n    target[eventMethod]('pointerdown', onDragStart, activeListener);\\n    document[eventMethod]('pointermove', onDragMove, activeListener);\\n    document[eventMethod]('pointerup', onDragEnd, passiveListener);\\n  }\\n  function enableDraggable() {\\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\\n    events('on');\\n  }\\n  function disableDraggable() {\\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\\n    events('off');\\n  }\\n  function init() {\\n    const {\\n      scrollbar,\\n      el: swiperEl\\n    } = swiper;\\n    swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\\n      el: 'swiper-scrollbar'\\n    });\\n    const params = swiper.params.scrollbar;\\n    if (!params.el) return;\\n    let el;\\n    if (typeof params.el === 'string' && swiper.isElement) {\\n      el = swiper.el.querySelector(params.el);\\n    }\\n    if (!el && typeof params.el === 'string') {\\n      el = document.querySelectorAll(params.el);\\n    } else if (!el) {\\n      el = params.el;\\n    }\\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && el.length > 1 && swiperEl.querySelectorAll(params.el).length === 1) {\\n      el = swiperEl.querySelector(params.el);\\n    }\\n    if (el.length > 0) el = el[0];\\n    el.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\\n    let dragEl;\\n    if (el) {\\n      dragEl = el.querySelector(`.${swiper.params.scrollbar.dragClass}`);\\n      if (!dragEl) {\\n        dragEl = createElement('div', swiper.params.scrollbar.dragClass);\\n        el.append(dragEl);\\n      }\\n    }\\n    Object.assign(scrollbar, {\\n      el,\\n      dragEl\\n    });\\n    if (params.draggable) {\\n      enableDraggable();\\n    }\\n    if (el) {\\n      el.classList[swiper.enabled ? 'remove' : 'add'](swiper.params.scrollbar.lockClass);\\n    }\\n  }\\n  function destroy() {\\n    const params = swiper.params.scrollbar;\\n    const el = swiper.scrollbar.el;\\n    if (el) {\\n      el.classList.remove(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\\n    }\\n    disableDraggable();\\n  }\\n  on('init', () => {\\n    if (swiper.params.scrollbar.enabled === false) {\\n      // eslint-disable-next-line\\n      disable();\\n    } else {\\n      init();\\n      updateSize();\\n      setTranslate();\\n    }\\n  });\\n  on('update resize observerUpdate lock unlock', () => {\\n    updateSize();\\n  });\\n  on('setTranslate', () => {\\n    setTranslate();\\n  });\\n  on('setTransition', (_s, duration) => {\\n    setTransition(duration);\\n  });\\n  on('enable disable', () => {\\n    const {\\n      el\\n    } = swiper.scrollbar;\\n    if (el) {\\n      el.classList[swiper.enabled ? 'remove' : 'add'](swiper.params.scrollbar.lockClass);\\n    }\\n  });\\n  on('destroy', () => {\\n    destroy();\\n  });\\n  const enable = () => {\\n    swiper.el.classList.remove(swiper.params.scrollbar.scrollbarDisabledClass);\\n    if (swiper.scrollbar.el) {\\n      swiper.scrollbar.el.classList.remove(swiper.params.scrollbar.scrollbarDisabledClass);\\n    }\\n    init();\\n    updateSize();\\n    setTranslate();\\n  };\\n  const disable = () => {\\n    swiper.el.classList.add(swiper.params.scrollbar.scrollbarDisabledClass);\\n    if (swiper.scrollbar.el) {\\n      swiper.scrollbar.el.classList.add(swiper.params.scrollbar.scrollbarDisabledClass);\\n    }\\n    destroy();\\n  };\\n  Object.assign(swiper.scrollbar, {\\n    enable,\\n    disable,\\n    updateSize,\\n    setTranslate,\\n    init,\\n    destroy\\n  });\\n}\\n\\nexport { Scrollbar as default };\\n\"],\n  \"mappings\": \"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\",\n  \"names\": []\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100544914,
      "end": 1756100544914,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100544914,
      "end": 1756100544915,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100544915,
      "end": 1756100544915,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100544915,
      "end": 1756100544915,
      "order": "normal"
    }
  ]
}
