{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/selectbutton/selectbutton.esm.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import Ripple from 'primevue/ripple';\nimport { DomHandler, ObjectUtils } from 'primevue/utils';\nimport BaseComponent from 'primevue/basecomponent';\nimport SelectButtonStyle from 'primevue/selectbutton/style';\nimport { resolveDirective, openBlock, createElementBlock, mergeProps, Fragment, renderList, withDirectives, renderSlot, normalizeClass, createElementVNode, toDisplayString } from 'vue';\n\nvar script$1 = {\n  name: 'BaseSelectButton',\n  \"extends\": BaseComponent,\n  props: {\n    modelValue: null,\n    options: Array,\n    optionLabel: null,\n    optionValue: null,\n    optionDisabled: null,\n    multiple: Boolean,\n    unselectable: {\n      type: Boolean,\n      \"default\": true\n    },\n    allowEmpty: {\n      type: Boolean,\n      \"default\": true\n    },\n    invalid: {\n      type: Boolean,\n      \"default\": false\n    },\n    disabled: Boolean,\n    dataKey: null,\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: SelectButtonStyle,\n  provide: function provide() {\n    return {\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar script = {\n  name: 'SelectButton',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:modelValue', 'focus', 'blur', 'change'],\n  data: function data() {\n    return {\n      focusedIndex: 0\n    };\n  },\n  mounted: function mounted() {\n    this.defaultTabIndexes();\n  },\n  methods: {\n    defaultTabIndexes: function defaultTabIndexes() {\n      var opts = DomHandler.find(this.$refs.container, '[data-pc-section=\"button\"]');\n      var firstHighlight = DomHandler.findSingle(this.$refs.container, '[data-p-highlight=\"true\"]');\n      for (var i = 0; i < opts.length; i++) {\n        if (DomHandler.getAttribute(opts[i], 'data-p-highlight') === true && ObjectUtils.equals(opts[i], firstHighlight) || firstHighlight === null && i == 0) {\n          this.focusedIndex = i;\n        }\n      }\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return this.optionLabel ? ObjectUtils.resolveFieldData(option, this.optionLabel) : option;\n    },\n    getOptionValue: function getOptionValue(option) {\n      return this.optionValue ? ObjectUtils.resolveFieldData(option, this.optionValue) : option;\n    },\n    getOptionRenderKey: function getOptionRenderKey(option) {\n      return this.dataKey ? ObjectUtils.resolveFieldData(option, this.dataKey) : this.getOptionLabel(option);\n    },\n    getPTOptions: function getPTOptions(option, key) {\n      return this.ptm(key, {\n        context: {\n          active: this.isSelected(option),\n          disabled: this.isOptionDisabled(option),\n          option: option\n        }\n      });\n    },\n    isOptionDisabled: function isOptionDisabled(option) {\n      return this.optionDisabled ? ObjectUtils.resolveFieldData(option, this.optionDisabled) : false;\n    },\n    onOptionSelect: function onOptionSelect(event, option, index) {\n      var _this = this;\n      if (this.disabled || this.isOptionDisabled(option)) {\n        return;\n      }\n      var selected = this.isSelected(option);\n      if (selected && !(this.unselectable && this.allowEmpty)) {\n        return;\n      }\n      var optionValue = this.getOptionValue(option);\n      var newValue;\n      if (this.multiple) {\n        if (selected) newValue = this.modelValue.filter(function (val) {\n          return !ObjectUtils.equals(val, optionValue, _this.equalityKey);\n        });else newValue = this.modelValue ? [].concat(_toConsumableArray(this.modelValue), [optionValue]) : [optionValue];\n      } else {\n        newValue = selected ? null : optionValue;\n      }\n      this.focusedIndex = index;\n      this.$emit('update:modelValue', newValue);\n      this.$emit('change', {\n        event: event,\n        value: newValue\n      });\n    },\n    isSelected: function isSelected(option) {\n      var selected = false;\n      var optionValue = this.getOptionValue(option);\n      if (this.multiple) {\n        if (this.modelValue) {\n          var _iterator = _createForOfIteratorHelper(this.modelValue),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var val = _step.value;\n              if (ObjectUtils.equals(val, optionValue, this.equalityKey)) {\n                selected = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      } else {\n        selected = ObjectUtils.equals(this.modelValue, optionValue, this.equalityKey);\n      }\n      return selected;\n    },\n    onKeydown: function onKeydown(event, option, index) {\n      switch (event.code) {\n        case 'Space':\n          {\n            this.onOptionSelect(event, option, index);\n            event.preventDefault();\n            break;\n          }\n        case 'ArrowDown':\n        case 'ArrowRight':\n          {\n            this.onArrowRightKey(event.target);\n            event.preventDefault();\n            break;\n          }\n        case 'ArrowUp':\n        case 'ArrowLeft':\n          {\n            this.onArrowLeftKey(event.target);\n            event.preventDefault();\n            break;\n          }\n      }\n    },\n    onArrowRightKey: function onArrowRightKey(target) {\n      var nextEl = this.findNextElement(target);\n      if (nextEl) {\n        this.focusedIndex = ObjectUtils.findIndexInList(nextEl, this.findAllElements());\n        DomHandler.focus(nextEl);\n      }\n    },\n    onArrowLeftKey: function onArrowLeftKey(target) {\n      var prevEl = this.findPrevElement(target);\n      if (prevEl) {\n        this.focusedIndex = ObjectUtils.findIndexInList(prevEl, this.findAllElements());\n        DomHandler.focus(prevEl);\n      }\n    },\n    findAllElements: function findAllElements() {\n      return DomHandler.find(this.$refs.container, '[data-pc-section=\"button\"]');\n    },\n    findNextElement: function findNextElement(target) {\n      if (target.nextElementSibling) {\n        if (DomHandler.getAttribute(target.nextElementSibling, 'data-p-disabled')) {\n          return this.findNextElement(target.nextElementSibling);\n        }\n        return target.nextElementSibling;\n      }\n      return null;\n    },\n    findPrevElement: function findPrevElement(target) {\n      if (target.previousElementSibling) {\n        if (DomHandler.getAttribute(target.previousElementSibling, 'data-p-disabled')) {\n          return this.findPrevElement(target.previousElementSibling);\n        }\n        return target.previousElementSibling;\n      }\n      return null;\n    },\n    onFocus: function onFocus(event) {\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event, option) {\n      if (event.target && event.relatedTarget && event.target.parentElement !== event.relatedTarget.parentElement) {\n        this.defaultTabIndexes();\n      }\n      this.$emit('blur', event, option);\n    },\n    findTabindex: function findTabindex(option, index) {\n      return this.disabled || this.isOptionDisabled(option) || index !== this.focusedIndex ? '-1' : '0';\n    }\n  },\n  computed: {\n    equalityKey: function equalityKey() {\n      return this.optionValue ? null : this.dataKey;\n    }\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\n\nvar _hoisted_1 = [\"aria-labelledby\"];\nvar _hoisted_2 = [\"tabindex\", \"aria-label\", \"role\", \"aria-checked\", \"aria-disabled\", \"onClick\", \"onKeydown\", \"onBlur\", \"data-p-highlight\", \"data-p-disabled\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"container\",\n    \"class\": _ctx.cx('root'),\n    role: \"group\",\n    \"aria-labelledby\": _ctx.ariaLabelledby\n  }, _ctx.ptmi('root')), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, function (option, i) {\n    return withDirectives((openBlock(), createElementBlock(\"div\", mergeProps({\n      key: $options.getOptionRenderKey(option),\n      tabindex: $options.findTabindex(option, i),\n      \"aria-label\": $options.getOptionLabel(option),\n      role: _ctx.multiple ? 'checkbox' : 'radio',\n      \"aria-checked\": $options.isSelected(option),\n      \"aria-disabled\": $options.isOptionDisabled(option),\n      \"class\": _ctx.cx('button', {\n        option: option\n      }),\n      onClick: function onClick($event) {\n        return $options.onOptionSelect($event, option, i);\n      },\n      onKeydown: function onKeydown($event) {\n        return $options.onKeydown($event, option, i);\n      },\n      onFocus: _cache[0] || (_cache[0] = function ($event) {\n        return $options.onFocus($event);\n      }),\n      onBlur: function onBlur($event) {\n        return $options.onBlur($event, option);\n      }\n    }, $options.getPTOptions(option, 'button'), {\n      \"data-p-highlight\": $options.isSelected(option),\n      \"data-p-disabled\": $options.isOptionDisabled(option)\n    }), [renderSlot(_ctx.$slots, \"option\", {\n      option: option,\n      index: i,\n      \"class\": normalizeClass(_ctx.cx('label'))\n    }, function () {\n      return [createElementVNode(\"span\", mergeProps({\n        \"class\": _ctx.cx('label')\n      }, $options.getPTOptions(option, 'label')), toDisplayString($options.getOptionLabel(option)), 17)];\n    })], 16, _hoisted_2)), [[_directive_ripple]]);\n  }), 128))], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n",
      "start": 1756100540817,
      "end": 1756100540851,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100540851,
      "end": 1756100540851,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100540851,
      "end": 1756100540852,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100540852,
      "end": 1756100540852,
      "order": "normal"
    }
  ]
}
