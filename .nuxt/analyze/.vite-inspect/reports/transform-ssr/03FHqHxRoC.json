{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/vant@4.9.16_vue@3.5.11/node_modules/vant/es/rate/Rate.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { computed, defineComponent, ref, createVNode as _createVNode } from \"vue\";\nimport { addUnit, truthProp, numericProp, preventDefault, makeStringProp, makeNumberProp, makeNumericProp, createNamespace } from \"../utils/index.mjs\";\nimport { useRect, useCustomFieldValue, useEventListener } from \"@vant/use\";\nimport { useRefs } from \"../composables/use-refs.mjs\";\nimport { useTouch } from \"../composables/use-touch.mjs\";\nimport { Icon } from \"../icon/index.mjs\";\nconst [name, bem] = createNamespace(\"rate\");\nfunction getRateStatus(value, index, allowHalf, readonly) {\n  if (value >= index) {\n    return {\n      status: \"full\",\n      value: 1\n    };\n  }\n  if (value + 0.5 >= index && allowHalf && !readonly) {\n    return {\n      status: \"half\",\n      value: 0.5\n    };\n  }\n  if (value + 1 >= index && allowHalf && readonly) {\n    const cardinal = 10 ** 10;\n    return {\n      status: \"half\",\n      value: Math.round((value - index + 1) * cardinal) / cardinal\n    };\n  }\n  return {\n    status: \"void\",\n    value: 0\n  };\n}\nconst rateProps = {\n  size: numericProp,\n  icon: makeStringProp(\"star\"),\n  color: String,\n  count: makeNumericProp(5),\n  gutter: numericProp,\n  clearable: Boolean,\n  readonly: Boolean,\n  disabled: Boolean,\n  voidIcon: makeStringProp(\"star-o\"),\n  allowHalf: Boolean,\n  voidColor: String,\n  touchable: truthProp,\n  iconPrefix: String,\n  modelValue: makeNumberProp(0),\n  disabledColor: String\n};\nvar stdin_default = defineComponent({\n  name,\n  props: rateProps,\n  emits: [\"change\", \"update:modelValue\"],\n  setup(props, {\n    emit\n  }) {\n    const touch = useTouch();\n    const [itemRefs, setItemRefs] = useRefs();\n    const groupRef = ref();\n    const unselectable = computed(() => props.readonly || props.disabled);\n    const untouchable = computed(() => unselectable.value || !props.touchable);\n    const list = computed(() => Array(+props.count).fill(\"\").map((_, i) => getRateStatus(props.modelValue, i + 1, props.allowHalf, props.readonly)));\n    let ranges;\n    let groupRefRect;\n    let minRectTop = Number.MAX_SAFE_INTEGER;\n    let maxRectTop = Number.MIN_SAFE_INTEGER;\n    const updateRanges = () => {\n      groupRefRect = useRect(groupRef);\n      const rects = itemRefs.value.map(useRect);\n      ranges = [];\n      rects.forEach((rect, index) => {\n        minRectTop = Math.min(rect.top, minRectTop);\n        maxRectTop = Math.max(rect.top, maxRectTop);\n        if (props.allowHalf) {\n          ranges.push({\n            score: index + 0.5,\n            left: rect.left,\n            top: rect.top,\n            height: rect.height\n          }, {\n            score: index + 1,\n            left: rect.left + rect.width / 2,\n            top: rect.top,\n            height: rect.height\n          });\n        } else {\n          ranges.push({\n            score: index + 1,\n            left: rect.left,\n            top: rect.top,\n            height: rect.height\n          });\n        }\n      });\n    };\n    const getScoreByPosition = (x, y) => {\n      for (let i = ranges.length - 1; i > 0; i--) {\n        if (y >= groupRefRect.top && y <= groupRefRect.bottom) {\n          if (x > ranges[i].left && y >= ranges[i].top && y <= ranges[i].top + ranges[i].height) {\n            return ranges[i].score;\n          }\n        } else {\n          const curTop = y < groupRefRect.top ? minRectTop : maxRectTop;\n          if (x > ranges[i].left && ranges[i].top === curTop) {\n            return ranges[i].score;\n          }\n        }\n      }\n      return props.allowHalf ? 0.5 : 1;\n    };\n    const select = (value) => {\n      if (unselectable.value || value === props.modelValue) return;\n      emit(\"update:modelValue\", value);\n      emit(\"change\", value);\n    };\n    const onTouchStart = (event) => {\n      if (untouchable.value) {\n        return;\n      }\n      touch.start(event);\n      updateRanges();\n    };\n    const onTouchMove = (event) => {\n      if (untouchable.value) {\n        return;\n      }\n      touch.move(event);\n      if (touch.isHorizontal() && !touch.isTap.value) {\n        const {\n          clientX,\n          clientY\n        } = event.touches[0];\n        preventDefault(event);\n        select(getScoreByPosition(clientX, clientY));\n      }\n    };\n    const renderStar = (item, index) => {\n      const {\n        icon,\n        size,\n        color,\n        count,\n        gutter,\n        voidIcon,\n        disabled,\n        voidColor,\n        allowHalf,\n        iconPrefix,\n        disabledColor\n      } = props;\n      const score = index + 1;\n      const isFull = item.status === \"full\";\n      const isVoid = item.status === \"void\";\n      const renderHalf = allowHalf && item.value > 0 && item.value < 1;\n      let style;\n      if (gutter && score !== +count) {\n        style = {\n          paddingRight: addUnit(gutter)\n        };\n      }\n      const onClickItem = (event) => {\n        updateRanges();\n        let value = allowHalf ? getScoreByPosition(event.clientX, event.clientY) : score;\n        if (props.clearable && touch.isTap.value && value === props.modelValue) {\n          value = 0;\n        }\n        select(value);\n      };\n      return _createVNode(\"div\", {\n        \"key\": index,\n        \"ref\": setItemRefs(index),\n        \"role\": \"radio\",\n        \"style\": style,\n        \"class\": bem(\"item\"),\n        \"tabindex\": disabled ? void 0 : 0,\n        \"aria-setsize\": count,\n        \"aria-posinset\": score,\n        \"aria-checked\": !isVoid,\n        \"onClick\": onClickItem\n      }, [_createVNode(Icon, {\n        \"size\": size,\n        \"name\": isFull ? icon : voidIcon,\n        \"class\": bem(\"icon\", {\n          disabled,\n          full: isFull\n        }),\n        \"color\": disabled ? disabledColor : isFull ? color : voidColor,\n        \"classPrefix\": iconPrefix\n      }, null), renderHalf && _createVNode(Icon, {\n        \"size\": size,\n        \"style\": {\n          width: item.value + \"em\"\n        },\n        \"name\": isVoid ? voidIcon : icon,\n        \"class\": bem(\"icon\", [\"half\", {\n          disabled,\n          full: !isVoid\n        }]),\n        \"color\": disabled ? disabledColor : isVoid ? voidColor : color,\n        \"classPrefix\": iconPrefix\n      }, null)]);\n    };\n    useCustomFieldValue(() => props.modelValue);\n    useEventListener(\"touchmove\", onTouchMove, {\n      target: groupRef\n    });\n    return () => _createVNode(\"div\", {\n      \"ref\": groupRef,\n      \"role\": \"radiogroup\",\n      \"class\": bem({\n        readonly: props.readonly,\n        disabled: props.disabled\n      }),\n      \"tabindex\": props.disabled ? void 0 : 0,\n      \"aria-disabled\": props.disabled,\n      \"aria-readonly\": props.readonly,\n      \"onTouchstartPassive\": onTouchStart\n    }, [list.value.map(renderStar)]);\n  }\n});\nexport {\n  stdin_default as default,\n  rateProps\n};\n",
      "start": 1756100544673,
      "end": 1756100544695,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100544695,
      "end": 1756100544695,
      "order": "normal"
    }
  ]
}
