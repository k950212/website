{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/splitter/splitter.esm.js?nuxt_component=async&nuxt_component_name=Splitter&nuxt_component_export=default",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { DomHandler, ObjectUtils } from 'primevue/utils';\nimport BaseComponent from 'primevue/basecomponent';\nimport SplitterStyle from 'primevue/splitter/style';\nimport { openBlock, createElementBlock, mergeProps, Fragment, renderList, createBlock, resolveDynamicComponent, createElementVNode, createCommentVNode } from 'vue';\n\nvar script$1 = {\n  name: 'BaseSplitter',\n  \"extends\": BaseComponent,\n  props: {\n    layout: {\n      type: String,\n      \"default\": 'horizontal'\n    },\n    gutterSize: {\n      type: Number,\n      \"default\": 4\n    },\n    stateKey: {\n      type: String,\n      \"default\": null\n    },\n    stateStorage: {\n      type: String,\n      \"default\": 'session'\n    },\n    step: {\n      type: Number,\n      \"default\": 5\n    }\n  },\n  style: SplitterStyle,\n  provide: function provide() {\n    return {\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar script = {\n  name: 'Splitter',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['resizestart', 'resizeend', 'resize'],\n  dragging: false,\n  mouseMoveListener: null,\n  mouseUpListener: null,\n  touchMoveListener: null,\n  touchEndListener: null,\n  size: null,\n  gutterElement: null,\n  startPos: null,\n  prevPanelElement: null,\n  nextPanelElement: null,\n  nextPanelSize: null,\n  prevPanelSize: null,\n  panelSizes: null,\n  prevPanelIndex: null,\n  timer: null,\n  data: function data() {\n    return {\n      prevSize: null\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    if (this.panels && this.panels.length) {\n      var initialized = false;\n      if (this.isStateful()) {\n        initialized = this.restoreState();\n      }\n      if (!initialized) {\n        var children = _toConsumableArray(this.$el.children).filter(function (child) {\n          return child.getAttribute('data-pc-name') === 'splitterpanel';\n        });\n        var _panelSizes = [];\n        this.panels.map(function (panel, i) {\n          var panelInitialSize = panel.props && panel.props.size ? panel.props.size : null;\n          var panelSize = panelInitialSize || 100 / _this.panels.length;\n          _panelSizes[i] = panelSize;\n          children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + (_this.panels.length - 1) * _this.gutterSize + 'px)';\n        });\n        this.panelSizes = _panelSizes;\n        this.prevSize = parseFloat(_panelSizes[0]).toFixed(4);\n      }\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.clear();\n    this.unbindMouseListeners();\n  },\n  methods: {\n    isSplitterPanel: function isSplitterPanel(child) {\n      return child.type.name === 'SplitterPanel';\n    },\n    onResizeStart: function onResizeStart(event, index, isKeyDown) {\n      this.gutterElement = event.currentTarget || event.target.parentElement;\n      this.size = this.horizontal ? DomHandler.getWidth(this.$el) : DomHandler.getHeight(this.$el);\n      if (!isKeyDown) {\n        this.dragging = true;\n        this.startPos = this.layout === 'horizontal' ? event.pageX || event.changedTouches[0].pageX : event.pageY || event.changedTouches[0].pageY;\n      }\n      this.prevPanelElement = this.gutterElement.previousElementSibling;\n      this.nextPanelElement = this.gutterElement.nextElementSibling;\n      if (isKeyDown) {\n        this.prevPanelSize = this.horizontal ? DomHandler.getOuterWidth(this.prevPanelElement, true) : DomHandler.getOuterHeight(this.prevPanelElement, true);\n        this.nextPanelSize = this.horizontal ? DomHandler.getOuterWidth(this.nextPanelElement, true) : DomHandler.getOuterHeight(this.nextPanelElement, true);\n      } else {\n        this.prevPanelSize = 100 * (this.horizontal ? DomHandler.getOuterWidth(this.prevPanelElement, true) : DomHandler.getOuterHeight(this.prevPanelElement, true)) / this.size;\n        this.nextPanelSize = 100 * (this.horizontal ? DomHandler.getOuterWidth(this.nextPanelElement, true) : DomHandler.getOuterHeight(this.nextPanelElement, true)) / this.size;\n      }\n      this.prevPanelIndex = index;\n      this.$emit('resizestart', {\n        originalEvent: event,\n        sizes: this.panelSizes\n      });\n      this.$refs.gutter[index].setAttribute('data-p-gutter-resizing', true);\n      this.$el.setAttribute('data-p-resizing', true);\n    },\n    onResize: function onResize(event, step, isKeyDown) {\n      var newPos, newPrevPanelSize, newNextPanelSize;\n      if (isKeyDown) {\n        if (this.horizontal) {\n          newPrevPanelSize = 100 * (this.prevPanelSize + step) / this.size;\n          newNextPanelSize = 100 * (this.nextPanelSize - step) / this.size;\n        } else {\n          newPrevPanelSize = 100 * (this.prevPanelSize - step) / this.size;\n          newNextPanelSize = 100 * (this.nextPanelSize + step) / this.size;\n        }\n      } else {\n        if (this.horizontal) newPos = event.pageX * 100 / this.size - this.startPos * 100 / this.size;else newPos = event.pageY * 100 / this.size - this.startPos * 100 / this.size;\n        newPrevPanelSize = this.prevPanelSize + newPos;\n        newNextPanelSize = this.nextPanelSize - newPos;\n      }\n      if (this.validateResize(newPrevPanelSize, newNextPanelSize)) {\n        this.prevPanelElement.style.flexBasis = 'calc(' + newPrevPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n        this.nextPanelElement.style.flexBasis = 'calc(' + newNextPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n        this.panelSizes[this.prevPanelIndex] = newPrevPanelSize;\n        this.panelSizes[this.prevPanelIndex + 1] = newNextPanelSize;\n        this.prevSize = parseFloat(newPrevPanelSize).toFixed(4);\n      }\n      this.$emit('resize', {\n        originalEvent: event,\n        sizes: this.panelSizes\n      });\n    },\n    onResizeEnd: function onResizeEnd(event) {\n      if (this.isStateful()) {\n        this.saveState();\n      }\n      this.$emit('resizeend', {\n        originalEvent: event,\n        sizes: this.panelSizes\n      });\n      this.$refs.gutter.forEach(function (gutter) {\n        return gutter.setAttribute('data-p-gutter-resizing', false);\n      });\n      this.$el.setAttribute('data-p-resizing', false);\n      this.clear();\n    },\n    repeat: function repeat(event, index, step) {\n      this.onResizeStart(event, index, true);\n      this.onResize(event, step, true);\n    },\n    setTimer: function setTimer(event, index, step) {\n      var _this2 = this;\n      if (!this.timer) {\n        this.timer = setInterval(function () {\n          _this2.repeat(event, index, step);\n        }, 40);\n      }\n    },\n    clearTimer: function clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n    },\n    onGutterKeyUp: function onGutterKeyUp() {\n      this.clearTimer();\n      this.onResizeEnd();\n    },\n    onGutterKeyDown: function onGutterKeyDown(event, index) {\n      switch (event.code) {\n        case 'ArrowLeft':\n          {\n            if (this.layout === 'horizontal') {\n              this.setTimer(event, index, this.step * -1);\n            }\n            event.preventDefault();\n            break;\n          }\n        case 'ArrowRight':\n          {\n            if (this.layout === 'horizontal') {\n              this.setTimer(event, index, this.step);\n            }\n            event.preventDefault();\n            break;\n          }\n        case 'ArrowDown':\n          {\n            if (this.layout === 'vertical') {\n              this.setTimer(event, index, this.step * -1);\n            }\n            event.preventDefault();\n            break;\n          }\n        case 'ArrowUp':\n          {\n            if (this.layout === 'vertical') {\n              this.setTimer(event, index, this.step);\n            }\n            event.preventDefault();\n            break;\n          }\n      }\n    },\n    onGutterMouseDown: function onGutterMouseDown(event, index) {\n      this.onResizeStart(event, index);\n      this.bindMouseListeners();\n    },\n    onGutterTouchStart: function onGutterTouchStart(event, index) {\n      this.onResizeStart(event, index);\n      this.bindTouchListeners();\n      event.preventDefault();\n    },\n    onGutterTouchMove: function onGutterTouchMove(event) {\n      this.onResize(event);\n      event.preventDefault();\n    },\n    onGutterTouchEnd: function onGutterTouchEnd(event) {\n      this.onResizeEnd(event);\n      this.unbindTouchListeners();\n      event.preventDefault();\n    },\n    bindMouseListeners: function bindMouseListeners() {\n      var _this3 = this;\n      if (!this.mouseMoveListener) {\n        this.mouseMoveListener = function (event) {\n          return _this3.onResize(event);\n        };\n        document.addEventListener('mousemove', this.mouseMoveListener);\n      }\n      if (!this.mouseUpListener) {\n        this.mouseUpListener = function (event) {\n          _this3.onResizeEnd(event);\n          _this3.unbindMouseListeners();\n        };\n        document.addEventListener('mouseup', this.mouseUpListener);\n      }\n    },\n    bindTouchListeners: function bindTouchListeners() {\n      var _this4 = this;\n      if (!this.touchMoveListener) {\n        this.touchMoveListener = function (event) {\n          return _this4.onResize(event.changedTouches[0]);\n        };\n        document.addEventListener('touchmove', this.touchMoveListener);\n      }\n      if (!this.touchEndListener) {\n        this.touchEndListener = function (event) {\n          _this4.resizeEnd(event);\n          _this4.unbindTouchListeners();\n        };\n        document.addEventListener('touchend', this.touchEndListener);\n      }\n    },\n    validateResize: function validateResize(newPrevPanelSize, newNextPanelSize) {\n      if (newPrevPanelSize > 100 || newPrevPanelSize < 0) return false;\n      if (newNextPanelSize > 100 || newNextPanelSize < 0) return false;\n      var prevPanelMinSize = ObjectUtils.getVNodeProp(this.panels[this.prevPanelIndex], 'minSize');\n      if (this.panels[this.prevPanelIndex].props && prevPanelMinSize && prevPanelMinSize > newPrevPanelSize) {\n        return false;\n      }\n      var newPanelMinSize = ObjectUtils.getVNodeProp(this.panels[this.prevPanelIndex + 1], 'minSize');\n      if (this.panels[this.prevPanelIndex + 1].props && newPanelMinSize && newPanelMinSize > newNextPanelSize) {\n        return false;\n      }\n      return true;\n    },\n    unbindMouseListeners: function unbindMouseListeners() {\n      if (this.mouseMoveListener) {\n        document.removeEventListener('mousemove', this.mouseMoveListener);\n        this.mouseMoveListener = null;\n      }\n      if (this.mouseUpListener) {\n        document.removeEventListener('mouseup', this.mouseUpListener);\n        this.mouseUpListener = null;\n      }\n    },\n    unbindTouchListeners: function unbindTouchListeners() {\n      if (this.touchMoveListener) {\n        document.removeEventListener('touchmove', this.touchMoveListener);\n        this.touchMoveListener = null;\n      }\n      if (this.touchEndListener) {\n        document.removeEventListener('touchend', this.touchEndListener);\n        this.touchEndListener = null;\n      }\n    },\n    clear: function clear() {\n      this.dragging = false;\n      this.size = null;\n      this.startPos = null;\n      this.prevPanelElement = null;\n      this.nextPanelElement = null;\n      this.prevPanelSize = null;\n      this.nextPanelSize = null;\n      this.gutterElement = null;\n      this.prevPanelIndex = null;\n    },\n    isStateful: function isStateful() {\n      return this.stateKey != null;\n    },\n    getStorage: function getStorage() {\n      switch (this.stateStorage) {\n        case 'local':\n          return window.localStorage;\n        case 'session':\n          return window.sessionStorage;\n        default:\n          throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n      }\n    },\n    saveState: function saveState() {\n      if (ObjectUtils.isArray(this.panelSizes)) {\n        this.getStorage().setItem(this.stateKey, JSON.stringify(this.panelSizes));\n      }\n    },\n    restoreState: function restoreState() {\n      var _this5 = this;\n      var storage = this.getStorage();\n      var stateString = storage.getItem(this.stateKey);\n      if (stateString) {\n        this.panelSizes = JSON.parse(stateString);\n        var children = _toConsumableArray(this.$el.children).filter(function (child) {\n          return child.getAttribute('data-pc-name') === 'splitterpanel';\n        });\n        children.forEach(function (child, i) {\n          child.style.flexBasis = 'calc(' + _this5.panelSizes[i] + '% - ' + (_this5.panels.length - 1) * _this5.gutterSize + 'px)';\n        });\n        return true;\n      }\n      return false;\n    }\n  },\n  computed: {\n    panels: function panels() {\n      var _this6 = this;\n      var panels = [];\n      this.$slots[\"default\"]().forEach(function (child) {\n        if (_this6.isSplitterPanel(child)) {\n          panels.push(child);\n        } else if (child.children instanceof Array) {\n          child.children.forEach(function (nestedChild) {\n            if (_this6.isSplitterPanel(nestedChild)) {\n              panels.push(nestedChild);\n            }\n          });\n        }\n      });\n      return panels;\n    },\n    gutterStyle: function gutterStyle() {\n      if (this.horizontal) return {\n        width: this.gutterSize + 'px'\n      };else return {\n        height: this.gutterSize + 'px'\n      };\n    },\n    horizontal: function horizontal() {\n      return this.layout === 'horizontal';\n    },\n    getPTOptions: function getPTOptions() {\n      var _this$$parentInstance;\n      return {\n        context: {\n          nested: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.nestedState\n        }\n      };\n    }\n  }\n};\n\nvar _hoisted_1 = [\"onMousedown\", \"onTouchstart\", \"onTouchmove\", \"onTouchend\"];\nvar _hoisted_2 = [\"aria-orientation\", \"aria-valuenow\", \"onKeydown\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    style: _ctx.sx('root'),\n    \"data-p-resizing\": false\n  }, _ctx.ptmi('root', $options.getPTOptions)), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.panels, function (panel, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: i\n    }, [(openBlock(), createBlock(resolveDynamicComponent(panel), {\n      tabindex: \"-1\"\n    })), i !== $options.panels.length - 1 ? (openBlock(), createElementBlock(\"div\", mergeProps({\n      key: 0,\n      ref_for: true,\n      ref: \"gutter\",\n      \"class\": _ctx.cx('gutter'),\n      role: \"separator\",\n      tabindex: \"-1\",\n      onMousedown: function onMousedown($event) {\n        return $options.onGutterMouseDown($event, i);\n      },\n      onTouchstart: function onTouchstart($event) {\n        return $options.onGutterTouchStart($event, i);\n      },\n      onTouchmove: function onTouchmove($event) {\n        return $options.onGutterTouchMove($event, i);\n      },\n      onTouchend: function onTouchend($event) {\n        return $options.onGutterTouchEnd($event, i);\n      },\n      \"data-p-gutter-resizing\": false\n    }, _ctx.ptm('gutter')), [createElementVNode(\"div\", mergeProps({\n      \"class\": _ctx.cx('gutterHandler'),\n      tabindex: \"0\",\n      style: [$options.gutterStyle],\n      \"aria-orientation\": _ctx.layout,\n      \"aria-valuenow\": $data.prevSize,\n      onKeyup: _cache[0] || (_cache[0] = function () {\n        return $options.onGutterKeyUp && $options.onGutterKeyUp.apply($options, arguments);\n      }),\n      onKeydown: function onKeydown($event) {\n        return $options.onGutterKeyDown($event, i);\n      }\n    }, _ctx.ptm('gutterHandler')), null, 16, _hoisted_2)], 16, _hoisted_1)) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n",
      "start": 1756100540225,
      "end": 1756100540241,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "result": "import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => import(\"/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/splitter/splitter.esm.js\").then(r => r[\"default\"] || r.default || r))",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "replace",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100540241,
      "end": 1756100540241,
      "order": "normal"
    }
  ]
}
