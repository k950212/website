{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/vant@4.9.16_vue@3.5.11/node_modules/vant/es/dropdown-item/DropdownItem.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { reactive, Teleport, defineComponent, ref, createVNode as _createVNode, vShow as _vShow, mergeProps as _mergeProps, withDirectives as _withDirectives } from \"vue\";\nimport { truthProp, unknownProp, getZIndexStyle, createNamespace, makeArrayProp, getContainingBlock } from \"../utils/index.mjs\";\nimport { DROPDOWN_KEY } from \"../dropdown-menu/DropdownMenu.mjs\";\nimport { useParent, useRect } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { Cell } from \"../cell/index.mjs\";\nimport { Icon } from \"../icon/index.mjs\";\nimport { Popup } from \"../popup/index.mjs\";\nconst [name, bem] = createNamespace(\"dropdown-item\");\nconst dropdownItemProps = {\n  title: String,\n  options: makeArrayProp(),\n  disabled: Boolean,\n  teleport: [String, Object],\n  lazyRender: truthProp,\n  modelValue: unknownProp,\n  titleClass: unknownProp\n};\nvar stdin_default = defineComponent({\n  name,\n  inheritAttrs: false,\n  props: dropdownItemProps,\n  emits: [\"open\", \"opened\", \"close\", \"closed\", \"change\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots,\n    attrs\n  }) {\n    const state = reactive({\n      showPopup: false,\n      transition: true,\n      showWrapper: false\n    });\n    const wrapperRef = ref();\n    const {\n      parent,\n      index\n    } = useParent(DROPDOWN_KEY);\n    if (!parent) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.error(\"[Vant] <DropdownItem> must be a child component of <DropdownMenu>.\");\n      }\n      return;\n    }\n    const getEmitter = (name2) => () => emit(name2);\n    const onOpen = getEmitter(\"open\");\n    const onClose = getEmitter(\"close\");\n    const onOpened = getEmitter(\"opened\");\n    const onClosed = () => {\n      state.showWrapper = false;\n      emit(\"closed\");\n    };\n    const onClickWrapper = (event) => {\n      if (props.teleport) {\n        event.stopPropagation();\n      }\n    };\n    const toggle = (show = !state.showPopup, options = {}) => {\n      if (show === state.showPopup) {\n        return;\n      }\n      state.showPopup = show;\n      state.transition = !options.immediate;\n      if (show) {\n        parent.updateOffset();\n        state.showWrapper = true;\n      }\n    };\n    const renderTitle = () => {\n      if (slots.title) {\n        return slots.title();\n      }\n      if (props.title) {\n        return props.title;\n      }\n      const match = props.options.find((option) => option.value === props.modelValue);\n      return match ? match.text : \"\";\n    };\n    const renderOption = (option) => {\n      const {\n        activeColor\n      } = parent.props;\n      const {\n        disabled\n      } = option;\n      const active = option.value === props.modelValue;\n      const onClick = () => {\n        if (disabled) {\n          return;\n        }\n        state.showPopup = false;\n        if (option.value !== props.modelValue) {\n          emit(\"update:modelValue\", option.value);\n          emit(\"change\", option.value);\n        }\n      };\n      const renderIcon = () => {\n        if (active) {\n          return _createVNode(Icon, {\n            \"class\": bem(\"icon\"),\n            \"color\": disabled ? void 0 : activeColor,\n            \"name\": \"success\"\n          }, null);\n        }\n      };\n      return _createVNode(Cell, {\n        \"role\": \"menuitem\",\n        \"key\": String(option.value),\n        \"icon\": option.icon,\n        \"title\": option.text,\n        \"class\": bem(\"option\", {\n          active,\n          disabled\n        }),\n        \"style\": {\n          color: active ? activeColor : \"\"\n        },\n        \"tabindex\": active ? 0 : -1,\n        \"clickable\": !disabled,\n        \"onClick\": onClick\n      }, {\n        value: renderIcon\n      });\n    };\n    const renderContent = () => {\n      const {\n        offset\n      } = parent;\n      const {\n        autoLocate,\n        zIndex,\n        overlay,\n        duration,\n        direction,\n        closeOnClickOverlay\n      } = parent.props;\n      const style = getZIndexStyle(zIndex);\n      let offsetValue = offset.value;\n      if (autoLocate && wrapperRef.value) {\n        const offsetParent = getContainingBlock(wrapperRef.value);\n        if (offsetParent) {\n          offsetValue -= useRect(offsetParent).top;\n        }\n      }\n      if (direction === \"down\") {\n        style.top = `${offsetValue}px`;\n      } else {\n        style.bottom = `${offsetValue}px`;\n      }\n      return _withDirectives(_createVNode(\"div\", _mergeProps({\n        \"ref\": wrapperRef,\n        \"style\": style,\n        \"class\": bem([direction]),\n        \"onClick\": onClickWrapper\n      }, attrs), [_createVNode(Popup, {\n        \"show\": state.showPopup,\n        \"onUpdate:show\": ($event) => state.showPopup = $event,\n        \"role\": \"menu\",\n        \"class\": bem(\"content\"),\n        \"overlay\": overlay,\n        \"position\": direction === \"down\" ? \"top\" : \"bottom\",\n        \"duration\": state.transition ? duration : 0,\n        \"lazyRender\": props.lazyRender,\n        \"overlayStyle\": {\n          position: \"absolute\"\n        },\n        \"aria-labelledby\": `${parent.id}-${index.value}`,\n        \"data-allow-mismatch\": \"attribute\",\n        \"closeOnClickOverlay\": closeOnClickOverlay,\n        \"onOpen\": onOpen,\n        \"onClose\": onClose,\n        \"onOpened\": onOpened,\n        \"onClosed\": onClosed\n      }, {\n        default: () => {\n          var _a;\n          return [props.options.map(renderOption), (_a = slots.default) == null ? void 0 : _a.call(slots)];\n        }\n      })]), [[_vShow, state.showWrapper]]);\n    };\n    useExpose({\n      state,\n      toggle,\n      renderTitle\n    });\n    return () => {\n      if (props.teleport) {\n        return _createVNode(Teleport, {\n          \"to\": props.teleport\n        }, {\n          default: () => [renderContent()]\n        });\n      }\n      return renderContent();\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  dropdownItemProps\n};\n",
      "start": 1756100533398,
      "end": 1756100533416,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100533416,
      "end": 1756100533416,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { reactive, Teleport, defineComponent, ref, createVNode as _createVNode, vShow as _vShow, mergeProps as _mergeProps, withDirectives as _withDirectives } from \"vue\";\nimport { truthProp, unknownProp, getZIndexStyle, createNamespace, makeArrayProp, getContainingBlock } from \"../utils/index.mjs\";\nimport { DROPDOWN_KEY } from \"../dropdown-menu/DropdownMenu.mjs\";\nimport { useParent, useRect } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { Cell } from \"../cell/index.mjs\";\nimport { Icon } from \"../icon/index.mjs\";\nimport { Popup } from \"../popup/index.mjs\";\nconst [name, bem] = createNamespace(\"dropdown-item\");\nconst dropdownItemProps = {\n  title: String,\n  options: makeArrayProp(),\n  disabled: Boolean,\n  teleport: [String, Object],\n  lazyRender: truthProp,\n  modelValue: unknownProp,\n  titleClass: unknownProp\n};\nvar stdin_default = defineComponent({\n  name,\n  inheritAttrs: false,\n  props: dropdownItemProps,\n  emits: [\"open\", \"opened\", \"close\", \"closed\", \"change\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots,\n    attrs\n  }) {\n    const state = reactive({\n      showPopup: false,\n      transition: true,\n      showWrapper: false\n    });\n    const wrapperRef = ref();\n    const {\n      parent,\n      index\n    } = useParent(DROPDOWN_KEY);\n    if (!parent) {\n      if (false) {\n        console.error(\"[Vant] <DropdownItem> must be a child component of <DropdownMenu>.\");\n      }\n      return;\n    }\n    const getEmitter = (name2) => () => emit(name2);\n    const onOpen = getEmitter(\"open\");\n    const onClose = getEmitter(\"close\");\n    const onOpened = getEmitter(\"opened\");\n    const onClosed = () => {\n      state.showWrapper = false;\n      emit(\"closed\");\n    };\n    const onClickWrapper = (event) => {\n      if (props.teleport) {\n        event.stopPropagation();\n      }\n    };\n    const toggle = (show = !state.showPopup, options = {}) => {\n      if (show === state.showPopup) {\n        return;\n      }\n      state.showPopup = show;\n      state.transition = !options.immediate;\n      if (show) {\n        parent.updateOffset();\n        state.showWrapper = true;\n      }\n    };\n    const renderTitle = () => {\n      if (slots.title) {\n        return slots.title();\n      }\n      if (props.title) {\n        return props.title;\n      }\n      const match = props.options.find((option) => option.value === props.modelValue);\n      return match ? match.text : \"\";\n    };\n    const renderOption = (option) => {\n      const {\n        activeColor\n      } = parent.props;\n      const {\n        disabled\n      } = option;\n      const active = option.value === props.modelValue;\n      const onClick = () => {\n        if (disabled) {\n          return;\n        }\n        state.showPopup = false;\n        if (option.value !== props.modelValue) {\n          emit(\"update:modelValue\", option.value);\n          emit(\"change\", option.value);\n        }\n      };\n      const renderIcon = () => {\n        if (active) {\n          return _createVNode(Icon, {\n            \"class\": bem(\"icon\"),\n            \"color\": disabled ? void 0 : activeColor,\n            \"name\": \"success\"\n          }, null);\n        }\n      };\n      return _createVNode(Cell, {\n        \"role\": \"menuitem\",\n        \"key\": String(option.value),\n        \"icon\": option.icon,\n        \"title\": option.text,\n        \"class\": bem(\"option\", {\n          active,\n          disabled\n        }),\n        \"style\": {\n          color: active ? activeColor : \"\"\n        },\n        \"tabindex\": active ? 0 : -1,\n        \"clickable\": !disabled,\n        \"onClick\": onClick\n      }, {\n        value: renderIcon\n      });\n    };\n    const renderContent = () => {\n      const {\n        offset\n      } = parent;\n      const {\n        autoLocate,\n        zIndex,\n        overlay,\n        duration,\n        direction,\n        closeOnClickOverlay\n      } = parent.props;\n      const style = getZIndexStyle(zIndex);\n      let offsetValue = offset.value;\n      if (autoLocate && wrapperRef.value) {\n        const offsetParent = getContainingBlock(wrapperRef.value);\n        if (offsetParent) {\n          offsetValue -= useRect(offsetParent).top;\n        }\n      }\n      if (direction === \"down\") {\n        style.top = `${offsetValue}px`;\n      } else {\n        style.bottom = `${offsetValue}px`;\n      }\n      return _withDirectives(_createVNode(\"div\", _mergeProps({\n        \"ref\": wrapperRef,\n        \"style\": style,\n        \"class\": bem([direction]),\n        \"onClick\": onClickWrapper\n      }, attrs), [_createVNode(Popup, {\n        \"show\": state.showPopup,\n        \"onUpdate:show\": ($event) => state.showPopup = $event,\n        \"role\": \"menu\",\n        \"class\": bem(\"content\"),\n        \"overlay\": overlay,\n        \"position\": direction === \"down\" ? \"top\" : \"bottom\",\n        \"duration\": state.transition ? duration : 0,\n        \"lazyRender\": props.lazyRender,\n        \"overlayStyle\": {\n          position: \"absolute\"\n        },\n        \"aria-labelledby\": `${parent.id}-${index.value}`,\n        \"data-allow-mismatch\": \"attribute\",\n        \"closeOnClickOverlay\": closeOnClickOverlay,\n        \"onOpen\": onOpen,\n        \"onClose\": onClose,\n        \"onOpened\": onOpened,\n        \"onClosed\": onClosed\n      }, {\n        default: () => {\n          var _a;\n          return [props.options.map(renderOption), (_a = slots.default) == null ? void 0 : _a.call(slots)];\n        }\n      })]), [[_vShow, state.showWrapper]]);\n    };\n    useExpose({\n      state,\n      toggle,\n      renderTitle\n    });\n    return () => {\n      if (props.teleport) {\n        return _createVNode(Teleport, {\n          \"to\": props.teleport\n        }, {\n          default: () => [renderContent()]\n        });\n      }\n      return renderContent();\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  dropdownItemProps\n};\n",
      "start": 1756100533416,
      "end": 1756100533905,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    }
  ]
}
