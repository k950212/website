{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/sidebar/sidebar.esm.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import FocusTrap from 'primevue/focustrap';\nimport TimesIcon from 'primevue/icons/times';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport { ZIndexUtils, DomHandler } from 'primevue/utils';\nimport BaseComponent from 'primevue/basecomponent';\nimport SidebarStyle from 'primevue/sidebar/style';\nimport { resolveComponent, resolveDirective, openBlock, createBlock, withCtx, createElementBlock, mergeProps, createVNode, Transition, withDirectives, renderSlot, Fragment, createElementVNode, normalizeClass, toDisplayString, createCommentVNode, resolveDynamicComponent } from 'vue';\n\nvar script$1 = {\n  name: 'BaseSidebar',\n  \"extends\": BaseComponent,\n  props: {\n    visible: {\n      type: Boolean,\n      \"default\": false\n    },\n    position: {\n      type: String,\n      \"default\": 'left'\n    },\n    header: {\n      type: null,\n      \"default\": null\n    },\n    baseZIndex: {\n      type: Number,\n      \"default\": 0\n    },\n    autoZIndex: {\n      type: Boolean,\n      \"default\": true\n    },\n    dismissable: {\n      type: Boolean,\n      \"default\": true\n    },\n    showCloseIcon: {\n      type: Boolean,\n      \"default\": true\n    },\n    closeIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    modal: {\n      type: Boolean,\n      \"default\": true\n    },\n    blockScroll: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  style: SidebarStyle,\n  provide: function provide() {\n    return {\n      $parentInstance: this\n    };\n  },\n  watch: {\n    dismissable: function dismissable(newValue) {\n      if (newValue) {\n        this.bindOutsideClickListener();\n      } else {\n        this.unbindOutsideClickListener();\n      }\n    }\n  }\n};\n\nvar script = {\n  name: 'Sidebar',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:visible', 'show', 'hide', 'after-hide'],\n  data: function data() {\n    return {\n      containerVisible: this.visible\n    };\n  },\n  container: null,\n  mask: null,\n  content: null,\n  headerContainer: null,\n  closeButton: null,\n  outsideClickListener: null,\n  documentKeydownListener: null,\n  updated: function updated() {\n    if (this.visible) {\n      this.containerVisible = this.visible;\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.disableDocumentSettings();\n    if (this.mask && this.autoZIndex) {\n      ZIndexUtils.clear(this.mask);\n    }\n    this.container = null;\n    this.mask = null;\n  },\n  methods: {\n    hide: function hide() {\n      this.$emit('update:visible', false);\n    },\n    onEnter: function onEnter() {\n      this.$emit('show');\n      this.focus();\n      this.bindDocumentKeyDownListener();\n      if (this.autoZIndex) {\n        ZIndexUtils.set('modal', this.mask, this.baseZIndex || this.$primevue.config.zIndex.modal);\n      }\n    },\n    onAfterEnter: function onAfterEnter() {\n      this.enableDocumentSettings();\n    },\n    onBeforeLeave: function onBeforeLeave() {\n      if (this.modal) {\n        !this.isUnstyled && DomHandler.addClass(this.mask, 'p-component-overlay-leave');\n      }\n    },\n    onLeave: function onLeave() {\n      this.$emit('hide');\n    },\n    onAfterLeave: function onAfterLeave() {\n      if (this.autoZIndex) {\n        ZIndexUtils.clear(this.mask);\n      }\n      this.unbindDocumentKeyDownListener();\n      this.containerVisible = false;\n      this.disableDocumentSettings();\n      this.$emit('after-hide');\n    },\n    onMaskClick: function onMaskClick(event) {\n      if (this.dismissable && this.modal && this.mask === event.target) {\n        this.hide();\n      }\n    },\n    focus: function focus() {\n      var findFocusableElement = function findFocusableElement(container) {\n        return container && container.querySelector('[autofocus]');\n      };\n      var focusTarget = this.$slots.header && findFocusableElement(this.headerContainer);\n      if (!focusTarget) {\n        focusTarget = this.$slots[\"default\"] && findFocusableElement(this.container);\n        if (!focusTarget) {\n          focusTarget = this.closeButton;\n        }\n      }\n      focusTarget && DomHandler.focus(focusTarget);\n    },\n    enableDocumentSettings: function enableDocumentSettings() {\n      if (this.dismissable && !this.modal) {\n        this.bindOutsideClickListener();\n      }\n      if (this.blockScroll) {\n        DomHandler.blockBodyScroll();\n      }\n    },\n    disableDocumentSettings: function disableDocumentSettings() {\n      this.unbindOutsideClickListener();\n      if (this.blockScroll) {\n        DomHandler.unblockBodyScroll();\n      }\n    },\n    onKeydown: function onKeydown(event) {\n      if (event.code === 'Escape') {\n        this.hide();\n      }\n    },\n    containerRef: function containerRef(el) {\n      this.container = el;\n    },\n    maskRef: function maskRef(el) {\n      this.mask = el;\n    },\n    contentRef: function contentRef(el) {\n      this.content = el;\n    },\n    headerContainerRef: function headerContainerRef(el) {\n      this.headerContainer = el;\n    },\n    closeButtonRef: function closeButtonRef(el) {\n      this.closeButton = el;\n    },\n    bindDocumentKeyDownListener: function bindDocumentKeyDownListener() {\n      if (!this.documentKeydownListener) {\n        this.documentKeydownListener = this.onKeydown;\n        document.addEventListener('keydown', this.documentKeydownListener);\n      }\n    },\n    unbindDocumentKeyDownListener: function unbindDocumentKeyDownListener() {\n      if (this.documentKeydownListener) {\n        document.removeEventListener('keydown', this.documentKeydownListener);\n        this.documentKeydownListener = null;\n      }\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          if (_this.isOutsideClicked(event)) {\n            _this.hide();\n          }\n        };\n        document.addEventListener('click', this.outsideClickListener);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n      }\n    },\n    isOutsideClicked: function isOutsideClicked(event) {\n      return this.container && !this.container.contains(event.target);\n    }\n  },\n  computed: {\n    fullScreen: function fullScreen() {\n      return this.position === 'full';\n    },\n    closeAriaLabel: function closeAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.close : undefined;\n    }\n  },\n  directives: {\n    focustrap: FocusTrap,\n    ripple: Ripple\n  },\n  components: {\n    Portal: Portal,\n    TimesIcon: TimesIcon\n  }\n};\n\nvar _hoisted_1 = [\"aria-modal\"];\nvar _hoisted_2 = [\"aria-label\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Portal = resolveComponent(\"Portal\");\n  var _directive_ripple = resolveDirective(\"ripple\");\n  var _directive_focustrap = resolveDirective(\"focustrap\");\n  return openBlock(), createBlock(_component_Portal, null, {\n    \"default\": withCtx(function () {\n      return [$data.containerVisible ? (openBlock(), createElementBlock(\"div\", mergeProps({\n        key: 0,\n        ref: $options.maskRef,\n        onMousedown: _cache[1] || (_cache[1] = function () {\n          return $options.onMaskClick && $options.onMaskClick.apply($options, arguments);\n        }),\n        \"class\": _ctx.cx('mask'),\n        style: _ctx.sx('mask', true, {\n          position: _ctx.position\n        })\n      }, _ctx.ptm('mask')), [createVNode(Transition, mergeProps({\n        name: \"p-sidebar\",\n        onEnter: $options.onEnter,\n        onAfterEnter: $options.onAfterEnter,\n        onBeforeLeave: $options.onBeforeLeave,\n        onLeave: $options.onLeave,\n        onAfterLeave: $options.onAfterLeave,\n        appear: \"\"\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [_ctx.visible ? withDirectives((openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.containerRef,\n            \"class\": _ctx.cx('root'),\n            role: \"complementary\",\n            \"aria-modal\": _ctx.modal\n          }, _ctx.ptmi('root')), [_ctx.$slots.container ? renderSlot(_ctx.$slots, \"container\", {\n            key: 0,\n            onClose: $options.hide,\n            closeCallback: $options.hide\n          }) : (openBlock(), createElementBlock(Fragment, {\n            key: 1\n          }, [createElementVNode(\"div\", mergeProps({\n            ref: $options.headerContainerRef,\n            \"class\": _ctx.cx('header')\n          }, _ctx.ptm('header')), [renderSlot(_ctx.$slots, \"header\", {\n            \"class\": normalizeClass(_ctx.cx('title'))\n          }, function () {\n            return [_ctx.header ? (openBlock(), createElementBlock(\"div\", mergeProps({\n              key: 0,\n              \"class\": _ctx.cx('title')\n            }, _ctx.ptm('title')), toDisplayString(_ctx.header), 17)) : createCommentVNode(\"\", true)];\n          }), _ctx.showCloseIcon ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n            key: 0,\n            ref: $options.closeButtonRef,\n            type: \"button\",\n            \"class\": _ctx.cx('closeButton'),\n            \"aria-label\": $options.closeAriaLabel,\n            onClick: _cache[0] || (_cache[0] = function () {\n              return $options.hide && $options.hide.apply($options, arguments);\n            })\n          }, _ctx.ptm('closeButton'), {\n            \"data-pc-group-section\": \"iconcontainer\"\n          }), [renderSlot(_ctx.$slots, \"closeicon\", {\n            \"class\": normalizeClass(_ctx.cx('closeIcon'))\n          }, function () {\n            return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.closeIcon ? 'span' : 'TimesIcon'), mergeProps({\n              \"class\": [_ctx.cx('closeIcon'), _ctx.closeIcon]\n            }, _ctx.ptm('closeIcon')), null, 16, [\"class\"]))];\n          })], 16, _hoisted_2)), [[_directive_ripple]]) : createCommentVNode(\"\", true)], 16), createElementVNode(\"div\", mergeProps({\n            ref: $options.contentRef,\n            \"class\": _ctx.cx('content')\n          }, _ctx.ptm('content')), [renderSlot(_ctx.$slots, \"default\")], 16)], 64))], 16, _hoisted_1)), [[_directive_focustrap]]) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onAfterEnter\", \"onBeforeLeave\", \"onLeave\", \"onAfterLeave\"])], 16)) : createCommentVNode(\"\", true)];\n    }),\n    _: 3\n  });\n}\n\nscript.render = render;\n\nexport { script as default };\n",
      "start": 1756100531751,
      "end": 1756100531801,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100531801,
      "end": 1756100531801,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100531801,
      "end": 1756100531802,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100531802,
      "end": 1756100531802,
      "order": "normal"
    }
  ]
}
