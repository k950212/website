{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/treeselect/treeselect.esm.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import ChevronDownIcon from 'primevue/icons/chevrondown';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport Tree from 'primevue/tree';\nimport { UniqueComponentId, ZIndexUtils, DomHandler, ConnectedOverlayScrollHandler } from 'primevue/utils';\nimport BaseComponent from 'primevue/basecomponent';\nimport TreeSelectStyle from 'primevue/treeselect/style';\nimport { resolveComponent, openBlock, createElementBlock, mergeProps, createElementVNode, renderSlot, Fragment, createTextVNode, toDisplayString, renderList, createCommentVNode, normalizeClass, createBlock, resolveDynamicComponent, createVNode, withCtx, Transition, createSlots } from 'vue';\n\nvar script$1 = {\n  name: 'BaseTreeSelect',\n  \"extends\": BaseComponent,\n  props: {\n    modelValue: null,\n    options: Array,\n    scrollHeight: {\n      type: String,\n      \"default\": '400px'\n    },\n    placeholder: {\n      type: String,\n      \"default\": null\n    },\n    invalid: {\n      type: Boolean,\n      \"default\": false\n    },\n    variant: {\n      type: String,\n      \"default\": null\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    tabindex: {\n      type: Number,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": 'single'\n    },\n    appendTo: {\n      type: [String, Object],\n      \"default\": 'body'\n    },\n    emptyMessage: {\n      type: String,\n      \"default\": null\n    },\n    display: {\n      type: String,\n      \"default\": 'comma'\n    },\n    metaKeySelection: {\n      type: Boolean,\n      \"default\": false\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    inputProps: {\n      type: null,\n      \"default\": null\n    },\n    panelClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    panelProps: {\n      type: null,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: TreeSelectStyle,\n  provide: function provide() {\n    return {\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _typeof$1(o) { \"@babel/helpers - typeof\"; return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$1(o); }\nfunction ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$1(obj, key, value) { key = _toPropertyKey$1(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey$1(t) { var i = _toPrimitive$1(t, \"string\"); return \"symbol\" == _typeof$1(i) ? i : String(i); }\nfunction _toPrimitive$1(t, r) { if (\"object\" != _typeof$1(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof$1(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar script = {\n  name: 'TreeSelect',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:modelValue', 'before-show', 'before-hide', 'change', 'show', 'hide', 'node-select', 'node-unselect', 'node-expand', 'node-collapse', 'focus', 'blur'],\n  data: function data() {\n    return {\n      id: this.$attrs.id,\n      focused: false,\n      overlayVisible: false,\n      expandedKeys: {}\n    };\n  },\n  watch: {\n    '$attrs.id': function $attrsId(newValue) {\n      this.id = newValue || UniqueComponentId();\n    },\n    modelValue: {\n      handler: function handler() {\n        if (!this.selfChange) {\n          this.updateTreeState();\n        }\n        this.selfChange = false;\n      },\n      immediate: true\n    },\n    options: function options() {\n      this.updateTreeState();\n    }\n  },\n  outsideClickListener: null,\n  resizeListener: null,\n  scrollHandler: null,\n  overlay: null,\n  selfChange: false,\n  selfClick: false,\n  beforeUnmount: function beforeUnmount() {\n    this.unbindOutsideClickListener();\n    this.unbindResizeListener();\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n    if (this.overlay) {\n      ZIndexUtils.clear(this.overlay);\n      this.overlay = null;\n    }\n  },\n  mounted: function mounted() {\n    this.id = this.id || UniqueComponentId();\n    this.updateTreeState();\n  },\n  methods: {\n    show: function show() {\n      this.$emit('before-show');\n      this.overlayVisible = true;\n    },\n    hide: function hide() {\n      this.$emit('before-hide');\n      this.overlayVisible = false;\n      this.$refs.focusInput.focus();\n    },\n    onFocus: function onFocus(event) {\n      this.focused = true;\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      this.focused = false;\n      this.$emit('blur', event);\n    },\n    onClick: function onClick(event) {\n      if (this.disabled) {\n        return;\n      }\n      if (!this.disabled && (!this.overlay || !this.overlay.contains(event.target))) {\n        if (this.overlayVisible) this.hide();else this.show();\n        DomHandler.focus(this.$refs.focusInput);\n      }\n    },\n    onSelectionChange: function onSelectionChange(keys) {\n      this.selfChange = true;\n      this.$emit('update:modelValue', keys);\n      this.$emit('change', keys);\n    },\n    onNodeSelect: function onNodeSelect(node) {\n      this.$emit('node-select', node);\n      if (this.selectionMode === 'single') {\n        this.hide();\n      }\n    },\n    onNodeUnselect: function onNodeUnselect(node) {\n      this.$emit('node-unselect', node);\n    },\n    onNodeToggle: function onNodeToggle(keys) {\n      this.expandedKeys = keys;\n    },\n    onFirstHiddenFocus: function onFirstHiddenFocus(event) {\n      var focusableEl = event.relatedTarget === this.$refs.focusInput ? DomHandler.getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n      DomHandler.focus(focusableEl);\n    },\n    onLastHiddenFocus: function onLastHiddenFocus(event) {\n      var focusableEl = event.relatedTarget === this.$refs.focusInput ? DomHandler.getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n      DomHandler.focus(focusableEl);\n    },\n    onKeyDown: function onKeyDown(event) {\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'Space':\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      var _this = this;\n      if (this.overlayVisible) return;\n      this.show();\n      this.$nextTick(function () {\n        var treeNodeEl = DomHandler.find(_this.$refs.tree.$el, '[data-pc-section=\"treeitem\"]');\n        var focusedElement = _toConsumableArray(treeNodeEl).find(function (item) {\n          return item.getAttribute('tabindex') === '0';\n        });\n        DomHandler.focus(focusedElement);\n      });\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      if (this.overlayVisible) {\n        this.hide();\n      } else {\n        this.onArrowDownKey(event);\n      }\n      event.preventDefault();\n    },\n    onEscapeKey: function onEscapeKey(event) {\n      if (this.overlayVisible) {\n        this.hide();\n        event.preventDefault();\n      }\n    },\n    onTabKey: function onTabKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!pressedInInputText) {\n        if (this.overlayVisible && this.hasFocusableElements()) {\n          DomHandler.focus(this.$refs.firstHiddenFocusableElementOnOverlay);\n          event.preventDefault();\n        }\n      }\n    },\n    hasFocusableElements: function hasFocusableElements() {\n      return DomHandler.getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n    },\n    onOverlayEnter: function onOverlayEnter(el) {\n      ZIndexUtils.set('overlay', el, this.$primevue.config.zIndex.overlay);\n      DomHandler.addStyles(el, {\n        position: 'absolute',\n        top: '0',\n        left: '0'\n      });\n      this.alignOverlay();\n      this.focus();\n    },\n    onOverlayAfterEnter: function onOverlayAfterEnter() {\n      this.bindOutsideClickListener();\n      this.bindScrollListener();\n      this.bindResizeListener();\n      this.scrollValueInView();\n      this.$emit('show');\n    },\n    onOverlayLeave: function onOverlayLeave() {\n      this.unbindOutsideClickListener();\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n      this.$emit('hide');\n      this.overlay = null;\n    },\n    onOverlayAfterLeave: function onOverlayAfterLeave(el) {\n      ZIndexUtils.clear(el);\n    },\n    focus: function focus() {\n      var focusableElements = DomHandler.getFocusableElements(this.overlay);\n      if (focusableElements && focusableElements.length > 0) {\n        focusableElements[0].focus();\n      }\n    },\n    alignOverlay: function alignOverlay() {\n      if (this.appendTo === 'self') {\n        DomHandler.relativePosition(this.overlay, this.$el);\n      } else {\n        this.overlay.style.minWidth = DomHandler.getOuterWidth(this.$el) + 'px';\n        DomHandler.absolutePosition(this.overlay, this.$el);\n      }\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this2 = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          if (_this2.overlayVisible && !_this2.selfClick && _this2.isOutsideClicked(event)) {\n            _this2.hide();\n          }\n          _this2.selfClick = false;\n        };\n        document.addEventListener('click', this.outsideClickListener);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n      }\n    },\n    bindScrollListener: function bindScrollListener() {\n      var _this3 = this;\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, function () {\n          if (_this3.overlayVisible) {\n            _this3.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this4 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this4.overlayVisible && !DomHandler.isTouchDevice()) {\n            _this4.hide();\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    isOutsideClicked: function isOutsideClicked(event) {\n      return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || this.overlay && this.overlay.contains(event.target));\n    },\n    overlayRef: function overlayRef(el) {\n      this.overlay = el;\n    },\n    onOverlayClick: function onOverlayClick(event) {\n      OverlayEventBus.emit('overlay-click', {\n        originalEvent: event,\n        target: this.$el\n      });\n      this.selfClick = true;\n    },\n    onOverlayKeydown: function onOverlayKeydown(event) {\n      if (event.code === 'Escape') this.hide();\n    },\n    findSelectedNodes: function findSelectedNodes(node, keys, selectedNodes) {\n      if (node) {\n        if (this.isSelected(node, keys)) {\n          selectedNodes.push(node);\n          delete keys[node.key];\n        }\n        if (Object.keys(keys).length && node.children) {\n          var _iterator = _createForOfIteratorHelper(node.children),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var childNode = _step.value;\n              this.findSelectedNodes(childNode, keys, selectedNodes);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      } else {\n        var _iterator2 = _createForOfIteratorHelper(this.options),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _childNode = _step2.value;\n            this.findSelectedNodes(_childNode, keys, selectedNodes);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    },\n    isSelected: function isSelected(node, keys) {\n      return this.selectionMode === 'checkbox' ? keys[node.key] && keys[node.key].checked : keys[node.key];\n    },\n    updateTreeState: function updateTreeState() {\n      var keys = _objectSpread$1({}, this.modelValue);\n      this.expandedKeys = {};\n      if (keys && this.options) {\n        this.updateTreeBranchState(null, null, keys);\n      }\n    },\n    updateTreeBranchState: function updateTreeBranchState(node, path, keys) {\n      if (node) {\n        if (this.isSelected(node, keys)) {\n          this.expandPath(path);\n          delete keys[node.key];\n        }\n        if (Object.keys(keys).length && node.children) {\n          var _iterator3 = _createForOfIteratorHelper(node.children),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var childNode = _step3.value;\n              path.push(node.key);\n              this.updateTreeBranchState(childNode, path, keys);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      } else {\n        var _iterator4 = _createForOfIteratorHelper(this.options),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _childNode2 = _step4.value;\n            this.updateTreeBranchState(_childNode2, [], keys);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    },\n    expandPath: function expandPath(path) {\n      if (path.length > 0) {\n        var _iterator5 = _createForOfIteratorHelper(path),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var key = _step5.value;\n            this.expandedKeys[key] = true;\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    },\n    scrollValueInView: function scrollValueInView() {\n      if (this.overlay) {\n        var selectedItem = DomHandler.findSingle(this.overlay, '[data-p-highlight=\"true\"]');\n        if (selectedItem) {\n          selectedItem.scrollIntoView({\n            block: 'nearest',\n            inline: 'start'\n          });\n        }\n      }\n    }\n  },\n  computed: {\n    selectedNodes: function selectedNodes() {\n      var selectedNodes = [];\n      if (this.modelValue && this.options) {\n        var keys = _objectSpread$1({}, this.modelValue);\n        this.findSelectedNodes(null, keys, selectedNodes);\n      }\n      return selectedNodes;\n    },\n    label: function label() {\n      var value = this.selectedNodes;\n      return value.length ? value.map(function (node) {\n        return node.label;\n      }).join(', ') : this.placeholder;\n    },\n    emptyMessageText: function emptyMessageText() {\n      return this.emptyMessage || this.$primevue.config.locale.emptyMessage;\n    },\n    emptyValue: function emptyValue() {\n      return !this.modelValue || Object.keys(this.modelValue).length === 0;\n    },\n    emptyOptions: function emptyOptions() {\n      return !this.options || this.options.length === 0;\n    },\n    listId: function listId() {\n      return this.id + '_list';\n    }\n  },\n  components: {\n    TSTree: Tree,\n    Portal: Portal,\n    ChevronDownIcon: ChevronDownIcon\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1 = [\"id\", \"disabled\", \"tabindex\", \"aria-labelledby\", \"aria-label\", \"aria-expanded\", \"aria-controls\"];\nvar _hoisted_2 = [\"aria-expanded\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_TSTree = resolveComponent(\"TSTree\");\n  var _component_Portal = resolveComponent(\"Portal\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"container\",\n    \"class\": _ctx.cx('root'),\n    style: _ctx.sx('root'),\n    onClick: _cache[9] || (_cache[9] = function () {\n      return $options.onClick && $options.onClick.apply($options, arguments);\n    })\n  }, _ctx.ptmi('root')), [createElementVNode(\"div\", mergeProps({\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenInputWrapper'), {\n    \"data-p-hidden-accessible\": true\n  }), [createElementVNode(\"input\", mergeProps({\n    ref: \"focusInput\",\n    id: _ctx.inputId,\n    type: \"text\",\n    role: \"combobox\",\n    \"class\": _ctx.inputClass,\n    style: _ctx.inputStyle,\n    readonly: \"\",\n    disabled: _ctx.disabled,\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-haspopup\": \"tree\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": $options.listId,\n    onFocus: _cache[0] || (_cache[0] = function ($event) {\n      return $options.onFocus($event);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function ($event) {\n      return $options.onBlur($event);\n    }),\n    onKeydown: _cache[2] || (_cache[2] = function ($event) {\n      return $options.onKeyDown($event);\n    })\n  }, _objectSpread(_objectSpread({}, _ctx.inputProps), _ctx.ptm('hiddenInput'))), null, 16, _hoisted_1)], 16), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('labelContainer')\n  }, _ctx.ptm('labelContainer')), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('label')\n  }, _ctx.ptm('label')), [renderSlot(_ctx.$slots, \"value\", {\n    value: $options.selectedNodes,\n    placeholder: _ctx.placeholder\n  }, function () {\n    return [_ctx.display === 'comma' ? (openBlock(), createElementBlock(Fragment, {\n      key: 0\n    }, [createTextVNode(toDisplayString($options.label || 'empty'), 1)], 64)) : _ctx.display === 'chip' ? (openBlock(), createElementBlock(Fragment, {\n      key: 1\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList($options.selectedNodes, function (node) {\n      return openBlock(), createElementBlock(\"div\", mergeProps({\n        key: node.key,\n        \"class\": _ctx.cx('token')\n      }, _ctx.ptm('token')), [createElementVNode(\"span\", mergeProps({\n        \"class\": _ctx.cx('tokenLabel')\n      }, _ctx.ptm('tokenLabel')), toDisplayString(node.label), 17)], 16);\n    }), 128)), $options.emptyValue ? (openBlock(), createElementBlock(Fragment, {\n      key: 0\n    }, [createTextVNode(toDisplayString(_ctx.placeholder || 'empty'), 1)], 64)) : createCommentVNode(\"\", true)], 64)) : createCommentVNode(\"\", true)];\n  })], 16)], 16), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('trigger'),\n    role: \"button\",\n    \"aria-haspopup\": \"tree\",\n    \"aria-expanded\": $data.overlayVisible\n  }, _ctx.ptm('trigger')), [renderSlot(_ctx.$slots, \"triggericon\", {\n    \"class\": normalizeClass(_ctx.cx('triggerIcon'))\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent('ChevronDownIcon'), mergeProps({\n      \"class\": _ctx.cx('triggerIcon')\n    }, _ctx.ptm('triggerIcon')), null, 16, [\"class\"]))];\n  })], 16, _hoisted_2), createVNode(_component_Portal, {\n    appendTo: _ctx.appendTo\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(Transition, mergeProps({\n        name: \"p-connected-overlay\",\n        onEnter: $options.onOverlayEnter,\n        onAfterEnter: $options.onOverlayAfterEnter,\n        onLeave: $options.onOverlayLeave,\n        onAfterLeave: $options.onOverlayAfterLeave\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [$data.overlayVisible ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.overlayRef,\n            onClick: _cache[7] || (_cache[7] = function () {\n              return $options.onOverlayClick && $options.onOverlayClick.apply($options, arguments);\n            }),\n            \"class\": [_ctx.cx('panel'), _ctx.panelClass],\n            onKeydown: _cache[8] || (_cache[8] = function () {\n              return $options.onOverlayKeydown && $options.onOverlayKeydown.apply($options, arguments);\n            })\n          }, _objectSpread(_objectSpread({}, _ctx.panelProps), _ctx.ptm('panel'))), [createElementVNode(\"span\", mergeProps({\n            ref: \"firstHiddenFocusableElementOnOverlay\",\n            role: \"presentation\",\n            \"aria-hidden\": \"true\",\n            \"class\": \"p-hidden-accessible p-hidden-focusable\",\n            tabindex: 0,\n            onFocus: _cache[3] || (_cache[3] = function () {\n              return $options.onFirstHiddenFocus && $options.onFirstHiddenFocus.apply($options, arguments);\n            })\n          }, _ctx.ptm('hiddenFirstFocusableEl'), {\n            \"data-p-hidden-accessible\": true,\n            \"data-p-hidden-focusable\": true\n          }), null, 16), renderSlot(_ctx.$slots, \"header\", {\n            value: _ctx.modelValue,\n            options: _ctx.options\n          }), createElementVNode(\"div\", mergeProps({\n            \"class\": _ctx.cx('wrapper'),\n            style: {\n              'max-height': _ctx.scrollHeight\n            }\n          }, _ctx.ptm('wrapper')), [createVNode(_component_TSTree, {\n            ref: \"tree\",\n            id: $options.listId,\n            value: _ctx.options,\n            selectionMode: _ctx.selectionMode,\n            \"onUpdate:selectionKeys\": $options.onSelectionChange,\n            selectionKeys: _ctx.modelValue,\n            expandedKeys: $data.expandedKeys,\n            \"onUpdate:expandedKeys\": $options.onNodeToggle,\n            metaKeySelection: _ctx.metaKeySelection,\n            onNodeExpand: _cache[4] || (_cache[4] = function ($event) {\n              return _ctx.$emit('node-expand', $event);\n            }),\n            onNodeCollapse: _cache[5] || (_cache[5] = function ($event) {\n              return _ctx.$emit('node-collapse', $event);\n            }),\n            onNodeSelect: $options.onNodeSelect,\n            onNodeUnselect: $options.onNodeUnselect,\n            level: 0,\n            unstyled: _ctx.unstyled,\n            pt: _ctx.ptm('tree')\n          }, createSlots({\n            _: 2\n          }, [_ctx.$slots.itemtogglericon ? {\n            name: \"togglericon\",\n            fn: withCtx(function (iconProps) {\n              return [renderSlot(_ctx.$slots, \"itemtogglericon\", {\n                node: iconProps.node,\n                expanded: iconProps.expanded,\n                \"class\": normalizeClass(iconProps[\"class\"])\n              })];\n            }),\n            key: \"0\"\n          } : undefined, _ctx.$slots.itemcheckboxicon ? {\n            name: \"checkboxicon\",\n            fn: withCtx(function (iconProps) {\n              return [renderSlot(_ctx.$slots, \"itemcheckboxicon\", {\n                checked: iconProps.checked,\n                partialChecked: iconProps.partialChecked,\n                \"class\": normalizeClass(iconProps[\"class\"])\n              })];\n            }),\n            key: \"1\"\n          } : undefined]), 1032, [\"id\", \"value\", \"selectionMode\", \"onUpdate:selectionKeys\", \"selectionKeys\", \"expandedKeys\", \"onUpdate:expandedKeys\", \"metaKeySelection\", \"onNodeSelect\", \"onNodeUnselect\", \"unstyled\", \"pt\"]), $options.emptyOptions ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            \"class\": _ctx.cx('emptyMessage')\n          }, _ctx.ptm('emptyMessage')), [renderSlot(_ctx.$slots, \"empty\", {}, function () {\n            return [createTextVNode(toDisplayString($options.emptyMessageText), 1)];\n          })], 16)) : createCommentVNode(\"\", true)], 16), renderSlot(_ctx.$slots, \"footer\", {\n            value: _ctx.modelValue,\n            options: _ctx.options\n          }), createElementVNode(\"span\", mergeProps({\n            ref: \"lastHiddenFocusableElementOnOverlay\",\n            role: \"presentation\",\n            \"aria-hidden\": \"true\",\n            \"class\": \"p-hidden-accessible p-hidden-focusable\",\n            tabindex: 0,\n            onFocus: _cache[6] || (_cache[6] = function () {\n              return $options.onLastHiddenFocus && $options.onLastHiddenFocus.apply($options, arguments);\n            })\n          }, _ctx.ptm('hiddenLastFocusableEl'), {\n            \"data-p-hidden-accessible\": true,\n            \"data-p-hidden-focusable\": true\n          }), null, 16)], 16)) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onAfterEnter\", \"onLeave\", \"onAfterLeave\"])];\n    }),\n    _: 3\n  }, 8, [\"appendTo\"])], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n",
      "start": 1756100531586,
      "end": 1756100531644,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100531644,
      "end": 1756100531644,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100531644,
      "end": 1756100531644,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100531644,
      "end": 1756100531644,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100531644,
      "end": 1756100531644,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100531645,
      "end": 1756100531645,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100531645,
      "end": 1756100531646,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100531646,
      "end": 1756100531646,
      "order": "normal"
    }
  ]
}
