{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/vant@4.9.16_vue@3.5.11/node_modules/vant/es/index-anchor/IndexAnchor.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { ref, reactive, computed, defineComponent, createVNode as _createVNode } from \"vue\";\nimport { extend, numericProp, BORDER_BOTTOM, getZIndexStyle, createNamespace } from \"../utils/index.mjs\";\nimport { INDEX_BAR_KEY } from \"../index-bar/IndexBar.mjs\";\nimport { getScrollTop, getRootScrollTop } from \"../utils/dom.mjs\";\nimport { useRect, useParent } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nconst [name, bem] = createNamespace(\"index-anchor\");\nconst indexAnchorProps = {\n  index: numericProp\n};\nvar stdin_default = defineComponent({\n  name,\n  props: indexAnchorProps,\n  setup(props, {\n    slots\n  }) {\n    const state = reactive({\n      top: 0,\n      left: null,\n      rect: {\n        top: 0,\n        height: 0\n      },\n      width: null,\n      active: false\n    });\n    const root = ref();\n    const {\n      parent\n    } = useParent(INDEX_BAR_KEY);\n    if (!parent) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.error(\"[Vant] <IndexAnchor> must be a child component of <IndexBar>.\");\n      }\n      return;\n    }\n    const isSticky = () => state.active && parent.props.sticky;\n    const anchorStyle = computed(() => {\n      const {\n        zIndex,\n        highlightColor\n      } = parent.props;\n      if (isSticky()) {\n        return extend(getZIndexStyle(zIndex), {\n          left: state.left ? `${state.left}px` : void 0,\n          width: state.width ? `${state.width}px` : void 0,\n          transform: state.top ? `translate3d(0, ${state.top}px, 0)` : void 0,\n          color: highlightColor\n        });\n      }\n    });\n    const getRect = (scrollParent, scrollParentRect) => {\n      const rootRect = useRect(root);\n      state.rect.height = rootRect.height;\n      if (scrollParent === window || scrollParent === document.body) {\n        state.rect.top = rootRect.top + getRootScrollTop();\n      } else {\n        state.rect.top = rootRect.top + getScrollTop(scrollParent) - scrollParentRect.top;\n      }\n      return state.rect;\n    };\n    useExpose({\n      state,\n      getRect\n    });\n    return () => {\n      const sticky = isSticky();\n      return _createVNode(\"div\", {\n        \"ref\": root,\n        \"style\": {\n          height: sticky ? `${state.rect.height}px` : void 0\n        }\n      }, [_createVNode(\"div\", {\n        \"style\": anchorStyle.value,\n        \"class\": [bem({\n          sticky\n        }), {\n          [BORDER_BOTTOM]: sticky\n        }]\n      }, [slots.default ? slots.default() : props.index])]);\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  indexAnchorProps\n};\n",
      "start": 1756100533412,
      "end": 1756100533436,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100533436,
      "end": 1756100533436,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { ref, reactive, computed, defineComponent, createVNode as _createVNode } from \"vue\";\nimport { extend, numericProp, BORDER_BOTTOM, getZIndexStyle, createNamespace } from \"../utils/index.mjs\";\nimport { INDEX_BAR_KEY } from \"../index-bar/IndexBar.mjs\";\nimport { getScrollTop, getRootScrollTop } from \"../utils/dom.mjs\";\nimport { useRect, useParent } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nconst [name, bem] = createNamespace(\"index-anchor\");\nconst indexAnchorProps = {\n  index: numericProp\n};\nvar stdin_default = defineComponent({\n  name,\n  props: indexAnchorProps,\n  setup(props, {\n    slots\n  }) {\n    const state = reactive({\n      top: 0,\n      left: null,\n      rect: {\n        top: 0,\n        height: 0\n      },\n      width: null,\n      active: false\n    });\n    const root = ref();\n    const {\n      parent\n    } = useParent(INDEX_BAR_KEY);\n    if (!parent) {\n      if (false) {\n        console.error(\"[Vant] <IndexAnchor> must be a child component of <IndexBar>.\");\n      }\n      return;\n    }\n    const isSticky = () => state.active && parent.props.sticky;\n    const anchorStyle = computed(() => {\n      const {\n        zIndex,\n        highlightColor\n      } = parent.props;\n      if (isSticky()) {\n        return extend(getZIndexStyle(zIndex), {\n          left: state.left ? `${state.left}px` : void 0,\n          width: state.width ? `${state.width}px` : void 0,\n          transform: state.top ? `translate3d(0, ${state.top}px, 0)` : void 0,\n          color: highlightColor\n        });\n      }\n    });\n    const getRect = (scrollParent, scrollParentRect) => {\n      const rootRect = useRect(root);\n      state.rect.height = rootRect.height;\n      if (scrollParent === window || scrollParent === document.body) {\n        state.rect.top = rootRect.top + getRootScrollTop();\n      } else {\n        state.rect.top = rootRect.top + getScrollTop(scrollParent) - scrollParentRect.top;\n      }\n      return state.rect;\n    };\n    useExpose({\n      state,\n      getRect\n    });\n    return () => {\n      const sticky = isSticky();\n      return _createVNode(\"div\", {\n        \"ref\": root,\n        \"style\": {\n          height: sticky ? `${state.rect.height}px` : void 0\n        }\n      }, [_createVNode(\"div\", {\n        \"style\": anchorStyle.value,\n        \"class\": [bem({\n          sticky\n        }), {\n          [BORDER_BOTTOM]: sticky\n        }]\n      }, [slots.default ? slots.default() : props.index])]);\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  indexAnchorProps\n};\n",
      "start": 1756100533436,
      "end": 1756100533905,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100533905,
      "end": 1756100533905,
      "order": "normal"
    }
  ]
}
