{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/vant@4.9.16_vue@3.5.11/node_modules/vant/es/date-picker/DatePicker.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { ref, watch, computed, defineComponent, mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport { pick, extend, isDate, isSameValue, createNamespace } from \"../utils/index.mjs\";\nimport { genOptions, sharedProps, getMonthEndDay, pickerInheritKeys, formatValueRange } from \"./utils.mjs\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { Picker } from \"../picker/index.mjs\";\nconst currentYear = (/* @__PURE__ */ new Date()).getFullYear();\nconst [name] = createNamespace(\"date-picker\");\nconst datePickerProps = extend({}, sharedProps, {\n  columnsType: {\n    type: Array,\n    default: () => [\"year\", \"month\", \"day\"]\n  },\n  minDate: {\n    type: Date,\n    default: () => new Date(currentYear - 10, 0, 1),\n    validator: isDate\n  },\n  maxDate: {\n    type: Date,\n    default: () => new Date(currentYear + 10, 11, 31),\n    validator: isDate\n  }\n});\nvar stdin_default = defineComponent({\n  name,\n  props: datePickerProps,\n  emits: [\"confirm\", \"cancel\", \"change\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const currentValues = ref(props.modelValue);\n    const updatedByExternalSources = ref(false);\n    const pickerRef = ref();\n    const computedValues = computed(() => updatedByExternalSources.value ? props.modelValue : currentValues.value);\n    const isMinYear = (year) => year === props.minDate.getFullYear();\n    const isMaxYear = (year) => year === props.maxDate.getFullYear();\n    const isMinMonth = (month) => month === props.minDate.getMonth() + 1;\n    const isMaxMonth = (month) => month === props.maxDate.getMonth() + 1;\n    const getValue = (type) => {\n      const {\n        minDate,\n        columnsType\n      } = props;\n      const index = columnsType.indexOf(type);\n      const value = computedValues.value[index];\n      if (value) {\n        return +value;\n      }\n      switch (type) {\n        case \"year\":\n          return minDate.getFullYear();\n        case \"month\":\n          return minDate.getMonth() + 1;\n        case \"day\":\n          return minDate.getDate();\n      }\n    };\n    const genYearOptions = () => {\n      const minYear = props.minDate.getFullYear();\n      const maxYear = props.maxDate.getFullYear();\n      return genOptions(minYear, maxYear, \"year\", props.formatter, props.filter, computedValues.value);\n    };\n    const genMonthOptions = () => {\n      const year = getValue(\"year\");\n      const minMonth = isMinYear(year) ? props.minDate.getMonth() + 1 : 1;\n      const maxMonth = isMaxYear(year) ? props.maxDate.getMonth() + 1 : 12;\n      return genOptions(minMonth, maxMonth, \"month\", props.formatter, props.filter, computedValues.value);\n    };\n    const genDayOptions = () => {\n      const year = getValue(\"year\");\n      const month = getValue(\"month\");\n      const minDate = isMinYear(year) && isMinMonth(month) ? props.minDate.getDate() : 1;\n      const maxDate = isMaxYear(year) && isMaxMonth(month) ? props.maxDate.getDate() : getMonthEndDay(year, month);\n      return genOptions(minDate, maxDate, \"day\", props.formatter, props.filter, computedValues.value);\n    };\n    const confirm = () => {\n      var _a;\n      return (_a = pickerRef.value) == null ? void 0 : _a.confirm();\n    };\n    const getSelectedDate = () => currentValues.value;\n    const columns = computed(() => props.columnsType.map((type) => {\n      switch (type) {\n        case \"year\":\n          return genYearOptions();\n        case \"month\":\n          return genMonthOptions();\n        case \"day\":\n          return genDayOptions();\n        default:\n          if (process.env.NODE_ENV !== \"production\") {\n            throw new Error(`[Vant] DatePicker: unsupported columns type: ${type}`);\n          }\n          return [];\n      }\n    }));\n    watch(currentValues, (newValues) => {\n      if (!isSameValue(newValues, props.modelValue)) {\n        emit(\"update:modelValue\", newValues);\n      }\n    });\n    watch(() => props.modelValue, (newValues, oldValues) => {\n      updatedByExternalSources.value = isSameValue(oldValues, currentValues.value);\n      newValues = formatValueRange(newValues, columns.value);\n      if (!isSameValue(newValues, currentValues.value)) {\n        currentValues.value = newValues;\n      }\n      updatedByExternalSources.value = false;\n    }, {\n      immediate: true\n    });\n    const onChange = (...args) => emit(\"change\", ...args);\n    const onCancel = (...args) => emit(\"cancel\", ...args);\n    const onConfirm = (...args) => emit(\"confirm\", ...args);\n    useExpose({\n      confirm,\n      getSelectedDate\n    });\n    return () => _createVNode(Picker, _mergeProps({\n      \"ref\": pickerRef,\n      \"modelValue\": currentValues.value,\n      \"onUpdate:modelValue\": ($event) => currentValues.value = $event,\n      \"columns\": columns.value,\n      \"onChange\": onChange,\n      \"onCancel\": onCancel,\n      \"onConfirm\": onConfirm\n    }, pick(props, pickerInheritKeys)), slots);\n  }\n});\nexport {\n  datePickerProps,\n  stdin_default as default\n};\n",
      "start": 1756100533396,
      "end": 1756100533413,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100533413,
      "end": 1756100533413,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { ref, watch, computed, defineComponent, mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport { pick, extend, isDate, isSameValue, createNamespace } from \"../utils/index.mjs\";\nimport { genOptions, sharedProps, getMonthEndDay, pickerInheritKeys, formatValueRange } from \"./utils.mjs\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { Picker } from \"../picker/index.mjs\";\nconst currentYear = (/* @__PURE__ */ new Date()).getFullYear();\nconst [name] = createNamespace(\"date-picker\");\nconst datePickerProps = extend({}, sharedProps, {\n  columnsType: {\n    type: Array,\n    default: () => [\"year\", \"month\", \"day\"]\n  },\n  minDate: {\n    type: Date,\n    default: () => new Date(currentYear - 10, 0, 1),\n    validator: isDate\n  },\n  maxDate: {\n    type: Date,\n    default: () => new Date(currentYear + 10, 11, 31),\n    validator: isDate\n  }\n});\nvar stdin_default = defineComponent({\n  name,\n  props: datePickerProps,\n  emits: [\"confirm\", \"cancel\", \"change\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const currentValues = ref(props.modelValue);\n    const updatedByExternalSources = ref(false);\n    const pickerRef = ref();\n    const computedValues = computed(() => updatedByExternalSources.value ? props.modelValue : currentValues.value);\n    const isMinYear = (year) => year === props.minDate.getFullYear();\n    const isMaxYear = (year) => year === props.maxDate.getFullYear();\n    const isMinMonth = (month) => month === props.minDate.getMonth() + 1;\n    const isMaxMonth = (month) => month === props.maxDate.getMonth() + 1;\n    const getValue = (type) => {\n      const {\n        minDate,\n        columnsType\n      } = props;\n      const index = columnsType.indexOf(type);\n      const value = computedValues.value[index];\n      if (value) {\n        return +value;\n      }\n      switch (type) {\n        case \"year\":\n          return minDate.getFullYear();\n        case \"month\":\n          return minDate.getMonth() + 1;\n        case \"day\":\n          return minDate.getDate();\n      }\n    };\n    const genYearOptions = () => {\n      const minYear = props.minDate.getFullYear();\n      const maxYear = props.maxDate.getFullYear();\n      return genOptions(minYear, maxYear, \"year\", props.formatter, props.filter, computedValues.value);\n    };\n    const genMonthOptions = () => {\n      const year = getValue(\"year\");\n      const minMonth = isMinYear(year) ? props.minDate.getMonth() + 1 : 1;\n      const maxMonth = isMaxYear(year) ? props.maxDate.getMonth() + 1 : 12;\n      return genOptions(minMonth, maxMonth, \"month\", props.formatter, props.filter, computedValues.value);\n    };\n    const genDayOptions = () => {\n      const year = getValue(\"year\");\n      const month = getValue(\"month\");\n      const minDate = isMinYear(year) && isMinMonth(month) ? props.minDate.getDate() : 1;\n      const maxDate = isMaxYear(year) && isMaxMonth(month) ? props.maxDate.getDate() : getMonthEndDay(year, month);\n      return genOptions(minDate, maxDate, \"day\", props.formatter, props.filter, computedValues.value);\n    };\n    const confirm = () => {\n      var _a;\n      return (_a = pickerRef.value) == null ? void 0 : _a.confirm();\n    };\n    const getSelectedDate = () => currentValues.value;\n    const columns = computed(() => props.columnsType.map((type) => {\n      switch (type) {\n        case \"year\":\n          return genYearOptions();\n        case \"month\":\n          return genMonthOptions();\n        case \"day\":\n          return genDayOptions();\n        default:\n          if (false) {\n            throw new Error(`[Vant] DatePicker: unsupported columns type: ${type}`);\n          }\n          return [];\n      }\n    }));\n    watch(currentValues, (newValues) => {\n      if (!isSameValue(newValues, props.modelValue)) {\n        emit(\"update:modelValue\", newValues);\n      }\n    });\n    watch(() => props.modelValue, (newValues, oldValues) => {\n      updatedByExternalSources.value = isSameValue(oldValues, currentValues.value);\n      newValues = formatValueRange(newValues, columns.value);\n      if (!isSameValue(newValues, currentValues.value)) {\n        currentValues.value = newValues;\n      }\n      updatedByExternalSources.value = false;\n    }, {\n      immediate: true\n    });\n    const onChange = (...args) => emit(\"change\", ...args);\n    const onCancel = (...args) => emit(\"cancel\", ...args);\n    const onConfirm = (...args) => emit(\"confirm\", ...args);\n    useExpose({\n      confirm,\n      getSelectedDate\n    });\n    return () => _createVNode(Picker, _mergeProps({\n      \"ref\": pickerRef,\n      \"modelValue\": currentValues.value,\n      \"onUpdate:modelValue\": ($event) => currentValues.value = $event,\n      \"columns\": columns.value,\n      \"onChange\": onChange,\n      \"onCancel\": onCancel,\n      \"onConfirm\": onConfirm\n    }, pick(props, pickerInheritKeys)), slots);\n  }\n});\nexport {\n  datePickerProps,\n  stdin_default as default\n};\n",
      "start": 1756100533413,
      "end": 1756100533901,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1756100533901,
      "end": 1756100533901,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100533901,
      "end": 1756100533901,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100533901,
      "end": 1756100533902,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100533902,
      "end": 1756100533902,
      "order": "normal"
    }
  ]
}
