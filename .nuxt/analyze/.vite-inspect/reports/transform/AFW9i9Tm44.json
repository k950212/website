{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/vant@4.9.16_vue@3.5.11/node_modules/vant/es/picker/Picker.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { ref, watch, computed, nextTick, defineComponent, createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { pick, extend, unitToPx, truthProp, isSameValue, makeArrayProp, preventDefault, makeStringProp, makeNumericProp, BORDER_UNSET_TOP_BOTTOM } from \"../utils/index.mjs\";\nimport { bem, name, isOptionExist, getColumnsType, findOptionByValue, assignDefaultFields, formatCascadeColumns, getFirstEnabledOption } from \"./utils.mjs\";\nimport { useChildren, useEventListener, useParent } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { Loading } from \"../loading/index.mjs\";\nimport Column, { PICKER_KEY } from \"./PickerColumn.mjs\";\nimport Toolbar, { pickerToolbarPropKeys, pickerToolbarProps, pickerToolbarSlots } from \"./PickerToolbar.mjs\";\nimport { PICKER_GROUP_KEY } from \"../picker-group/PickerGroup.mjs\";\nconst pickerSharedProps = extend({\n  loading: Boolean,\n  readonly: Boolean,\n  allowHtml: Boolean,\n  optionHeight: makeNumericProp(44),\n  showToolbar: truthProp,\n  swipeDuration: makeNumericProp(1e3),\n  visibleOptionNum: makeNumericProp(6)\n}, pickerToolbarProps);\nconst pickerProps = extend({}, pickerSharedProps, {\n  columns: makeArrayProp(),\n  modelValue: makeArrayProp(),\n  toolbarPosition: makeStringProp(\"top\"),\n  columnsFieldNames: Object\n});\nvar stdin_default = defineComponent({\n  name,\n  props: pickerProps,\n  emits: [\"confirm\", \"cancel\", \"change\", \"scrollInto\", \"clickOption\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const columnsRef = ref();\n    const selectedValues = ref(props.modelValue.slice(0));\n    const {\n      parent\n    } = useParent(PICKER_GROUP_KEY);\n    const {\n      children,\n      linkChildren\n    } = useChildren(PICKER_KEY);\n    linkChildren();\n    const fields = computed(() => assignDefaultFields(props.columnsFieldNames));\n    const optionHeight = computed(() => unitToPx(props.optionHeight));\n    const columnsType = computed(() => getColumnsType(props.columns, fields.value));\n    const currentColumns = computed(() => {\n      const {\n        columns\n      } = props;\n      switch (columnsType.value) {\n        case \"multiple\":\n          return columns;\n        case \"cascade\":\n          return formatCascadeColumns(columns, fields.value, selectedValues);\n        default:\n          return [columns];\n      }\n    });\n    const hasOptions = computed(() => currentColumns.value.some((options) => options.length));\n    const selectedOptions = computed(() => currentColumns.value.map((options, index) => findOptionByValue(options, selectedValues.value[index], fields.value)));\n    const selectedIndexes = computed(() => currentColumns.value.map((options, index) => options.findIndex((option) => option[fields.value.value] === selectedValues.value[index])));\n    const setValue = (index, value) => {\n      if (selectedValues.value[index] !== value) {\n        const newValues = selectedValues.value.slice(0);\n        newValues[index] = value;\n        selectedValues.value = newValues;\n      }\n    };\n    const getEventParams = () => ({\n      selectedValues: selectedValues.value.slice(0),\n      selectedOptions: selectedOptions.value,\n      selectedIndexes: selectedIndexes.value\n    });\n    const onChange = (value, columnIndex) => {\n      setValue(columnIndex, value);\n      if (columnsType.value === \"cascade\") {\n        selectedValues.value.forEach((value2, index) => {\n          const options = currentColumns.value[index];\n          if (!isOptionExist(options, value2, fields.value)) {\n            setValue(index, options.length ? options[0][fields.value.value] : void 0);\n          }\n        });\n      }\n      nextTick(() => {\n        emit(\"change\", extend({\n          columnIndex\n        }, getEventParams()));\n      });\n    };\n    const onClickOption = (currentOption, columnIndex) => {\n      const params = {\n        columnIndex,\n        currentOption\n      };\n      emit(\"clickOption\", extend(getEventParams(), params));\n      emit(\"scrollInto\", params);\n    };\n    const confirm = () => {\n      children.forEach((child) => child.stopMomentum());\n      const params = getEventParams();\n      nextTick(() => {\n        emit(\"confirm\", params);\n      });\n      return params;\n    };\n    const cancel = () => emit(\"cancel\", getEventParams());\n    const renderColumnItems = () => currentColumns.value.map((options, columnIndex) => _createVNode(Column, {\n      \"value\": selectedValues.value[columnIndex],\n      \"fields\": fields.value,\n      \"options\": options,\n      \"readonly\": props.readonly,\n      \"allowHtml\": props.allowHtml,\n      \"optionHeight\": optionHeight.value,\n      \"swipeDuration\": props.swipeDuration,\n      \"visibleOptionNum\": props.visibleOptionNum,\n      \"onChange\": (value) => onChange(value, columnIndex),\n      \"onClickOption\": (option) => onClickOption(option, columnIndex),\n      \"onScrollInto\": (option) => {\n        emit(\"scrollInto\", {\n          currentOption: option,\n          columnIndex\n        });\n      }\n    }, {\n      option: slots.option\n    }));\n    const renderMask = (wrapHeight) => {\n      if (hasOptions.value) {\n        const frameStyle = {\n          height: `${optionHeight.value}px`\n        };\n        const maskStyle = {\n          backgroundSize: `100% ${(wrapHeight - optionHeight.value) / 2}px`\n        };\n        return [_createVNode(\"div\", {\n          \"class\": bem(\"mask\"),\n          \"style\": maskStyle\n        }, null), _createVNode(\"div\", {\n          \"class\": [BORDER_UNSET_TOP_BOTTOM, bem(\"frame\")],\n          \"style\": frameStyle\n        }, null)];\n      }\n    };\n    const renderColumns = () => {\n      const wrapHeight = optionHeight.value * +props.visibleOptionNum;\n      const columnsStyle = {\n        height: `${wrapHeight}px`\n      };\n      if (!props.loading && !hasOptions.value && slots.empty) {\n        return slots.empty();\n      }\n      return _createVNode(\"div\", {\n        \"ref\": columnsRef,\n        \"class\": bem(\"columns\"),\n        \"style\": columnsStyle\n      }, [renderColumnItems(), renderMask(wrapHeight)]);\n    };\n    const renderToolbar = () => {\n      if (props.showToolbar && !parent) {\n        return _createVNode(Toolbar, _mergeProps(pick(props, pickerToolbarPropKeys), {\n          \"onConfirm\": confirm,\n          \"onCancel\": cancel\n        }), pick(slots, pickerToolbarSlots));\n      }\n    };\n    watch(currentColumns, (columns) => {\n      columns.forEach((options, index) => {\n        if (options.length && !isOptionExist(options, selectedValues.value[index], fields.value)) {\n          setValue(index, getFirstEnabledOption(options)[fields.value.value]);\n        }\n      });\n    }, {\n      immediate: true\n    });\n    let lastEmittedModelValue;\n    watch(() => props.modelValue, (newValues) => {\n      if (!isSameValue(newValues, selectedValues.value) && !isSameValue(newValues, lastEmittedModelValue)) {\n        selectedValues.value = newValues.slice(0);\n        lastEmittedModelValue = newValues.slice(0);\n      }\n    }, {\n      deep: true\n    });\n    watch(selectedValues, (newValues) => {\n      if (!isSameValue(newValues, props.modelValue)) {\n        lastEmittedModelValue = newValues.slice(0);\n        emit(\"update:modelValue\", lastEmittedModelValue);\n      }\n    }, {\n      immediate: true\n    });\n    useEventListener(\"touchmove\", preventDefault, {\n      target: columnsRef\n    });\n    const getSelectedOptions = () => selectedOptions.value;\n    useExpose({\n      confirm,\n      getSelectedOptions\n    });\n    return () => {\n      var _a, _b;\n      return _createVNode(\"div\", {\n        \"class\": bem()\n      }, [props.toolbarPosition === \"top\" ? renderToolbar() : null, props.loading ? _createVNode(Loading, {\n        \"class\": bem(\"loading\")\n      }, null) : null, (_a = slots[\"columns-top\"]) == null ? void 0 : _a.call(slots), renderColumns(), (_b = slots[\"columns-bottom\"]) == null ? void 0 : _b.call(slots), props.toolbarPosition === \"bottom\" ? renderToolbar() : null]);\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  pickerProps,\n  pickerSharedProps\n};\n",
      "start": 1756100533428,
      "end": 1756100533447,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100533447,
      "end": 1756100533447,
      "order": "normal"
    }
  ]
}
