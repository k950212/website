{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/vant@4.9.16_vue@3.5.11/node_modules/vant/es/tab/Tab.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { ref, watch, provide, computed, nextTick, watchEffect, defineComponent, getCurrentInstance, mergeProps as _mergeProps, createVNode as _createVNode, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\nimport { normalizeClass, normalizeStyle, stringifyStyle } from \"@vue/shared\";\nimport { pick, extend, truthProp, unknownProp, numericProp, createNamespace } from \"../utils/index.mjs\";\nimport { TABS_KEY } from \"../tabs/Tabs.mjs\";\nimport { doubleRaf, useParent } from \"@vant/use\";\nimport { useId } from \"../composables/use-id.mjs\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { routeProps } from \"../composables/use-route.mjs\";\nimport { TAB_STATUS_KEY } from \"../composables/use-tab-status.mjs\";\nimport { TabTitle } from \"./TabTitle.mjs\";\nimport { SwipeItem } from \"../swipe-item/index.mjs\";\nconst [name, bem] = createNamespace(\"tab\");\nconst tabProps = extend({}, routeProps, {\n  dot: Boolean,\n  name: numericProp,\n  badge: numericProp,\n  title: String,\n  disabled: Boolean,\n  titleClass: unknownProp,\n  titleStyle: [String, Object],\n  showZeroBadge: truthProp\n});\nvar stdin_default = defineComponent({\n  name,\n  props: tabProps,\n  setup(props, {\n    slots\n  }) {\n    const id = useId();\n    const inited = ref(false);\n    const instance = getCurrentInstance();\n    const {\n      parent,\n      index\n    } = useParent(TABS_KEY);\n    if (!parent) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.error(\"[Vant] <Tab> must be a child component of <Tabs>.\");\n      }\n      return;\n    }\n    const getName = () => {\n      var _a;\n      return (_a = props.name) != null ? _a : index.value;\n    };\n    const init = () => {\n      inited.value = true;\n      if (parent.props.lazyRender) {\n        nextTick(() => {\n          parent.onRendered(getName(), props.title);\n        });\n      }\n    };\n    const active = computed(() => {\n      const isActive = getName() === parent.currentName.value;\n      if (isActive && !inited.value) {\n        init();\n      }\n      return isActive;\n    });\n    const parsedClass = ref(\"\");\n    const parsedStyle = ref(\"\");\n    watchEffect(() => {\n      const {\n        titleClass,\n        titleStyle\n      } = props;\n      parsedClass.value = titleClass ? normalizeClass(titleClass) : \"\";\n      parsedStyle.value = titleStyle && typeof titleStyle !== \"string\" ? stringifyStyle(normalizeStyle(titleStyle)) : titleStyle;\n    });\n    const renderTitle = (onClickTab) => _createVNode(TabTitle, _mergeProps({\n      \"key\": id,\n      \"id\": `${parent.id}-${index.value}`,\n      \"ref\": parent.setTitleRefs(index.value),\n      \"style\": parsedStyle.value,\n      \"class\": parsedClass.value,\n      \"isActive\": active.value,\n      \"controls\": id,\n      \"scrollable\": parent.scrollable.value,\n      \"activeColor\": parent.props.titleActiveColor,\n      \"inactiveColor\": parent.props.titleInactiveColor,\n      \"onClick\": (event) => onClickTab(instance.proxy, index.value, event)\n    }, pick(parent.props, [\"type\", \"color\", \"shrink\"]), pick(props, [\"dot\", \"badge\", \"title\", \"disabled\", \"showZeroBadge\"])), {\n      title: slots.title\n    });\n    const hasInactiveClass = ref(!active.value);\n    watch(active, (val) => {\n      if (val) {\n        hasInactiveClass.value = false;\n      } else {\n        doubleRaf(() => {\n          hasInactiveClass.value = true;\n        });\n      }\n    });\n    watch(() => props.title, () => {\n      parent.setLine();\n      parent.scrollIntoView();\n    });\n    provide(TAB_STATUS_KEY, active);\n    useExpose({\n      id,\n      renderTitle\n    });\n    return () => {\n      var _a;\n      const label = `${parent.id}-${index.value}`;\n      const {\n        animated,\n        swipeable,\n        scrollspy,\n        lazyRender\n      } = parent.props;\n      if (!slots.default && !animated) {\n        return;\n      }\n      const show = scrollspy || active.value;\n      if (animated || swipeable) {\n        return _createVNode(SwipeItem, {\n          \"id\": id,\n          \"role\": \"tabpanel\",\n          \"class\": bem(\"panel-wrapper\", {\n            inactive: hasInactiveClass.value\n          }),\n          \"tabindex\": active.value ? 0 : -1,\n          \"aria-hidden\": !active.value,\n          \"aria-labelledby\": label,\n          \"data-allow-mismatch\": \"attribute\"\n        }, {\n          default: () => {\n            var _a2;\n            return [_createVNode(\"div\", {\n              \"class\": bem(\"panel\")\n            }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)])];\n          }\n        });\n      }\n      const shouldRender = inited.value || scrollspy || !lazyRender;\n      const Content = shouldRender ? (_a = slots.default) == null ? void 0 : _a.call(slots) : null;\n      return _withDirectives(_createVNode(\"div\", {\n        \"id\": id,\n        \"role\": \"tabpanel\",\n        \"class\": bem(\"panel\"),\n        \"tabindex\": show ? 0 : -1,\n        \"aria-labelledby\": label,\n        \"data-allow-mismatch\": \"attribute\"\n      }, [Content]), [[_vShow, show]]);\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  tabProps\n};\n",
      "start": 1756100533474,
      "end": 1756100533498,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100533498,
      "end": 1756100533498,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { ref, watch, provide, computed, nextTick, watchEffect, defineComponent, getCurrentInstance, mergeProps as _mergeProps, createVNode as _createVNode, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\nimport { normalizeClass, normalizeStyle, stringifyStyle } from \"@vue/shared\";\nimport { pick, extend, truthProp, unknownProp, numericProp, createNamespace } from \"../utils/index.mjs\";\nimport { TABS_KEY } from \"../tabs/Tabs.mjs\";\nimport { doubleRaf, useParent } from \"@vant/use\";\nimport { useId } from \"../composables/use-id.mjs\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { routeProps } from \"../composables/use-route.mjs\";\nimport { TAB_STATUS_KEY } from \"../composables/use-tab-status.mjs\";\nimport { TabTitle } from \"./TabTitle.mjs\";\nimport { SwipeItem } from \"../swipe-item/index.mjs\";\nconst [name, bem] = createNamespace(\"tab\");\nconst tabProps = extend({}, routeProps, {\n  dot: Boolean,\n  name: numericProp,\n  badge: numericProp,\n  title: String,\n  disabled: Boolean,\n  titleClass: unknownProp,\n  titleStyle: [String, Object],\n  showZeroBadge: truthProp\n});\nvar stdin_default = defineComponent({\n  name,\n  props: tabProps,\n  setup(props, {\n    slots\n  }) {\n    const id = useId();\n    const inited = ref(false);\n    const instance = getCurrentInstance();\n    const {\n      parent,\n      index\n    } = useParent(TABS_KEY);\n    if (!parent) {\n      if (false) {\n        console.error(\"[Vant] <Tab> must be a child component of <Tabs>.\");\n      }\n      return;\n    }\n    const getName = () => {\n      var _a;\n      return (_a = props.name) != null ? _a : index.value;\n    };\n    const init = () => {\n      inited.value = true;\n      if (parent.props.lazyRender) {\n        nextTick(() => {\n          parent.onRendered(getName(), props.title);\n        });\n      }\n    };\n    const active = computed(() => {\n      const isActive = getName() === parent.currentName.value;\n      if (isActive && !inited.value) {\n        init();\n      }\n      return isActive;\n    });\n    const parsedClass = ref(\"\");\n    const parsedStyle = ref(\"\");\n    watchEffect(() => {\n      const {\n        titleClass,\n        titleStyle\n      } = props;\n      parsedClass.value = titleClass ? normalizeClass(titleClass) : \"\";\n      parsedStyle.value = titleStyle && typeof titleStyle !== \"string\" ? stringifyStyle(normalizeStyle(titleStyle)) : titleStyle;\n    });\n    const renderTitle = (onClickTab) => _createVNode(TabTitle, _mergeProps({\n      \"key\": id,\n      \"id\": `${parent.id}-${index.value}`,\n      \"ref\": parent.setTitleRefs(index.value),\n      \"style\": parsedStyle.value,\n      \"class\": parsedClass.value,\n      \"isActive\": active.value,\n      \"controls\": id,\n      \"scrollable\": parent.scrollable.value,\n      \"activeColor\": parent.props.titleActiveColor,\n      \"inactiveColor\": parent.props.titleInactiveColor,\n      \"onClick\": (event) => onClickTab(instance.proxy, index.value, event)\n    }, pick(parent.props, [\"type\", \"color\", \"shrink\"]), pick(props, [\"dot\", \"badge\", \"title\", \"disabled\", \"showZeroBadge\"])), {\n      title: slots.title\n    });\n    const hasInactiveClass = ref(!active.value);\n    watch(active, (val) => {\n      if (val) {\n        hasInactiveClass.value = false;\n      } else {\n        doubleRaf(() => {\n          hasInactiveClass.value = true;\n        });\n      }\n    });\n    watch(() => props.title, () => {\n      parent.setLine();\n      parent.scrollIntoView();\n    });\n    provide(TAB_STATUS_KEY, active);\n    useExpose({\n      id,\n      renderTitle\n    });\n    return () => {\n      var _a;\n      const label = `${parent.id}-${index.value}`;\n      const {\n        animated,\n        swipeable,\n        scrollspy,\n        lazyRender\n      } = parent.props;\n      if (!slots.default && !animated) {\n        return;\n      }\n      const show = scrollspy || active.value;\n      if (animated || swipeable) {\n        return _createVNode(SwipeItem, {\n          \"id\": id,\n          \"role\": \"tabpanel\",\n          \"class\": bem(\"panel-wrapper\", {\n            inactive: hasInactiveClass.value\n          }),\n          \"tabindex\": active.value ? 0 : -1,\n          \"aria-hidden\": !active.value,\n          \"aria-labelledby\": label,\n          \"data-allow-mismatch\": \"attribute\"\n        }, {\n          default: () => {\n            var _a2;\n            return [_createVNode(\"div\", {\n              \"class\": bem(\"panel\")\n            }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)])];\n          }\n        });\n      }\n      const shouldRender = inited.value || scrollspy || !lazyRender;\n      const Content = shouldRender ? (_a = slots.default) == null ? void 0 : _a.call(slots) : null;\n      return _withDirectives(_createVNode(\"div\", {\n        \"id\": id,\n        \"role\": \"tabpanel\",\n        \"class\": bem(\"panel\"),\n        \"tabindex\": show ? 0 : -1,\n        \"aria-labelledby\": label,\n        \"data-allow-mismatch\": \"attribute\"\n      }, [Content]), [[_vShow, show]]);\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  tabProps\n};\n",
      "start": 1756100533498,
      "end": 1756100533949,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1756100533949,
      "end": 1756100533949,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100533949,
      "end": 1756100533949,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100533949,
      "end": 1756100533949,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100533949,
      "end": 1756100533949,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100533949,
      "end": 1756100533949,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100533949,
      "end": 1756100533949,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100533949,
      "end": 1756100533949,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100533949,
      "end": 1756100533950,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100533950,
      "end": 1756100533950,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100533950,
      "end": 1756100533950,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100533950,
      "end": 1756100533950,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100533950,
      "end": 1756100533950,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100533950,
      "end": 1756100533950,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100533950,
      "end": 1756100533950,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100533950,
      "end": 1756100533950,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100533950,
      "end": 1756100533950,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100533950,
      "end": 1756100533950,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100533950,
      "end": 1756100533950,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100533950,
      "end": 1756100533950,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100533950,
      "end": 1756100533950,
      "order": "normal"
    }
  ]
}
