{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/vant@4.9.16_vue@3.5.11/node_modules/vant/es/lazyload/vue-lazyload/listener.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { useRect } from \"@vant/use\";\nimport { loadImageAsync } from \"./util.mjs\";\nimport { noop } from \"../../utils/index.mjs\";\nclass ReactiveListener {\n  constructor({\n    el,\n    src,\n    error,\n    loading,\n    bindType,\n    $parent,\n    options,\n    cors,\n    elRenderer,\n    imageCache\n  }) {\n    this.el = el;\n    this.src = src;\n    this.error = error;\n    this.loading = loading;\n    this.bindType = bindType;\n    this.attempt = 0;\n    this.cors = cors;\n    this.naturalHeight = 0;\n    this.naturalWidth = 0;\n    this.options = options;\n    this.$parent = $parent;\n    this.elRenderer = elRenderer;\n    this.imageCache = imageCache;\n    this.performanceData = {\n      loadStart: 0,\n      loadEnd: 0\n    };\n    this.filter();\n    this.initState();\n    this.render(\"loading\", false);\n  }\n  /*\n   * init listener state\n   * @return\n   */\n  initState() {\n    if (\"dataset\" in this.el) {\n      this.el.dataset.src = this.src;\n    } else {\n      this.el.setAttribute(\"data-src\", this.src);\n    }\n    this.state = {\n      loading: false,\n      error: false,\n      loaded: false,\n      rendered: false\n    };\n  }\n  /*\n   * record performance\n   * @return\n   */\n  record(event) {\n    this.performanceData[event] = Date.now();\n  }\n  /*\n   * update image listener data\n   * @param  {String} image uri\n   * @param  {String} loading image uri\n   * @param  {String} error image uri\n   * @return\n   */\n  update({ src, loading, error }) {\n    const oldSrc = this.src;\n    this.src = src;\n    this.loading = loading;\n    this.error = error;\n    this.filter();\n    if (oldSrc !== this.src) {\n      this.attempt = 0;\n      this.initState();\n    }\n  }\n  /*\n   *  check el is in view\n   * @return {Boolean} el is in view\n   */\n  checkInView() {\n    const rect = useRect(this.el);\n    return rect.top < window.innerHeight * this.options.preLoad && rect.bottom > this.options.preLoadTop && rect.left < window.innerWidth * this.options.preLoad && rect.right > 0;\n  }\n  /*\n   * listener filter\n   */\n  filter() {\n    Object.keys(this.options.filter).forEach((key) => {\n      this.options.filter[key](this, this.options);\n    });\n  }\n  /*\n   * render loading first\n   * @params cb:Function\n   * @return\n   */\n  renderLoading(cb) {\n    this.state.loading = true;\n    loadImageAsync(\n      {\n        src: this.loading,\n        cors: this.cors\n      },\n      () => {\n        this.render(\"loading\", false);\n        this.state.loading = false;\n        cb();\n      },\n      () => {\n        cb();\n        this.state.loading = false;\n        if (process.env.NODE_ENV !== \"production\" && !this.options.silent)\n          console.warn(\n            `[@vant/lazyload] load failed with loading image(${this.loading})`\n          );\n      }\n    );\n  }\n  /*\n   * try load image and  render it\n   * @return\n   */\n  load(onFinish = noop) {\n    if (this.attempt > this.options.attempt - 1 && this.state.error) {\n      if (process.env.NODE_ENV !== \"production\" && !this.options.silent) {\n        console.log(\n          `[@vant/lazyload] ${this.src} tried too more than ${this.options.attempt} times`\n        );\n      }\n      onFinish();\n      return;\n    }\n    if (this.state.rendered && this.state.loaded) return;\n    if (this.imageCache.has(this.src)) {\n      this.state.loaded = true;\n      this.render(\"loaded\", true);\n      this.state.rendered = true;\n      return onFinish();\n    }\n    this.renderLoading(() => {\n      var _a, _b;\n      this.attempt++;\n      (_b = (_a = this.options.adapter).beforeLoad) == null ? void 0 : _b.call(_a, this, this.options);\n      this.record(\"loadStart\");\n      loadImageAsync(\n        {\n          src: this.src,\n          cors: this.cors\n        },\n        (data) => {\n          this.naturalHeight = data.naturalHeight;\n          this.naturalWidth = data.naturalWidth;\n          this.state.loaded = true;\n          this.state.error = false;\n          this.record(\"loadEnd\");\n          this.render(\"loaded\", false);\n          this.state.rendered = true;\n          this.imageCache.add(this.src);\n          onFinish();\n        },\n        (err) => {\n          !this.options.silent && console.error(err);\n          this.state.error = true;\n          this.state.loaded = false;\n          this.render(\"error\", false);\n        }\n      );\n    });\n  }\n  /*\n   * render image\n   * @param  {String} state to render // ['loading', 'src', 'error']\n   * @param  {String} is form cache\n   * @return\n   */\n  render(state, cache) {\n    this.elRenderer(this, state, cache);\n  }\n  /*\n   * output performance data\n   * @return {Object} performance data\n   */\n  performance() {\n    let state = \"loading\";\n    let time = 0;\n    if (this.state.loaded) {\n      state = \"loaded\";\n      time = (this.performanceData.loadEnd - this.performanceData.loadStart) / 1e3;\n    }\n    if (this.state.error) state = \"error\";\n    return {\n      src: this.src,\n      state,\n      time\n    };\n  }\n  /*\n   * $destroy\n   * @return\n   */\n  $destroy() {\n    this.el = null;\n    this.src = null;\n    this.error = null;\n    this.loading = null;\n    this.bindType = null;\n    this.attempt = 0;\n  }\n}\nexport {\n  ReactiveListener as default\n};\n",
      "start": 1756100534329,
      "end": 1756100534345,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100534345,
      "end": 1756100534345,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { useRect } from \"@vant/use\";\nimport { loadImageAsync } from \"./util.mjs\";\nimport { noop } from \"../../utils/index.mjs\";\nclass ReactiveListener {\n  constructor({\n    el,\n    src,\n    error,\n    loading,\n    bindType,\n    $parent,\n    options,\n    cors,\n    elRenderer,\n    imageCache\n  }) {\n    this.el = el;\n    this.src = src;\n    this.error = error;\n    this.loading = loading;\n    this.bindType = bindType;\n    this.attempt = 0;\n    this.cors = cors;\n    this.naturalHeight = 0;\n    this.naturalWidth = 0;\n    this.options = options;\n    this.$parent = $parent;\n    this.elRenderer = elRenderer;\n    this.imageCache = imageCache;\n    this.performanceData = {\n      loadStart: 0,\n      loadEnd: 0\n    };\n    this.filter();\n    this.initState();\n    this.render(\"loading\", false);\n  }\n  /*\n   * init listener state\n   * @return\n   */\n  initState() {\n    if (\"dataset\" in this.el) {\n      this.el.dataset.src = this.src;\n    } else {\n      this.el.setAttribute(\"data-src\", this.src);\n    }\n    this.state = {\n      loading: false,\n      error: false,\n      loaded: false,\n      rendered: false\n    };\n  }\n  /*\n   * record performance\n   * @return\n   */\n  record(event) {\n    this.performanceData[event] = Date.now();\n  }\n  /*\n   * update image listener data\n   * @param  {String} image uri\n   * @param  {String} loading image uri\n   * @param  {String} error image uri\n   * @return\n   */\n  update({ src, loading, error }) {\n    const oldSrc = this.src;\n    this.src = src;\n    this.loading = loading;\n    this.error = error;\n    this.filter();\n    if (oldSrc !== this.src) {\n      this.attempt = 0;\n      this.initState();\n    }\n  }\n  /*\n   *  check el is in view\n   * @return {Boolean} el is in view\n   */\n  checkInView() {\n    const rect = useRect(this.el);\n    return rect.top < window.innerHeight * this.options.preLoad && rect.bottom > this.options.preLoadTop && rect.left < window.innerWidth * this.options.preLoad && rect.right > 0;\n  }\n  /*\n   * listener filter\n   */\n  filter() {\n    Object.keys(this.options.filter).forEach((key) => {\n      this.options.filter[key](this, this.options);\n    });\n  }\n  /*\n   * render loading first\n   * @params cb:Function\n   * @return\n   */\n  renderLoading(cb) {\n    this.state.loading = true;\n    loadImageAsync(\n      {\n        src: this.loading,\n        cors: this.cors\n      },\n      () => {\n        this.render(\"loading\", false);\n        this.state.loading = false;\n        cb();\n      },\n      () => {\n        cb();\n        this.state.loading = false;\n        if (false)\n          console.warn(\n            `[@vant/lazyload] load failed with loading image(${this.loading})`\n          );\n      }\n    );\n  }\n  /*\n   * try load image and  render it\n   * @return\n   */\n  load(onFinish = noop) {\n    if (this.attempt > this.options.attempt - 1 && this.state.error) {\n      if (false) {\n        console.log(\n          `[@vant/lazyload] ${this.src} tried too more than ${this.options.attempt} times`\n        );\n      }\n      onFinish();\n      return;\n    }\n    if (this.state.rendered && this.state.loaded)\n      return;\n    if (this.imageCache.has(this.src)) {\n      this.state.loaded = true;\n      this.render(\"loaded\", true);\n      this.state.rendered = true;\n      return onFinish();\n    }\n    this.renderLoading(() => {\n      var _a, _b;\n      this.attempt++;\n      (_b = (_a = this.options.adapter).beforeLoad) == null ? void 0 : _b.call(_a, this, this.options);\n      this.record(\"loadStart\");\n      loadImageAsync(\n        {\n          src: this.src,\n          cors: this.cors\n        },\n        (data) => {\n          this.naturalHeight = data.naturalHeight;\n          this.naturalWidth = data.naturalWidth;\n          this.state.loaded = true;\n          this.state.error = false;\n          this.record(\"loadEnd\");\n          this.render(\"loaded\", false);\n          this.state.rendered = true;\n          this.imageCache.add(this.src);\n          onFinish();\n        },\n        (err) => {\n          !this.options.silent && console.error(err);\n          this.state.error = true;\n          this.state.loaded = false;\n          this.render(\"error\", false);\n        }\n      );\n    });\n  }\n  /*\n   * render image\n   * @param  {String} state to render // ['loading', 'src', 'error']\n   * @param  {String} is form cache\n   * @return\n   */\n  render(state, cache) {\n    this.elRenderer(this, state, cache);\n  }\n  /*\n   * output performance data\n   * @return {Object} performance data\n   */\n  performance() {\n    let state = \"loading\";\n    let time = 0;\n    if (this.state.loaded) {\n      state = \"loaded\";\n      time = (this.performanceData.loadEnd - this.performanceData.loadStart) / 1e3;\n    }\n    if (this.state.error)\n      state = \"error\";\n    return {\n      src: this.src,\n      state,\n      time\n    };\n  }\n  /*\n   * $destroy\n   * @return\n   */\n  $destroy() {\n    this.el = null;\n    this.src = null;\n    this.error = null;\n    this.loading = null;\n    this.bindType = null;\n    this.attempt = 0;\n  }\n}\nexport {\n  ReactiveListener as default\n};\n",
      "start": 1756100534345,
      "end": 1756100534358,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1756100534358,
      "end": 1756100534358,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100534358,
      "end": 1756100534358,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100534358,
      "end": 1756100534358,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100534358,
      "end": 1756100534358,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100534358,
      "end": 1756100534358,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100534358,
      "end": 1756100534358,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100534358,
      "end": 1756100534358,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100534358,
      "end": 1756100534359,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100534359,
      "end": 1756100534359,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100534359,
      "end": 1756100534359,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100534359,
      "end": 1756100534359,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100534359,
      "end": 1756100534359,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100534359,
      "end": 1756100534359,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100534359,
      "end": 1756100534359,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100534359,
      "end": 1756100534359,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100534359,
      "end": 1756100534359,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100534359,
      "end": 1756100534359,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100534359,
      "end": 1756100534359,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100534359,
      "end": 1756100534359,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100534359,
      "end": 1756100534359,
      "order": "normal"
    }
  ]
}
