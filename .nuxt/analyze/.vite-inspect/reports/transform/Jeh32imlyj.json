{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/organizationchart/organizationchart.esm.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import BaseComponent from 'primevue/basecomponent';\nimport OrganizationChartStyle from 'primevue/organizationchart/style';\nimport ChevronDownIcon from 'primevue/icons/chevrondown';\nimport ChevronUpIcon from 'primevue/icons/chevronup';\nimport { DomHandler } from 'primevue/utils';\nimport { resolveComponent, openBlock, createElementBlock, mergeProps, createElementVNode, normalizeProps, guardReactiveProps, createBlock, resolveDynamicComponent, createCommentVNode, Fragment, renderList, createVNode } from 'vue';\n\nvar script$2 = {\n  name: 'BaseOrganizationChart',\n  \"extends\": BaseComponent,\n  props: {\n    value: {\n      type: null,\n      \"default\": null\n    },\n    selectionKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    },\n    collapsible: {\n      type: Boolean,\n      \"default\": false\n    },\n    collapsedKeys: {\n      type: null,\n      \"default\": null\n    }\n  },\n  style: OrganizationChartStyle,\n  provide: function provide() {\n    return {\n      $parentInstance: this\n    };\n  }\n};\n\nvar script$1 = {\n  name: 'OrganizationChartNode',\n  hostName: 'OrganizationChart',\n  \"extends\": BaseComponent,\n  emits: ['node-click', 'node-toggle'],\n  props: {\n    node: {\n      type: null,\n      \"default\": null\n    },\n    templates: {\n      type: null,\n      \"default\": null\n    },\n    collapsible: {\n      type: Boolean,\n      \"default\": false\n    },\n    collapsedKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    }\n  },\n  methods: {\n    getPTOptions: function getPTOptions(key) {\n      return this.ptm(key, {\n        context: {\n          expanded: this.expanded,\n          selectable: this.selectable,\n          selected: this.selected,\n          toggleable: this.toggleable,\n          active: this.selected\n        }\n      });\n    },\n    getNodeOptions: function getNodeOptions(lineTop, key) {\n      return this.ptm(key, {\n        context: {\n          lineTop: lineTop\n        }\n      });\n    },\n    onNodeClick: function onNodeClick(event) {\n      if (DomHandler.getAttribute(event.target, 'nodeToggler') || DomHandler.getAttribute(event.target, 'nodeTogglerIcon')) {\n        return;\n      }\n      if (this.selectionMode) {\n        this.$emit('node-click', this.node);\n      }\n    },\n    onChildNodeClick: function onChildNodeClick(node) {\n      this.$emit('node-click', node);\n    },\n    toggleNode: function toggleNode() {\n      this.$emit('node-toggle', this.node);\n    },\n    onChildNodeToggle: function onChildNodeToggle(node) {\n      this.$emit('node-toggle', node);\n    },\n    onKeydown: function onKeydown(event) {\n      if (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') {\n        this.toggleNode();\n        event.preventDefault();\n      }\n    }\n  },\n  computed: {\n    leaf: function leaf() {\n      return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n    },\n    colspan: function colspan() {\n      return this.node.children && this.node.children.length ? this.node.children.length * 2 : null;\n    },\n    childStyle: function childStyle() {\n      return {\n        visibility: !this.leaf && this.expanded ? 'inherit' : 'hidden'\n      };\n    },\n    expanded: function expanded() {\n      return this.collapsedKeys[this.node.key] === undefined;\n    },\n    selectable: function selectable() {\n      return this.selectionMode && this.node.selectable !== false;\n    },\n    selected: function selected() {\n      return this.selectable && this.selectionKeys && this.selectionKeys[this.node.key] === true;\n    },\n    toggleable: function toggleable() {\n      return this.collapsible && this.node.collapsible !== false && !this.leaf;\n    }\n  },\n  components: {\n    ChevronDownIcon: ChevronDownIcon,\n    ChevronUpIcon: ChevronUpIcon\n  }\n};\n\nvar _hoisted_1 = [\"colspan\"];\nvar _hoisted_2 = [\"colspan\"];\nvar _hoisted_3 = [\"colspan\"];\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_OrganizationChartNode = resolveComponent(\"OrganizationChartNode\", true);\n  return openBlock(), createElementBlock(\"table\", mergeProps({\n    \"class\": _ctx.cx('table')\n  }, _ctx.ptm('table')), [createElementVNode(\"tbody\", normalizeProps(guardReactiveProps(_ctx.ptm('body'))), [$props.node ? (openBlock(), createElementBlock(\"tr\", normalizeProps(mergeProps({\n    key: 0\n  }, _ctx.ptm('row'))), [createElementVNode(\"td\", mergeProps({\n    colspan: $options.colspan\n  }, _ctx.ptm('cell')), [createElementVNode(\"div\", mergeProps({\n    \"class\": [_ctx.cx('node'), $props.node.styleClass],\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $options.onNodeClick && $options.onNodeClick.apply($options, arguments);\n    })\n  }, $options.getPTOptions('node')), [(openBlock(), createBlock(resolveDynamicComponent($props.templates[$props.node.type] || $props.templates['default']), {\n    node: $props.node\n  }, null, 8, [\"node\"])), $options.toggleable ? (openBlock(), createElementBlock(\"a\", mergeProps({\n    key: 0,\n    tabindex: \"0\",\n    \"class\": _ctx.cx('nodeToggler'),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.toggleNode && $options.toggleNode.apply($options, arguments);\n    }),\n    onKeydown: _cache[1] || (_cache[1] = function () {\n      return $options.onKeydown && $options.onKeydown.apply($options, arguments);\n    })\n  }, $options.getPTOptions('nodeToggler')), [$props.templates.togglericon ? (openBlock(), createBlock(resolveDynamicComponent($props.templates.togglericon), {\n    key: 0,\n    expanded: $options.expanded,\n    \"class\": \"p-node-toggler-icon\"\n  }, null, 8, [\"expanded\"])) : (openBlock(), createBlock(resolveDynamicComponent($options.expanded ? 'ChevronDownIcon' : 'ChevronUpIcon'), mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('nodeTogglerIcon')\n  }, $options.getPTOptions('nodeTogglerIcon')), null, 16, [\"class\"]))], 16)) : createCommentVNode(\"\", true)], 16)], 16, _hoisted_1)], 16)) : createCommentVNode(\"\", true), createElementVNode(\"tr\", mergeProps({\n    style: $options.childStyle,\n    \"class\": _ctx.cx('lines')\n  }, _ctx.ptm('lines')), [createElementVNode(\"td\", mergeProps({\n    colspan: $options.colspan\n  }, _ctx.ptm('lineCell')), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('lineDown')\n  }, _ctx.ptm('lineDown')), null, 16)], 16, _hoisted_2)], 16), createElementVNode(\"tr\", mergeProps({\n    style: $options.childStyle,\n    \"class\": _ctx.cx('lines')\n  }, _ctx.ptm('lines')), [$props.node.children && $props.node.children.length === 1 ? (openBlock(), createElementBlock(\"td\", mergeProps({\n    key: 0,\n    colspan: $options.colspan\n  }, _ctx.ptm('lineCell')), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('lineDown')\n  }, _ctx.ptm('lineDown')), null, 16)], 16, _hoisted_3)) : createCommentVNode(\"\", true), $props.node.children && $props.node.children.length > 1 ? (openBlock(true), createElementBlock(Fragment, {\n    key: 1\n  }, renderList($props.node.children, function (child, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: child.key\n    }, [createElementVNode(\"td\", mergeProps({\n      \"class\": _ctx.cx('lineLeft', {\n        index: i\n      })\n    }, $options.getNodeOptions(!(i === 0), 'lineLeft')), \" \", 16), createElementVNode(\"td\", mergeProps({\n      \"class\": _ctx.cx('lineRight', {\n        index: i\n      })\n    }, $options.getNodeOptions(!(i === $props.node.children.length - 1), 'lineRight')), \" \", 16)], 64);\n  }), 128)) : createCommentVNode(\"\", true)], 16), createElementVNode(\"tr\", mergeProps({\n    style: $options.childStyle,\n    \"class\": _ctx.cx('nodes')\n  }, _ctx.ptm('nodes')), [(openBlock(true), createElementBlock(Fragment, null, renderList($props.node.children, function (child) {\n    return openBlock(), createElementBlock(\"td\", mergeProps({\n      key: child.key,\n      colspan: \"2\"\n    }, _ctx.ptm('nodeCell')), [createVNode(_component_OrganizationChartNode, {\n      node: child,\n      templates: $props.templates,\n      collapsedKeys: $props.collapsedKeys,\n      onNodeToggle: $options.onChildNodeToggle,\n      collapsible: $props.collapsible,\n      selectionMode: $props.selectionMode,\n      selectionKeys: $props.selectionKeys,\n      onNodeClick: $options.onChildNodeClick,\n      pt: _ctx.pt,\n      unstyled: _ctx.unstyled\n    }, null, 8, [\"node\", \"templates\", \"collapsedKeys\", \"onNodeToggle\", \"collapsible\", \"selectionMode\", \"selectionKeys\", \"onNodeClick\", \"pt\", \"unstyled\"])], 16);\n  }), 128))], 16)], 16)], 16);\n}\n\nscript$1.render = render$1;\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar script = {\n  name: 'OrganizationChart',\n  \"extends\": script$2,\n  inheritAttrs: false,\n  emits: ['node-unselect', 'node-select', 'update:selectionKeys', 'node-expand', 'node-collapse', 'update:collapsedKeys'],\n  data: function data() {\n    return {\n      d_collapsedKeys: this.collapsedKeys || {}\n    };\n  },\n  watch: {\n    collapsedKeys: function collapsedKeys(newValue) {\n      this.d_collapsedKeys = newValue;\n    }\n  },\n  methods: {\n    onNodeClick: function onNodeClick(node) {\n      var key = node.key;\n      if (this.selectionMode) {\n        var _selectionKeys = this.selectionKeys ? _objectSpread({}, this.selectionKeys) : {};\n        if (_selectionKeys[key]) {\n          delete _selectionKeys[key];\n          this.$emit('node-unselect', node);\n        } else {\n          if (this.selectionMode === 'single') {\n            _selectionKeys = {};\n          }\n          _selectionKeys[key] = true;\n          this.$emit('node-select', node);\n        }\n        this.$emit('update:selectionKeys', _selectionKeys);\n      }\n    },\n    onNodeToggle: function onNodeToggle(node) {\n      var key = node.key;\n      if (this.d_collapsedKeys[key]) {\n        delete this.d_collapsedKeys[key];\n        this.$emit('node-expand', node);\n      } else {\n        this.d_collapsedKeys[key] = true;\n        this.$emit('node-collapse', node);\n      }\n      this.d_collapsedKeys = _objectSpread({}, this.d_collapsedKeys);\n      this.$emit('update:collapsedKeys', this.d_collapsedKeys);\n    }\n  },\n  components: {\n    OrganizationChartNode: script$1\n  }\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_OrganizationChartNode = resolveComponent(\"OrganizationChartNode\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root')), [createVNode(_component_OrganizationChartNode, {\n    node: _ctx.value,\n    templates: _ctx.$slots,\n    onNodeToggle: $options.onNodeToggle,\n    collapsedKeys: $data.d_collapsedKeys,\n    collapsible: _ctx.collapsible,\n    onNodeClick: $options.onNodeClick,\n    selectionMode: _ctx.selectionMode,\n    selectionKeys: _ctx.selectionKeys,\n    pt: _ctx.pt,\n    unstyled: _ctx.unstyled\n  }, null, 8, [\"node\", \"templates\", \"onNodeToggle\", \"collapsedKeys\", \"collapsible\", \"onNodeClick\", \"selectionMode\", \"selectionKeys\", \"pt\", \"unstyled\"])], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n",
      "start": 1756100531626,
      "end": 1756100531699,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100531699,
      "end": 1756100531699,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100531699,
      "end": 1756100531699,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100531699,
      "end": 1756100531699,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100531699,
      "end": 1756100531699,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100531699,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100531700,
      "end": 1756100531700,
      "order": "normal"
    }
  ]
}
