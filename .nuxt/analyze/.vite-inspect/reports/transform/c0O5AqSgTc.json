{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/overlaypanel/overlaypanel.esm.js?nuxt_component=async&nuxt_component_name=OverlayPanel&nuxt_component_export=default",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import FocusTrap from 'primevue/focustrap';\nimport TimesIcon from 'primevue/icons/times';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport { ZIndexUtils, DomHandler, ConnectedOverlayScrollHandler, UniqueComponentId } from 'primevue/utils';\nimport BaseComponent from 'primevue/basecomponent';\nimport OverlayPanelStyle from 'primevue/overlaypanel/style';\nimport { resolveComponent, resolveDirective, openBlock, createBlock, withCtx, createVNode, Transition, mergeProps, withDirectives, createElementBlock, renderSlot, Fragment, createElementVNode, resolveDynamicComponent, createCommentVNode } from 'vue';\n\nvar script$1 = {\n  name: 'BaseOverlayPanel',\n  \"extends\": BaseComponent,\n  props: {\n    dismissable: {\n      type: Boolean,\n      \"default\": true\n    },\n    showCloseIcon: {\n      type: Boolean,\n      \"default\": false\n    },\n    appendTo: {\n      type: [String, Object],\n      \"default\": 'body'\n    },\n    baseZIndex: {\n      type: Number,\n      \"default\": 0\n    },\n    autoZIndex: {\n      type: Boolean,\n      \"default\": true\n    },\n    breakpoints: {\n      type: Object,\n      \"default\": null\n    },\n    closeIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    closeOnEscape: {\n      type: Boolean,\n      \"default\": true\n    }\n  },\n  style: OverlayPanelStyle,\n  provide: function provide() {\n    return {\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'OverlayPanel',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['show', 'hide'],\n  data: function data() {\n    return {\n      visible: false\n    };\n  },\n  watch: {\n    dismissable: {\n      immediate: true,\n      handler: function handler(newValue) {\n        if (newValue) {\n          this.bindOutsideClickListener();\n        } else {\n          this.unbindOutsideClickListener();\n        }\n      }\n    }\n  },\n  selfClick: false,\n  target: null,\n  eventTarget: null,\n  outsideClickListener: null,\n  scrollHandler: null,\n  resizeListener: null,\n  container: null,\n  styleElement: null,\n  overlayEventListener: null,\n  documentKeydownListener: null,\n  beforeUnmount: function beforeUnmount() {\n    if (this.dismissable) {\n      this.unbindOutsideClickListener();\n    }\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n    this.destroyStyle();\n    this.unbindResizeListener();\n    this.target = null;\n    if (this.container && this.autoZIndex) {\n      ZIndexUtils.clear(this.container);\n    }\n    if (this.overlayEventListener) {\n      OverlayEventBus.off('overlay-click', this.overlayEventListener);\n      this.overlayEventListener = null;\n    }\n    this.container = null;\n  },\n  mounted: function mounted() {\n    if (this.breakpoints) {\n      this.createStyle();\n    }\n  },\n  methods: {\n    toggle: function toggle(event, target) {\n      if (this.visible) this.hide();else this.show(event, target);\n    },\n    show: function show(event, target) {\n      this.visible = true;\n      this.eventTarget = event.currentTarget;\n      this.target = target || event.currentTarget;\n    },\n    hide: function hide() {\n      this.visible = false;\n    },\n    onContentClick: function onContentClick() {\n      this.selfClick = true;\n    },\n    onEnter: function onEnter(el) {\n      var _this = this;\n      this.container.setAttribute(this.attributeSelector, '');\n      DomHandler.addStyles(el, {\n        position: 'absolute',\n        top: '0',\n        left: '0'\n      });\n      this.alignOverlay();\n      if (this.dismissable) {\n        this.bindOutsideClickListener();\n      }\n      this.bindScrollListener();\n      this.bindResizeListener();\n      if (this.autoZIndex) {\n        ZIndexUtils.set('overlay', el, this.baseZIndex + this.$primevue.config.zIndex.overlay);\n      }\n      this.overlayEventListener = function (e) {\n        if (_this.container.contains(e.target)) {\n          _this.selfClick = true;\n        }\n      };\n      this.focus();\n      OverlayEventBus.on('overlay-click', this.overlayEventListener);\n      this.$emit('show');\n      if (this.closeOnEscape) {\n        this.bindDocumentKeyDownListener();\n      }\n    },\n    onLeave: function onLeave() {\n      this.unbindOutsideClickListener();\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n      this.unbindDocumentKeyDownListener();\n      OverlayEventBus.off('overlay-click', this.overlayEventListener);\n      this.overlayEventListener = null;\n      this.$emit('hide');\n    },\n    onAfterLeave: function onAfterLeave(el) {\n      if (this.autoZIndex) {\n        ZIndexUtils.clear(el);\n      }\n    },\n    alignOverlay: function alignOverlay() {\n      DomHandler.absolutePosition(this.container, this.target, false);\n      var containerOffset = DomHandler.getOffset(this.container);\n      var targetOffset = DomHandler.getOffset(this.target);\n      var arrowLeft = 0;\n      if (containerOffset.left < targetOffset.left) {\n        arrowLeft = targetOffset.left - containerOffset.left;\n      }\n      this.container.style.setProperty('--overlayArrowLeft', \"\".concat(arrowLeft, \"px\"));\n      if (containerOffset.top < targetOffset.top) {\n        this.container.setAttribute('data-p-overlaypanel-flipped', 'true');\n        !this.isUnstyled && DomHandler.addClass(this.container, 'p-overlaypanel-flipped');\n      }\n    },\n    onContentKeydown: function onContentKeydown(event) {\n      if (event.code === 'Escape' && this.closeOnEscape) {\n        this.hide();\n        DomHandler.focus(this.target);\n      }\n    },\n    onButtonKeydown: function onButtonKeydown(event) {\n      switch (event.code) {\n        case 'ArrowDown':\n        case 'ArrowUp':\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          event.preventDefault();\n      }\n    },\n    focus: function focus() {\n      var focusTarget = this.container.querySelector('[autofocus]');\n      if (focusTarget) {\n        focusTarget.focus();\n      }\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (event.code === 'Escape' && this.closeOnEscape) {\n        this.visible = false;\n      }\n    },\n    bindDocumentKeyDownListener: function bindDocumentKeyDownListener() {\n      if (!this.documentKeydownListener) {\n        this.documentKeydownListener = this.onKeyDown.bind(this);\n        window.document.addEventListener('keydown', this.documentKeydownListener);\n      }\n    },\n    unbindDocumentKeyDownListener: function unbindDocumentKeyDownListener() {\n      if (this.documentKeydownListener) {\n        window.document.removeEventListener('keydown', this.documentKeydownListener);\n        this.documentKeydownListener = null;\n      }\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this2 = this;\n      if (!this.outsideClickListener && DomHandler.isClient()) {\n        this.outsideClickListener = function (event) {\n          if (_this2.visible && !_this2.selfClick && !_this2.isTargetClicked(event)) {\n            _this2.visible = false;\n          }\n          _this2.selfClick = false;\n        };\n        document.addEventListener('click', this.outsideClickListener);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n        this.selfClick = false;\n      }\n    },\n    bindScrollListener: function bindScrollListener() {\n      var _this3 = this;\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, function () {\n          if (_this3.visible) {\n            _this3.visible = false;\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this4 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this4.visible && !DomHandler.isTouchDevice()) {\n            _this4.visible = false;\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    isTargetClicked: function isTargetClicked(event) {\n      return this.eventTarget && (this.eventTarget === event.target || this.eventTarget.contains(event.target));\n    },\n    containerRef: function containerRef(el) {\n      this.container = el;\n    },\n    createStyle: function createStyle() {\n      if (!this.styleElement && !this.isUnstyled) {\n        var _this$$primevue;\n        this.styleElement = document.createElement('style');\n        this.styleElement.type = 'text/css';\n        DomHandler.setAttribute(this.styleElement, 'nonce', (_this$$primevue = this.$primevue) === null || _this$$primevue === void 0 || (_this$$primevue = _this$$primevue.config) === null || _this$$primevue === void 0 || (_this$$primevue = _this$$primevue.csp) === null || _this$$primevue === void 0 ? void 0 : _this$$primevue.nonce);\n        document.head.appendChild(this.styleElement);\n        var innerHTML = '';\n        for (var breakpoint in this.breakpoints) {\n          innerHTML += \"\\n                        @media screen and (max-width: \".concat(breakpoint, \") {\\n                            .p-overlaypanel[\").concat(this.attributeSelector, \"] {\\n                                width: \").concat(this.breakpoints[breakpoint], \" !important;\\n                            }\\n                        }\\n                    \");\n        }\n        this.styleElement.innerHTML = innerHTML;\n      }\n    },\n    destroyStyle: function destroyStyle() {\n      if (this.styleElement) {\n        document.head.removeChild(this.styleElement);\n        this.styleElement = null;\n      }\n    },\n    onOverlayClick: function onOverlayClick(event) {\n      OverlayEventBus.emit('overlay-click', {\n        originalEvent: event,\n        target: this.target\n      });\n    }\n  },\n  computed: {\n    attributeSelector: function attributeSelector() {\n      return UniqueComponentId();\n    },\n    closeAriaLabel: function closeAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.close : undefined;\n    }\n  },\n  directives: {\n    focustrap: FocusTrap,\n    ripple: Ripple\n  },\n  components: {\n    Portal: Portal,\n    TimesIcon: TimesIcon\n  }\n};\n\nvar _hoisted_1 = [\"aria-modal\"];\nvar _hoisted_2 = [\"aria-label\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Portal = resolveComponent(\"Portal\");\n  var _directive_ripple = resolveDirective(\"ripple\");\n  var _directive_focustrap = resolveDirective(\"focustrap\");\n  return openBlock(), createBlock(_component_Portal, {\n    appendTo: _ctx.appendTo\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(Transition, mergeProps({\n        name: \"p-overlaypanel\",\n        onEnter: $options.onEnter,\n        onLeave: $options.onLeave,\n        onAfterLeave: $options.onAfterLeave\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [$data.visible ? withDirectives((openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.containerRef,\n            role: \"dialog\",\n            \"aria-modal\": $data.visible,\n            onClick: _cache[5] || (_cache[5] = function () {\n              return $options.onOverlayClick && $options.onOverlayClick.apply($options, arguments);\n            }),\n            \"class\": _ctx.cx('root')\n          }, _ctx.ptmi('root')), [_ctx.$slots.container ? renderSlot(_ctx.$slots, \"container\", {\n            key: 0,\n            onClose: $options.hide,\n            onKeydown: function onKeydown(event) {\n              return $options.onButtonKeydown(event);\n            },\n            closeCallback: $options.hide,\n            keydownCallback: function keydownCallback(event) {\n              return $options.onButtonKeydown(event);\n            }\n          }) : (openBlock(), createElementBlock(Fragment, {\n            key: 1\n          }, [createElementVNode(\"div\", mergeProps({\n            \"class\": _ctx.cx('content'),\n            onClick: _cache[0] || (_cache[0] = function () {\n              return $options.onContentClick && $options.onContentClick.apply($options, arguments);\n            }),\n            onMousedown: _cache[1] || (_cache[1] = function () {\n              return $options.onContentClick && $options.onContentClick.apply($options, arguments);\n            }),\n            onKeydown: _cache[2] || (_cache[2] = function () {\n              return $options.onContentKeydown && $options.onContentKeydown.apply($options, arguments);\n            })\n          }, _ctx.ptm('content')), [renderSlot(_ctx.$slots, \"default\")], 16), _ctx.showCloseIcon ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n            key: 0,\n            \"class\": _ctx.cx('closeButton'),\n            \"aria-label\": $options.closeAriaLabel,\n            type: \"button\",\n            autofocus: \"\",\n            onClick: _cache[3] || (_cache[3] = function () {\n              return $options.hide && $options.hide.apply($options, arguments);\n            }),\n            onKeydown: _cache[4] || (_cache[4] = function () {\n              return $options.onButtonKeydown && $options.onButtonKeydown.apply($options, arguments);\n            })\n          }, _ctx.ptm('closeButton')), [renderSlot(_ctx.$slots, \"closeicon\", {}, function () {\n            return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.closeIcon ? 'span' : 'TimesIcon'), mergeProps({\n              \"class\": [_ctx.cx('closeIcon'), _ctx.closeIcon]\n            }, _ctx.ptm('closeIcon')), null, 16, [\"class\"]))];\n          })], 16, _hoisted_2)), [[_directive_ripple]]) : createCommentVNode(\"\", true)], 64))], 16, _hoisted_1)), [[_directive_focustrap]]) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onLeave\", \"onAfterLeave\"])];\n    }),\n    _: 3\n  }, 8, [\"appendTo\"]);\n}\n\nscript.render = render;\n\nexport { script as default };\n",
      "start": 1756100531141,
      "end": 1756100531175,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "result": "import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => import(\"/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/overlaypanel/overlaypanel.esm.js\").then(r => r[\"default\"] || r.default || r))",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "replace",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "result": "import { __vitePreload } from \"\u0000vite/preload-helper.js\";import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => __vitePreload(() => import(\"/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/overlaypanel/overlaypanel.esm.js\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url).then(r => r[\"default\"] || r.default || r))",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:reporter",
      "start": 1756100531175,
      "end": 1756100531175,
      "order": "normal"
    }
  ]
}
