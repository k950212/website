{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/datatable/datatable.esm.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { FilterOperator, FilterService, FilterMatchMode } from 'primevue/api';\nimport ArrowDownIcon from 'primevue/icons/arrowdown';\nimport ArrowUpIcon from 'primevue/icons/arrowup';\nimport SpinnerIcon from 'primevue/icons/spinner';\nimport Paginator from 'primevue/paginator';\nimport { DomHandler, ObjectUtils, UniqueComponentId, HelperSet, ZIndexUtils, ConnectedOverlayScrollHandler } from 'primevue/utils';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseComponent from 'primevue/basecomponent';\nimport DataTableStyle from 'primevue/datatable/style';\nimport ChevronDownIcon from 'primevue/icons/chevrondown';\nimport ChevronRightIcon from 'primevue/icons/chevronright';\nimport { mergeProps, resolveComponent, openBlock, createBlock, withCtx, resolveDynamicComponent, normalizeClass, createCommentVNode, resolveDirective, createElementBlock, toDisplayString, Fragment, withDirectives, createTextVNode, createElementVNode, withModifiers, renderList, normalizeProps, guardReactiveProps, createVNode, Transition, withKeys, renderSlot, createSlots } from 'vue';\nimport BarsIcon from 'primevue/icons/bars';\nimport CheckIcon from 'primevue/icons/check';\nimport PencilIcon from 'primevue/icons/pencil';\nimport TimesIcon from 'primevue/icons/times';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Ripple from 'primevue/ripple';\nimport Checkbox from 'primevue/checkbox';\nimport RadioButton from 'primevue/radiobutton';\nimport Button from 'primevue/button';\nimport Dropdown from 'primevue/dropdown';\nimport FocusTrap from 'primevue/focustrap';\nimport FilterIcon from 'primevue/icons/filter';\nimport FilterSlashIcon from 'primevue/icons/filterslash';\nimport PlusIcon from 'primevue/icons/plus';\nimport TrashIcon from 'primevue/icons/trash';\nimport Portal from 'primevue/portal';\nimport SortAltIcon from 'primevue/icons/sortalt';\nimport SortAmountDownIcon from 'primevue/icons/sortamountdown';\nimport SortAmountUpAltIcon from 'primevue/icons/sortamountupalt';\n\nvar script$c = {\n  name: 'BaseDataTable',\n  \"extends\": BaseComponent,\n  props: {\n    value: {\n      type: Array,\n      \"default\": null\n    },\n    dataKey: {\n      type: [String, Function],\n      \"default\": null\n    },\n    rows: {\n      type: Number,\n      \"default\": 0\n    },\n    first: {\n      type: Number,\n      \"default\": 0\n    },\n    totalRecords: {\n      type: Number,\n      \"default\": 0\n    },\n    paginator: {\n      type: Boolean,\n      \"default\": false\n    },\n    paginatorPosition: {\n      type: String,\n      \"default\": 'bottom'\n    },\n    alwaysShowPaginator: {\n      type: Boolean,\n      \"default\": true\n    },\n    paginatorTemplate: {\n      type: [Object, String],\n      \"default\": 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown'\n    },\n    pageLinkSize: {\n      type: Number,\n      \"default\": 5\n    },\n    rowsPerPageOptions: {\n      type: Array,\n      \"default\": null\n    },\n    currentPageReportTemplate: {\n      type: String,\n      \"default\": '({currentPage} of {totalPages})'\n    },\n    lazy: {\n      type: Boolean,\n      \"default\": false\n    },\n    loading: {\n      type: Boolean,\n      \"default\": false\n    },\n    loadingIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    sortField: {\n      type: [String, Function],\n      \"default\": null\n    },\n    sortOrder: {\n      type: Number,\n      \"default\": null\n    },\n    defaultSortOrder: {\n      type: Number,\n      \"default\": 1\n    },\n    nullSortOrder: {\n      type: Number,\n      \"default\": 1\n    },\n    multiSortMeta: {\n      type: Array,\n      \"default\": null\n    },\n    sortMode: {\n      type: String,\n      \"default\": 'single'\n    },\n    removableSort: {\n      type: Boolean,\n      \"default\": false\n    },\n    filters: {\n      type: Object,\n      \"default\": null\n    },\n    filterDisplay: {\n      type: String,\n      \"default\": null\n    },\n    globalFilterFields: {\n      type: Array,\n      \"default\": null\n    },\n    filterLocale: {\n      type: String,\n      \"default\": undefined\n    },\n    selection: {\n      type: [Array, Object],\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    },\n    compareSelectionBy: {\n      type: String,\n      \"default\": 'deepEquals'\n    },\n    metaKeySelection: {\n      type: Boolean,\n      \"default\": false\n    },\n    contextMenu: {\n      type: Boolean,\n      \"default\": false\n    },\n    contextMenuSelection: {\n      type: Object,\n      \"default\": null\n    },\n    selectAll: {\n      type: Boolean,\n      \"default\": null\n    },\n    rowHover: {\n      type: Boolean,\n      \"default\": false\n    },\n    csvSeparator: {\n      type: String,\n      \"default\": ','\n    },\n    exportFilename: {\n      type: String,\n      \"default\": 'download'\n    },\n    exportFunction: {\n      type: Function,\n      \"default\": null\n    },\n    resizableColumns: {\n      type: Boolean,\n      \"default\": false\n    },\n    columnResizeMode: {\n      type: String,\n      \"default\": 'fit'\n    },\n    reorderableColumns: {\n      type: Boolean,\n      \"default\": false\n    },\n    expandedRows: {\n      type: [Array, Object],\n      \"default\": null\n    },\n    expandedRowIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    collapsedRowIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    rowGroupMode: {\n      type: String,\n      \"default\": null\n    },\n    groupRowsBy: {\n      type: [Array, String, Function],\n      \"default\": null\n    },\n    expandableRowGroups: {\n      type: Boolean,\n      \"default\": false\n    },\n    expandedRowGroups: {\n      type: Array,\n      \"default\": null\n    },\n    stateStorage: {\n      type: String,\n      \"default\": 'session'\n    },\n    stateKey: {\n      type: String,\n      \"default\": null\n    },\n    editMode: {\n      type: String,\n      \"default\": null\n    },\n    editingRows: {\n      type: Array,\n      \"default\": null\n    },\n    rowClass: {\n      type: Function,\n      \"default\": null\n    },\n    rowStyle: {\n      type: Function,\n      \"default\": null\n    },\n    scrollable: {\n      type: Boolean,\n      \"default\": false\n    },\n    virtualScrollerOptions: {\n      type: Object,\n      \"default\": null\n    },\n    scrollHeight: {\n      type: String,\n      \"default\": null\n    },\n    frozenValue: {\n      type: Array,\n      \"default\": null\n    },\n    responsiveLayout: {\n      type: String,\n      \"default\": 'scroll'\n    },\n    breakpoint: {\n      type: String,\n      \"default\": '960px'\n    },\n    showGridlines: {\n      type: Boolean,\n      \"default\": false\n    },\n    stripedRows: {\n      type: Boolean,\n      \"default\": false\n    },\n    highlightOnSelect: {\n      type: Boolean,\n      \"default\": false\n    },\n    size: {\n      type: String,\n      \"default\": null\n    },\n    tableStyle: {\n      type: null,\n      \"default\": null\n    },\n    tableClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    tableProps: {\n      type: Object,\n      \"default\": null\n    },\n    filterInputProps: {\n      type: null,\n      \"default\": null\n    }\n  },\n  style: DataTableStyle,\n  provide: function provide() {\n    return {\n      $parentInstance: this\n    };\n  }\n};\n\nvar script$b = {\n  name: 'RowCheckbox',\n  hostName: 'DataTable',\n  \"extends\": BaseComponent,\n  emits: ['change'],\n  props: {\n    value: null,\n    checked: null,\n    column: null,\n    rowCheckboxIconTemplate: {\n      type: Function,\n      \"default\": null\n    },\n    index: {\n      type: Number,\n      \"default\": null\n    }\n  },\n  methods: {\n    getColumnPT: function getColumnPT(key) {\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: this.index,\n          checked: this.checked,\n          disabled: this.$attrs.disabled\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo:\n    },\n    onChange: function onChange(event) {\n      if (!this.$attrs.disabled) {\n        this.$emit('change', {\n          originalEvent: event,\n          data: this.value\n        });\n      }\n    }\n  },\n  computed: {\n    checkboxAriaLabel: function checkboxAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.checked ? this.$primevue.config.locale.aria.selectRow : this.$primevue.config.locale.aria.unselectRow : undefined;\n    }\n  },\n  components: {\n    CheckIcon: CheckIcon,\n    Checkbox: Checkbox\n  }\n};\n\nfunction render$b(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_CheckIcon = resolveComponent(\"CheckIcon\");\n  var _component_Checkbox = resolveComponent(\"Checkbox\");\n  return openBlock(), createBlock(_component_Checkbox, {\n    modelValue: $props.checked,\n    binary: true,\n    disabled: _ctx.$attrs.disabled,\n    \"aria-label\": $options.checkboxAriaLabel,\n    onChange: $options.onChange,\n    unstyled: _ctx.unstyled,\n    pt: $options.getColumnPT('rowCheckbox')\n  }, {\n    icon: withCtx(function (slotProps) {\n      return [$props.rowCheckboxIconTemplate ? (openBlock(), createBlock(resolveDynamicComponent($props.rowCheckboxIconTemplate), {\n        key: 0,\n        checked: slotProps.checked,\n        \"class\": normalizeClass(slotProps[\"class\"])\n      }, null, 8, [\"checked\", \"class\"])) : !$props.rowCheckboxIconTemplate && slotProps.checked ? (openBlock(), createBlock(_component_CheckIcon, mergeProps({\n        key: 1,\n        \"class\": slotProps[\"class\"]\n      }, $options.getColumnPT('rowCheckbox.icon')), null, 16, [\"class\"])) : createCommentVNode(\"\", true)];\n    }),\n    _: 1\n  }, 8, [\"modelValue\", \"disabled\", \"aria-label\", \"onChange\", \"unstyled\", \"pt\"]);\n}\n\nscript$b.render = render$b;\n\nvar script$a = {\n  name: 'RowRadioButton',\n  hostName: 'DataTable',\n  \"extends\": BaseComponent,\n  emits: ['change'],\n  props: {\n    value: null,\n    checked: null,\n    name: null,\n    column: null,\n    index: {\n      type: Number,\n      \"default\": null\n    }\n  },\n  methods: {\n    getColumnPT: function getColumnPT(key) {\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: this.index,\n          checked: this.checked,\n          disabled: this.$attrs.disabled\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo:\n    },\n    onChange: function onChange(event) {\n      if (!this.$attrs.disabled) {\n        this.$emit('change', {\n          originalEvent: event,\n          data: this.value\n        });\n      }\n    }\n  },\n  components: {\n    RadioButton: RadioButton\n  }\n};\n\nfunction render$a(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_RadioButton = resolveComponent(\"RadioButton\");\n  return openBlock(), createBlock(_component_RadioButton, {\n    modelValue: $props.checked,\n    binary: true,\n    disabled: _ctx.$attrs.disabled,\n    name: $props.name,\n    onChange: $options.onChange,\n    unstyled: _ctx.unstyled,\n    pt: $options.getColumnPT('rowRadiobutton')\n  }, null, 8, [\"modelValue\", \"disabled\", \"name\", \"onChange\", \"unstyled\", \"pt\"]);\n}\n\nscript$a.render = render$a;\n\nvar script$9 = {\n  name: 'BodyCell',\n  hostName: 'DataTable',\n  \"extends\": BaseComponent,\n  emits: ['cell-edit-init', 'cell-edit-complete', 'cell-edit-cancel', 'row-edit-init', 'row-edit-save', 'row-edit-cancel', 'row-toggle', 'radio-change', 'checkbox-change', 'editing-meta-change'],\n  props: {\n    rowData: {\n      type: Object,\n      \"default\": null\n    },\n    column: {\n      type: Object,\n      \"default\": null\n    },\n    frozenRow: {\n      type: Boolean,\n      \"default\": false\n    },\n    rowIndex: {\n      type: Number,\n      \"default\": null\n    },\n    index: {\n      type: Number,\n      \"default\": null\n    },\n    isRowExpanded: {\n      type: Boolean,\n      \"default\": false\n    },\n    selected: {\n      type: Boolean,\n      \"default\": false\n    },\n    editing: {\n      type: Boolean,\n      \"default\": false\n    },\n    editingMeta: {\n      type: Object,\n      \"default\": null\n    },\n    editMode: {\n      type: String,\n      \"default\": null\n    },\n    responsiveLayout: {\n      type: String,\n      \"default\": 'stack'\n    },\n    virtualScrollerContentProps: {\n      type: Object,\n      \"default\": null\n    },\n    ariaControls: {\n      type: String,\n      \"default\": null\n    },\n    name: {\n      type: String,\n      \"default\": null\n    },\n    expandedRowIcon: {\n      type: String,\n      \"default\": null\n    },\n    collapsedRowIcon: {\n      type: String,\n      \"default\": null\n    }\n  },\n  documentEditListener: null,\n  selfClick: false,\n  overlayEventListener: null,\n  data: function data() {\n    return {\n      d_editing: this.editing,\n      styleObject: {}\n    };\n  },\n  watch: {\n    editing: function editing(newValue) {\n      this.d_editing = newValue;\n    },\n    '$data.d_editing': function $dataD_editing(newValue) {\n      this.$emit('editing-meta-change', {\n        data: this.rowData,\n        field: this.field || \"field_\".concat(this.index),\n        index: this.rowIndex,\n        editing: newValue\n      });\n    }\n  },\n  mounted: function mounted() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  updated: function updated() {\n    var _this = this;\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n    if (this.d_editing && (this.editMode === 'cell' || this.editMode === 'row' && this.columnProp('rowEditor'))) {\n      setTimeout(function () {\n        var focusableEl = DomHandler.getFirstFocusableElement(_this.$el);\n        focusableEl && focusableEl.focus();\n      }, 1);\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    if (this.overlayEventListener) {\n      OverlayEventBus.off('overlay-click', this.overlayEventListener);\n      this.overlayEventListener = null;\n    }\n  },\n  methods: {\n    columnProp: function columnProp(prop) {\n      return ObjectUtils.getVNodeProp(this.column, prop);\n    },\n    getColumnPT: function getColumnPT(key) {\n      var _this$$parentInstance, _this$$parentInstance2;\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: this.index,\n          size: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 || (_this$$parentInstance = _this$$parentInstance.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.size,\n          showGridlines: (_this$$parentInstance2 = this.$parentInstance) === null || _this$$parentInstance2 === void 0 || (_this$$parentInstance2 = _this$$parentInstance2.$parentInstance) === null || _this$$parentInstance2 === void 0 ? void 0 : _this$$parentInstance2.showGridlines\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined;\n    },\n    resolveFieldData: function resolveFieldData() {\n      return ObjectUtils.resolveFieldData(this.rowData, this.field);\n    },\n    toggleRow: function toggleRow(event) {\n      this.$emit('row-toggle', {\n        originalEvent: event,\n        data: this.rowData\n      });\n    },\n    toggleRowWithRadio: function toggleRowWithRadio(event, index) {\n      this.$emit('radio-change', {\n        originalEvent: event.originalEvent,\n        index: index,\n        data: event.data\n      });\n    },\n    toggleRowWithCheckbox: function toggleRowWithCheckbox(event, index) {\n      this.$emit('checkbox-change', {\n        originalEvent: event.originalEvent,\n        index: index,\n        data: event.data\n      });\n    },\n    isEditable: function isEditable() {\n      return this.column.children && this.column.children.editor != null;\n    },\n    bindDocumentEditListener: function bindDocumentEditListener() {\n      var _this2 = this;\n      if (!this.documentEditListener) {\n        this.documentEditListener = function (event) {\n          if (!_this2.selfClick) {\n            _this2.completeEdit(event, 'outside');\n          }\n          _this2.selfClick = false;\n        };\n        document.addEventListener('click', this.documentEditListener);\n      }\n    },\n    unbindDocumentEditListener: function unbindDocumentEditListener() {\n      if (this.documentEditListener) {\n        document.removeEventListener('click', this.documentEditListener);\n        this.documentEditListener = null;\n        this.selfClick = false;\n      }\n    },\n    switchCellToViewMode: function switchCellToViewMode() {\n      this.d_editing = false;\n      this.unbindDocumentEditListener();\n      OverlayEventBus.off('overlay-click', this.overlayEventListener);\n      this.overlayEventListener = null;\n    },\n    onClick: function onClick(event) {\n      var _this3 = this;\n      if (this.editMode === 'cell' && this.isEditable()) {\n        this.selfClick = true;\n        if (!this.d_editing) {\n          this.d_editing = true;\n          this.bindDocumentEditListener();\n          this.$emit('cell-edit-init', {\n            originalEvent: event,\n            data: this.rowData,\n            field: this.field,\n            index: this.rowIndex\n          });\n          this.overlayEventListener = function (e) {\n            if (_this3.$el && _this3.$el.contains(e.target)) {\n              _this3.selfClick = true;\n            }\n          };\n          OverlayEventBus.on('overlay-click', this.overlayEventListener);\n        }\n      }\n    },\n    completeEdit: function completeEdit(event, type) {\n      var completeEvent = {\n        originalEvent: event,\n        data: this.rowData,\n        newData: this.editingRowData,\n        value: this.rowData[this.field],\n        newValue: this.editingRowData[this.field],\n        field: this.field,\n        index: this.rowIndex,\n        type: type,\n        defaultPrevented: false,\n        preventDefault: function preventDefault() {\n          this.defaultPrevented = true;\n        }\n      };\n      this.$emit('cell-edit-complete', completeEvent);\n      if (!completeEvent.defaultPrevented) {\n        this.switchCellToViewMode();\n      }\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (this.editMode === 'cell') {\n        switch (event.code) {\n          case 'Enter':\n          case 'NumpadEnter':\n            this.completeEdit(event, 'enter');\n            break;\n          case 'Escape':\n            this.switchCellToViewMode();\n            this.$emit('cell-edit-cancel', {\n              originalEvent: event,\n              data: this.rowData,\n              field: this.field,\n              index: this.rowIndex\n            });\n            break;\n          case 'Tab':\n            this.completeEdit(event, 'tab');\n            if (event.shiftKey) this.moveToPreviousCell(event);else this.moveToNextCell(event);\n            break;\n        }\n      }\n    },\n    moveToPreviousCell: function moveToPreviousCell(event) {\n      var currentCell = this.findCell(event.target);\n      var targetCell = this.findPreviousEditableColumn(currentCell);\n      if (targetCell) {\n        DomHandler.invokeElementMethod(targetCell, 'click');\n        event.preventDefault();\n      }\n    },\n    moveToNextCell: function moveToNextCell(event) {\n      var currentCell = this.findCell(event.target);\n      var targetCell = this.findNextEditableColumn(currentCell);\n      if (targetCell) {\n        DomHandler.invokeElementMethod(targetCell, 'click');\n        event.preventDefault();\n      }\n    },\n    findCell: function findCell(element) {\n      if (element) {\n        var cell = element;\n        while (cell && !DomHandler.getAttribute(cell, 'data-p-cell-editing')) {\n          cell = cell.parentElement;\n        }\n        return cell;\n      } else {\n        return null;\n      }\n    },\n    findPreviousEditableColumn: function findPreviousEditableColumn(cell) {\n      var prevCell = cell === null || cell === void 0 ? void 0 : cell.previousElementSibling;\n      if (!prevCell) {\n        var previousRow = cell === null || cell === void 0 ? void 0 : cell.parentElement.previousElementSibling;\n        if (previousRow) {\n          prevCell = previousRow.lastElementChild;\n        } else return null;\n      } else {\n        if (DomHandler.getAttribute(prevCell, 'data-p-editable-column')) return prevCell;else return this.findPreviousEditableColumn(prevCell);\n      }\n    },\n    findNextEditableColumn: function findNextEditableColumn(cell) {\n      var nextCell = cell === null || cell === void 0 ? void 0 : cell.nextElementSibling;\n      if (!nextCell) {\n        var nextRow = cell === null || cell === void 0 ? void 0 : cell.parentElement.nextElementSibling;\n        if (nextRow) {\n          nextCell = nextRow.firstElementChild;\n        } else return null;\n      } else {\n        if (DomHandler.getAttribute(nextCell, 'data-p-editable-column')) return nextCell;else return this.findNextEditableColumn(nextCell);\n      }\n    },\n    onRowEditInit: function onRowEditInit(event) {\n      this.$emit('row-edit-init', {\n        originalEvent: event,\n        data: this.rowData,\n        newData: this.editingRowData,\n        field: this.field,\n        index: this.rowIndex\n      });\n    },\n    onRowEditSave: function onRowEditSave(event) {\n      this.$emit('row-edit-save', {\n        originalEvent: event,\n        data: this.rowData,\n        newData: this.editingRowData,\n        field: this.field,\n        index: this.rowIndex\n      });\n    },\n    onRowEditCancel: function onRowEditCancel(event) {\n      this.$emit('row-edit-cancel', {\n        originalEvent: event,\n        data: this.rowData,\n        newData: this.editingRowData,\n        field: this.field,\n        index: this.rowIndex\n      });\n    },\n    editorInitCallback: function editorInitCallback(event) {\n      this.$emit('row-edit-init', {\n        originalEvent: event,\n        data: this.rowData,\n        newData: this.editingRowData,\n        field: this.field,\n        index: this.rowIndex\n      });\n    },\n    editorSaveCallback: function editorSaveCallback(event) {\n      if (this.editMode === 'row') {\n        this.$emit('row-edit-save', {\n          originalEvent: event,\n          data: this.rowData,\n          newData: this.editingRowData,\n          field: this.field,\n          index: this.rowIndex\n        });\n      } else {\n        this.completeEdit(event, 'enter');\n      }\n    },\n    editorCancelCallback: function editorCancelCallback(event) {\n      if (this.editMode === 'row') {\n        this.$emit('row-edit-cancel', {\n          originalEvent: event,\n          data: this.rowData,\n          newData: this.editingRowData,\n          field: this.field,\n          index: this.rowIndex\n        });\n      } else {\n        this.switchCellToViewMode();\n        this.$emit('cell-edit-cancel', {\n          originalEvent: event,\n          data: this.rowData,\n          field: this.field,\n          index: this.rowIndex\n        });\n      }\n    },\n    updateStickyPosition: function updateStickyPosition() {\n      if (this.columnProp('frozen')) {\n        var align = this.columnProp('alignFrozen');\n        if (align === 'right') {\n          var right = 0;\n          var next = DomHandler.getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (next) {\n            right = DomHandler.getOuterWidth(next) + parseFloat(next.style.right || 0);\n          }\n          this.styleObject.right = right + 'px';\n        } else {\n          var left = 0;\n          var prev = DomHandler.getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (prev) {\n            left = DomHandler.getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n          }\n          this.styleObject.left = left + 'px';\n        }\n      }\n    },\n    getVirtualScrollerProp: function getVirtualScrollerProp(option) {\n      return this.virtualScrollerContentProps ? this.virtualScrollerContentProps[option] : null;\n    }\n  },\n  computed: {\n    editingRowData: function editingRowData() {\n      return this.editingMeta[this.rowIndex] ? this.editingMeta[this.rowIndex].data : this.rowData;\n    },\n    field: function field() {\n      return this.columnProp('field');\n    },\n    containerClass: function containerClass() {\n      return [this.columnProp('bodyClass'), this.columnProp('class'), this.cx('bodyCell')];\n    },\n    containerStyle: function containerStyle() {\n      var bodyStyle = this.columnProp('bodyStyle');\n      var columnStyle = this.columnProp('style');\n      return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n    },\n    loading: function loading() {\n      return this.getVirtualScrollerProp('loading');\n    },\n    loadingOptions: function loadingOptions() {\n      var getLoaderOptions = this.getVirtualScrollerProp('getLoaderOptions');\n      return getLoaderOptions && getLoaderOptions(this.rowIndex, {\n        cellIndex: this.index,\n        cellFirst: this.index === 0,\n        cellLast: this.index === this.getVirtualScrollerProp('columns').length - 1,\n        cellEven: this.index % 2 === 0,\n        cellOdd: this.index % 2 !== 0,\n        column: this.column,\n        field: this.field\n      });\n    },\n    expandButtonAriaLabel: function expandButtonAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.isRowExpanded ? this.$primevue.config.locale.aria.expandRow : this.$primevue.config.locale.aria.collapseRow : undefined;\n    },\n    initButtonAriaLabel: function initButtonAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.editRow : undefined;\n    },\n    saveButtonAriaLabel: function saveButtonAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.saveEdit : undefined;\n    },\n    cancelButtonAriaLabel: function cancelButtonAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.cancelEdit : undefined;\n    }\n  },\n  components: {\n    DTRadioButton: script$a,\n    DTCheckbox: script$b,\n    ChevronDownIcon: ChevronDownIcon,\n    ChevronRightIcon: ChevronRightIcon,\n    BarsIcon: BarsIcon,\n    PencilIcon: PencilIcon,\n    CheckIcon: CheckIcon,\n    TimesIcon: TimesIcon\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\n\nfunction _typeof$a(o) { \"@babel/helpers - typeof\"; return _typeof$a = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$a(o); }\nfunction ownKeys$a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$a(Object(t), !0).forEach(function (r) { _defineProperty$a(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$a(obj, key, value) { key = _toPropertyKey$a(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey$a(t) { var i = _toPrimitive$a(t, \"string\"); return \"symbol\" == _typeof$a(i) ? i : String(i); }\nfunction _toPrimitive$a(t, r) { if (\"object\" != _typeof$a(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof$a(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1$4 = [\"colspan\", \"rowspan\", \"data-p-selection-column\", \"data-p-editable-column\", \"data-p-cell-editing\", \"data-p-frozen-column\"];\nvar _hoisted_2$2 = [\"aria-expanded\", \"aria-controls\", \"aria-label\"];\nvar _hoisted_3$2 = [\"aria-label\"];\nvar _hoisted_4$1 = [\"aria-label\"];\nvar _hoisted_5$1 = [\"aria-label\"];\nfunction render$9(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_DTRadioButton = resolveComponent(\"DTRadioButton\");\n  var _component_DTCheckbox = resolveComponent(\"DTCheckbox\");\n  var _component_BarsIcon = resolveComponent(\"BarsIcon\");\n  var _component_ChevronDownIcon = resolveComponent(\"ChevronDownIcon\");\n  var _component_ChevronRightIcon = resolveComponent(\"ChevronRightIcon\");\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return $options.loading ? (openBlock(), createElementBlock(\"td\", mergeProps({\n    key: 0,\n    style: $options.containerStyle,\n    \"class\": $options.containerClass,\n    role: \"cell\"\n  }, _objectSpread$a(_objectSpread$a({}, $options.getColumnPT('root')), $options.getColumnPT('bodyCell'))), [(openBlock(), createBlock(resolveDynamicComponent($props.column.children.loading), {\n    data: $props.rowData,\n    column: $props.column,\n    field: $options.field,\n    index: $props.rowIndex,\n    frozenRow: $props.frozenRow,\n    loadingOptions: $options.loadingOptions\n  }, null, 8, [\"data\", \"column\", \"field\", \"index\", \"frozenRow\", \"loadingOptions\"]))], 16)) : (openBlock(), createElementBlock(\"td\", mergeProps({\n    key: 1,\n    style: $options.containerStyle,\n    \"class\": $options.containerClass,\n    colspan: $options.columnProp('colspan'),\n    rowspan: $options.columnProp('rowspan'),\n    onClick: _cache[6] || (_cache[6] = function () {\n      return $options.onClick && $options.onClick.apply($options, arguments);\n    }),\n    onKeydown: _cache[7] || (_cache[7] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    }),\n    role: \"cell\"\n  }, _objectSpread$a(_objectSpread$a({}, $options.getColumnPT('root')), $options.getColumnPT('bodyCell')), {\n    \"data-p-selection-column\": $options.columnProp('selectionMode') != null,\n    \"data-p-editable-column\": $options.isEditable(),\n    \"data-p-cell-editing\": $data.d_editing,\n    \"data-p-frozen-column\": $options.columnProp('frozen')\n  }), [$props.responsiveLayout === 'stack' ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('columnTitle')\n  }, $options.getColumnPT('columnTitle')), toDisplayString($options.columnProp('header')), 17)) : createCommentVNode(\"\", true), $props.column.children && $props.column.children.body && !$data.d_editing ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.body), {\n    key: 1,\n    data: $props.rowData,\n    column: $props.column,\n    field: $options.field,\n    index: $props.rowIndex,\n    frozenRow: $props.frozenRow,\n    editorInitCallback: $options.editorInitCallback,\n    rowTogglerCallback: $options.toggleRow\n  }, null, 8, [\"data\", \"column\", \"field\", \"index\", \"frozenRow\", \"editorInitCallback\", \"rowTogglerCallback\"])) : $props.column.children && $props.column.children.editor && $data.d_editing ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.editor), {\n    key: 2,\n    data: $options.editingRowData,\n    column: $props.column,\n    field: $options.field,\n    index: $props.rowIndex,\n    frozenRow: $props.frozenRow,\n    editorSaveCallback: $options.editorSaveCallback,\n    editorCancelCallback: $options.editorCancelCallback\n  }, null, 8, [\"data\", \"column\", \"field\", \"index\", \"frozenRow\", \"editorSaveCallback\", \"editorCancelCallback\"])) : $props.column.children && $props.column.children.body && !$props.column.children.editor && $data.d_editing ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.body), {\n    key: 3,\n    data: $options.editingRowData,\n    column: $props.column,\n    field: $options.field,\n    index: $props.rowIndex,\n    frozenRow: $props.frozenRow\n  }, null, 8, [\"data\", \"column\", \"field\", \"index\", \"frozenRow\"])) : $options.columnProp('selectionMode') ? (openBlock(), createElementBlock(Fragment, {\n    key: 4\n  }, [$options.columnProp('selectionMode') === 'single' ? (openBlock(), createBlock(_component_DTRadioButton, {\n    key: 0,\n    value: $props.rowData,\n    name: $props.name,\n    checked: $props.selected,\n    onChange: _cache[0] || (_cache[0] = function ($event) {\n      return $options.toggleRowWithRadio($event, $props.rowIndex);\n    }),\n    column: $props.column,\n    index: $props.index,\n    unstyled: _ctx.unstyled,\n    pt: _ctx.pt\n  }, null, 8, [\"value\", \"name\", \"checked\", \"column\", \"index\", \"unstyled\", \"pt\"])) : $options.columnProp('selectionMode') === 'multiple' ? (openBlock(), createBlock(_component_DTCheckbox, {\n    key: 1,\n    value: $props.rowData,\n    checked: $props.selected,\n    rowCheckboxIconTemplate: $props.column.children && $props.column.children.rowcheckboxicon,\n    \"aria-selected\": $props.selected ? true : undefined,\n    onChange: _cache[1] || (_cache[1] = function ($event) {\n      return $options.toggleRowWithCheckbox($event, $props.rowIndex);\n    }),\n    column: $props.column,\n    index: $props.index,\n    unstyled: _ctx.unstyled,\n    pt: _ctx.pt\n  }, null, 8, [\"value\", \"checked\", \"rowCheckboxIconTemplate\", \"aria-selected\", \"column\", \"index\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 64)) : $options.columnProp('rowReorder') ? (openBlock(), createElementBlock(Fragment, {\n    key: 5\n  }, [$props.column.children && $props.column.children.rowreordericon ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.rowreordericon), {\n    key: 0,\n    \"class\": normalizeClass(_ctx.cx('rowReorderIcon'))\n  }, null, 8, [\"class\"])) : $options.columnProp('rowReorderIcon') ? (openBlock(), createElementBlock(\"i\", mergeProps({\n    key: 1,\n    \"class\": [_ctx.cx('rowReorderIcon'), $options.columnProp('rowReorderIcon')]\n  }, $options.getColumnPT('rowReorderIcon')), null, 16)) : (openBlock(), createBlock(_component_BarsIcon, mergeProps({\n    key: 2,\n    \"class\": _ctx.cx('rowReorderIcon')\n  }, $options.getColumnPT('rowReorderIcon')), null, 16, [\"class\"]))], 64)) : $options.columnProp('expander') ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 6,\n    \"class\": _ctx.cx('rowToggler'),\n    type: \"button\",\n    \"aria-expanded\": $props.isRowExpanded,\n    \"aria-controls\": $props.ariaControls,\n    \"aria-label\": $options.expandButtonAriaLabel,\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $options.toggleRow && $options.toggleRow.apply($options, arguments);\n    })\n  }, $options.getColumnPT('rowToggler'), {\n    \"data-pc-group-section\": \"rowactionbutton\"\n  }), [$props.column.children && $props.column.children.rowtogglericon ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.rowtogglericon), {\n    key: 0,\n    \"class\": normalizeClass(_ctx.cx('rowTogglerIcon')),\n    rowExpanded: $props.isRowExpanded\n  }, null, 8, [\"class\", \"rowExpanded\"])) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [$props.isRowExpanded && $props.expandedRowIcon ? (openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    \"class\": normalizeClass([_ctx.cx('rowTogglerIcon'), $props.expandedRowIcon])\n  }, null, 2)) : $props.isRowExpanded && !$props.expandedRowIcon ? (openBlock(), createBlock(_component_ChevronDownIcon, mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('rowTogglerIcon')\n  }, $options.getColumnPT('rowTogglerIcon')), null, 16, [\"class\"])) : !$props.isRowExpanded && $props.collapsedRowIcon ? (openBlock(), createElementBlock(\"span\", {\n    key: 2,\n    \"class\": normalizeClass([_ctx.cx('rowTogglerIcon'), $props.collapsedRowIcon])\n  }, null, 2)) : !$props.isRowExpanded && !$props.collapsedRowIcon ? (openBlock(), createBlock(_component_ChevronRightIcon, mergeProps({\n    key: 3,\n    \"class\": _ctx.cx('rowTogglerIcon')\n  }, $options.getColumnPT('rowTogglerIcon')), null, 16, [\"class\"])) : createCommentVNode(\"\", true)], 64))], 16, _hoisted_2$2)), [[_directive_ripple]]) : $props.editMode === 'row' && $options.columnProp('rowEditor') ? (openBlock(), createElementBlock(Fragment, {\n    key: 7\n  }, [!$data.d_editing ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('rowEditorInitButton'),\n    type: \"button\",\n    \"aria-label\": $options.initButtonAriaLabel,\n    onClick: _cache[3] || (_cache[3] = function () {\n      return $options.onRowEditInit && $options.onRowEditInit.apply($options, arguments);\n    })\n  }, $options.getColumnPT('rowEditorInitButton'), {\n    \"data-pc-group-section\": \"rowactionbutton\"\n  }), [(openBlock(), createBlock(resolveDynamicComponent($props.column.children && $props.column.children.roweditoriniticon || 'PencilIcon'), mergeProps({\n    \"class\": _ctx.cx('rowEditorInitIcon')\n  }, $options.getColumnPT('rowEditorInitIcon')), null, 16, [\"class\"]))], 16, _hoisted_3$2)), [[_directive_ripple]]) : createCommentVNode(\"\", true), $data.d_editing ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('rowEditorSaveButton'),\n    type: \"button\",\n    \"aria-label\": $options.saveButtonAriaLabel,\n    onClick: _cache[4] || (_cache[4] = function () {\n      return $options.onRowEditSave && $options.onRowEditSave.apply($options, arguments);\n    })\n  }, $options.getColumnPT('rowEditorSaveButton'), {\n    \"data-pc-group-section\": \"rowactionbutton\"\n  }), [(openBlock(), createBlock(resolveDynamicComponent($props.column.children && $props.column.children.roweditorsaveicon || 'CheckIcon'), mergeProps({\n    \"class\": _ctx.cx('rowEditorSaveIcon')\n  }, $options.getColumnPT('rowEditorSaveIcon')), null, 16, [\"class\"]))], 16, _hoisted_4$1)), [[_directive_ripple]]) : createCommentVNode(\"\", true), $data.d_editing ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 2,\n    \"class\": _ctx.cx('rowEditorCancelButton'),\n    type: \"button\",\n    \"aria-label\": $options.cancelButtonAriaLabel,\n    onClick: _cache[5] || (_cache[5] = function () {\n      return $options.onRowEditCancel && $options.onRowEditCancel.apply($options, arguments);\n    })\n  }, $options.getColumnPT('rowEditorCancelButton'), {\n    \"data-pc-group-section\": \"rowactionbutton\"\n  }), [(openBlock(), createBlock(resolveDynamicComponent($props.column.children && $props.column.children.roweditorcancelicon || 'TimesIcon'), mergeProps({\n    \"class\": _ctx.cx('rowEditorCancelIcon')\n  }, $options.getColumnPT('rowEditorCancelIcon')), null, 16, [\"class\"]))], 16, _hoisted_5$1)), [[_directive_ripple]]) : createCommentVNode(\"\", true)], 64)) : (openBlock(), createElementBlock(Fragment, {\n    key: 8\n  }, [createTextVNode(toDisplayString($options.resolveFieldData()), 1)], 64))], 16, _hoisted_1$4));\n}\n\nscript$9.render = render$9;\n\nfunction _typeof$9(o) { \"@babel/helpers - typeof\"; return _typeof$9 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$9(o); }\nfunction _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }\nfunction _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys$9(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$9(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$9(Object(t), !0).forEach(function (r) { _defineProperty$9(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$9(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$9(obj, key, value) { key = _toPropertyKey$9(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey$9(t) { var i = _toPrimitive$9(t, \"string\"); return \"symbol\" == _typeof$9(i) ? i : String(i); }\nfunction _toPrimitive$9(t, r) { if (\"object\" != _typeof$9(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof$9(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar script$8 = {\n  name: 'BodyRow',\n  hostName: 'DataTable',\n  \"extends\": BaseComponent,\n  emits: ['rowgroup-toggle', 'row-click', 'row-dblclick', 'row-rightclick', 'row-touchend', 'row-keydown', 'row-mousedown', 'row-dragstart', 'row-dragover', 'row-dragleave', 'row-dragend', 'row-drop', 'row-toggle', 'radio-change', 'checkbox-change', 'cell-edit-init', 'cell-edit-complete', 'cell-edit-cancel', 'row-edit-init', 'row-edit-save', 'row-edit-cancel', 'editing-meta-change'],\n  props: {\n    rowData: {\n      type: Object,\n      \"default\": null\n    },\n    index: {\n      type: Number,\n      \"default\": 0\n    },\n    value: {\n      type: Array,\n      \"default\": null\n    },\n    columns: {\n      type: null,\n      \"default\": null\n    },\n    frozenRow: {\n      type: Boolean,\n      \"default\": false\n    },\n    empty: {\n      type: Boolean,\n      \"default\": false\n    },\n    rowGroupMode: {\n      type: String,\n      \"default\": null\n    },\n    groupRowsBy: {\n      type: [Array, String, Function],\n      \"default\": null\n    },\n    expandableRowGroups: {\n      type: Boolean,\n      \"default\": false\n    },\n    expandedRowGroups: {\n      type: Array,\n      \"default\": null\n    },\n    first: {\n      type: Number,\n      \"default\": 0\n    },\n    dataKey: {\n      type: [String, Function],\n      \"default\": null\n    },\n    expandedRowIcon: {\n      type: String,\n      \"default\": null\n    },\n    collapsedRowIcon: {\n      type: String,\n      \"default\": null\n    },\n    expandedRows: {\n      type: [Array, Object],\n      \"default\": null\n    },\n    selection: {\n      type: [Array, Object],\n      \"default\": null\n    },\n    selectionKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    },\n    contextMenu: {\n      type: Boolean,\n      \"default\": false\n    },\n    contextMenuSelection: {\n      type: Object,\n      \"default\": null\n    },\n    rowClass: {\n      type: null,\n      \"default\": null\n    },\n    rowStyle: {\n      type: null,\n      \"default\": null\n    },\n    rowGroupHeaderStyle: {\n      type: null,\n      \"default\": null\n    },\n    editMode: {\n      type: String,\n      \"default\": null\n    },\n    compareSelectionBy: {\n      type: String,\n      \"default\": 'deepEquals'\n    },\n    editingRows: {\n      type: Array,\n      \"default\": null\n    },\n    editingRowKeys: {\n      type: null,\n      \"default\": null\n    },\n    editingMeta: {\n      type: Object,\n      \"default\": null\n    },\n    templates: {\n      type: null,\n      \"default\": null\n    },\n    scrollable: {\n      type: Boolean,\n      \"default\": false\n    },\n    responsiveLayout: {\n      type: String,\n      \"default\": 'stack'\n    },\n    virtualScrollerContentProps: {\n      type: Object,\n      \"default\": null\n    },\n    isVirtualScrollerDisabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    expandedRowId: {\n      type: String,\n      \"default\": null\n    },\n    nameAttributeSelector: {\n      type: String,\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      d_rowExpanded: false\n    };\n  },\n  watch: {\n    expandedRows: {\n      deep: true,\n      immediate: true,\n      handler: function handler(newValue) {\n        var _this = this;\n        this.d_rowExpanded = this.dataKey ? (newValue === null || newValue === void 0 ? void 0 : newValue[ObjectUtils.resolveFieldData(this.rowData, this.dataKey)]) !== undefined : newValue === null || newValue === void 0 ? void 0 : newValue.some(function (d) {\n          return _this.equals(_this.rowData, d);\n        });\n      }\n    }\n  },\n  methods: {\n    columnProp: function columnProp(col, prop) {\n      return ObjectUtils.getVNodeProp(col, prop);\n    },\n    //@todo - update this method\n    getColumnPT: function getColumnPT(key) {\n      var columnMetaData = {\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.columnProp({}, 'pt'), key, columnMetaData));\n    },\n    //@todo - update this method\n    getBodyRowPTOptions: function getBodyRowPTOptions(key) {\n      var _this$$parentInstance;\n      var datatable = (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.$parentInstance;\n      return this.ptm(key, {\n        context: {\n          index: this.rowIndex,\n          selectable: (datatable === null || datatable === void 0 ? void 0 : datatable.rowHover) || (datatable === null || datatable === void 0 ? void 0 : datatable.selectionMode),\n          selected: this.isSelected,\n          stripedRows: (datatable === null || datatable === void 0 ? void 0 : datatable.stripedRows) || false\n        }\n      });\n    },\n    shouldRenderBodyCell: function shouldRenderBodyCell(column) {\n      var isHidden = this.columnProp(column, 'hidden');\n      if (this.rowGroupMode && !isHidden) {\n        var field = this.columnProp(column, 'field');\n        if (this.rowGroupMode === 'subheader') {\n          return this.groupRowsBy !== field;\n        } else if (this.rowGroupMode === 'rowspan') {\n          if (this.isGrouped(column)) {\n            var prevRowData = this.value[this.rowIndex - 1];\n            if (prevRowData) {\n              var currentRowFieldData = ObjectUtils.resolveFieldData(this.value[this.rowIndex], field);\n              var previousRowFieldData = ObjectUtils.resolveFieldData(prevRowData, field);\n              return currentRowFieldData !== previousRowFieldData;\n            } else {\n              return true;\n            }\n          } else {\n            return true;\n          }\n        }\n      } else {\n        return !isHidden;\n      }\n    },\n    calculateRowGroupSize: function calculateRowGroupSize(column) {\n      if (this.isGrouped(column)) {\n        var index = this.rowIndex;\n        var field = this.columnProp(column, 'field');\n        var currentRowFieldData = ObjectUtils.resolveFieldData(this.value[index], field);\n        var nextRowFieldData = currentRowFieldData;\n        var groupRowSpan = 0;\n        while (currentRowFieldData === nextRowFieldData) {\n          groupRowSpan++;\n          var nextRowData = this.value[++index];\n          if (nextRowData) {\n            nextRowFieldData = ObjectUtils.resolveFieldData(nextRowData, field);\n          } else {\n            break;\n          }\n        }\n        return groupRowSpan === 1 ? null : groupRowSpan;\n      } else {\n        return null;\n      }\n    },\n    isGrouped: function isGrouped(column) {\n      var field = this.columnProp(column, 'field');\n      if (this.groupRowsBy && field) {\n        if (Array.isArray(this.groupRowsBy)) return this.groupRowsBy.indexOf(field) > -1;else return this.groupRowsBy === field;\n      } else {\n        return false;\n      }\n    },\n    findIndexInSelection: function findIndexInSelection(data) {\n      return this.findIndex(data, this.selection);\n    },\n    findIndex: function findIndex(data, collection) {\n      var index = -1;\n      if (collection && collection.length) {\n        for (var i = 0; i < collection.length; i++) {\n          if (this.equals(data, collection[i])) {\n            index = i;\n            break;\n          }\n        }\n      }\n      return index;\n    },\n    equals: function equals(data1, data2) {\n      return this.compareSelectionBy === 'equals' ? data1 === data2 : ObjectUtils.equals(data1, data2, this.dataKey);\n    },\n    onRowGroupToggle: function onRowGroupToggle(event) {\n      this.$emit('rowgroup-toggle', {\n        originalEvent: event,\n        data: this.rowData\n      });\n    },\n    onRowClick: function onRowClick(event) {\n      this.$emit('row-click', {\n        originalEvent: event,\n        data: this.rowData,\n        index: this.rowIndex\n      });\n    },\n    onRowDblClick: function onRowDblClick(event) {\n      this.$emit('row-dblclick', {\n        originalEvent: event,\n        data: this.rowData,\n        index: this.rowIndex\n      });\n    },\n    onRowRightClick: function onRowRightClick(event) {\n      this.$emit('row-rightclick', {\n        originalEvent: event,\n        data: this.rowData,\n        index: this.rowIndex\n      });\n    },\n    onRowTouchEnd: function onRowTouchEnd(event) {\n      this.$emit('row-touchend', event);\n    },\n    onRowKeyDown: function onRowKeyDown(event) {\n      this.$emit('row-keydown', {\n        originalEvent: event,\n        data: this.rowData,\n        index: this.rowIndex\n      });\n    },\n    onRowMouseDown: function onRowMouseDown(event) {\n      this.$emit('row-mousedown', event);\n    },\n    onRowDragStart: function onRowDragStart(event) {\n      this.$emit('row-dragstart', {\n        originalEvent: event,\n        index: this.rowIndex\n      });\n    },\n    onRowDragOver: function onRowDragOver(event) {\n      this.$emit('row-dragover', {\n        originalEvent: event,\n        index: this.rowIndex\n      });\n    },\n    onRowDragLeave: function onRowDragLeave(event) {\n      this.$emit('row-dragleave', event);\n    },\n    onRowDragEnd: function onRowDragEnd(event) {\n      this.$emit('row-dragend', event);\n    },\n    onRowDrop: function onRowDrop(event) {\n      this.$emit('row-drop', event);\n    },\n    onRowToggle: function onRowToggle(event) {\n      this.d_rowExpanded = !this.d_rowExpanded;\n      this.$emit('row-toggle', _objectSpread$9(_objectSpread$9({}, event), {}, {\n        expanded: this.d_rowExpanded\n      }));\n    },\n    onRadioChange: function onRadioChange(event) {\n      this.$emit('radio-change', event);\n    },\n    onCheckboxChange: function onCheckboxChange(event) {\n      this.$emit('checkbox-change', event);\n    },\n    onCellEditInit: function onCellEditInit(event) {\n      this.$emit('cell-edit-init', event);\n    },\n    onCellEditComplete: function onCellEditComplete(event) {\n      this.$emit('cell-edit-complete', event);\n    },\n    onCellEditCancel: function onCellEditCancel(event) {\n      this.$emit('cell-edit-cancel', event);\n    },\n    onRowEditInit: function onRowEditInit(event) {\n      this.$emit('row-edit-init', event);\n    },\n    onRowEditSave: function onRowEditSave(event) {\n      this.$emit('row-edit-save', event);\n    },\n    onRowEditCancel: function onRowEditCancel(event) {\n      this.$emit('row-edit-cancel', event);\n    },\n    onEditingMetaChange: function onEditingMetaChange(event) {\n      this.$emit('editing-meta-change', event);\n    },\n    getVirtualScrollerProp: function getVirtualScrollerProp(option, options) {\n      options = options || this.virtualScrollerContentProps;\n      return options ? options[option] : null;\n    }\n  },\n  computed: {\n    rowIndex: function rowIndex() {\n      var getItemOptions = this.getVirtualScrollerProp('getItemOptions');\n      return getItemOptions ? getItemOptions(this.index).index : this.index;\n    },\n    rowStyles: function rowStyles() {\n      var _this$rowStyle;\n      return (_this$rowStyle = this.rowStyle) === null || _this$rowStyle === void 0 ? void 0 : _this$rowStyle.call(this, this.rowData);\n    },\n    rowClasses: function rowClasses() {\n      var rowStyleClass = [];\n      var columnSelectionMode = null;\n      if (this.rowClass) {\n        var rowClassValue = this.rowClass(this.rowData);\n        if (rowClassValue) {\n          rowStyleClass.push(rowClassValue);\n        }\n      }\n      if (this.columns) {\n        var _iterator = _createForOfIteratorHelper$2(this.columns),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var col = _step.value;\n            var _selectionMode = this.columnProp(col, 'selectionMode');\n            if (ObjectUtils.isNotEmpty(_selectionMode) && _selectionMode === 'multiple') {\n              columnSelectionMode = _selectionMode;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return [this.cx('row', {\n        rowData: this.rowData,\n        index: this.rowIndex,\n        columnSelectionMode: columnSelectionMode\n      }), rowStyleClass];\n    },\n    rowTabindex: function rowTabindex() {\n      if (this.selection === null && (this.selectionMode === 'single' || this.selectionMode === 'multiple')) {\n        return this.rowIndex === 0 ? 0 : -1;\n      }\n      return -1;\n    },\n    isRowEditing: function isRowEditing() {\n      if (this.rowData && this.editingRows) {\n        if (this.dataKey) return this.editingRowKeys ? this.editingRowKeys[ObjectUtils.resolveFieldData(this.rowData, this.dataKey)] !== undefined : false;else return this.findIndex(this.rowData, this.editingRows) > -1;\n      }\n      return false;\n    },\n    isRowGroupExpanded: function isRowGroupExpanded() {\n      if (this.expandableRowGroups && this.expandedRowGroups) {\n        var groupFieldValue = ObjectUtils.resolveFieldData(this.rowData, this.groupRowsBy);\n        return this.expandedRowGroups.indexOf(groupFieldValue) > -1;\n      }\n      return false;\n    },\n    isSelected: function isSelected() {\n      if (this.rowData && this.selection) {\n        if (this.dataKey) {\n          return this.selectionKeys ? this.selectionKeys[ObjectUtils.resolveFieldData(this.rowData, this.dataKey)] !== undefined : false;\n        } else {\n          if (this.selection instanceof Array) return this.findIndexInSelection(this.rowData) > -1;else return this.equals(this.rowData, this.selection);\n        }\n      }\n      return false;\n    },\n    isSelectedWithContextMenu: function isSelectedWithContextMenu() {\n      if (this.rowData && this.contextMenuSelection) {\n        return this.equals(this.rowData, this.contextMenuSelection, this.dataKey);\n      }\n      return false;\n    },\n    shouldRenderRowGroupHeader: function shouldRenderRowGroupHeader() {\n      var currentRowFieldData = ObjectUtils.resolveFieldData(this.rowData, this.groupRowsBy);\n      var prevRowData = this.value[this.rowIndex - 1];\n      if (prevRowData) {\n        var previousRowFieldData = ObjectUtils.resolveFieldData(prevRowData, this.groupRowsBy);\n        return currentRowFieldData !== previousRowFieldData;\n      } else {\n        return true;\n      }\n    },\n    shouldRenderRowGroupFooter: function shouldRenderRowGroupFooter() {\n      if (this.expandableRowGroups && !this.isRowGroupExpanded) {\n        return false;\n      } else {\n        var currentRowFieldData = ObjectUtils.resolveFieldData(this.rowData, this.groupRowsBy);\n        var nextRowData = this.value[this.rowIndex + 1];\n        if (nextRowData) {\n          var nextRowFieldData = ObjectUtils.resolveFieldData(nextRowData, this.groupRowsBy);\n          return currentRowFieldData !== nextRowFieldData;\n        } else {\n          return true;\n        }\n      }\n    },\n    columnsLength: function columnsLength() {\n      var _this2 = this;\n      if (this.columns) {\n        var hiddenColLength = 0;\n        this.columns.forEach(function (column) {\n          if (_this2.columnProp(column, 'selectionMode') === 'single') hiddenColLength--;\n          if (_this2.columnProp(column, 'hidden')) hiddenColLength++;\n        });\n        return this.columns.length - hiddenColLength;\n      }\n      return 0;\n    }\n  },\n  components: {\n    DTBodyCell: script$9,\n    ChevronDownIcon: ChevronDownIcon,\n    ChevronRightIcon: ChevronRightIcon\n  }\n};\n\nfunction _typeof$8(o) { \"@babel/helpers - typeof\"; return _typeof$8 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$8(o); }\nfunction ownKeys$8(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$8(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$8(Object(t), !0).forEach(function (r) { _defineProperty$8(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$8(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$8(obj, key, value) { key = _toPropertyKey$8(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey$8(t) { var i = _toPrimitive$8(t, \"string\"); return \"symbol\" == _typeof$8(i) ? i : String(i); }\nfunction _toPrimitive$8(t, r) { if (\"object\" != _typeof$8(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof$8(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1$3 = [\"colspan\"];\nvar _hoisted_2$1 = [\"tabindex\", \"aria-selected\", \"data-p-index\", \"data-p-selectable-row\", \"data-p-highlight\", \"data-p-highlight-contextmenu\"];\nvar _hoisted_3$1 = [\"id\"];\nvar _hoisted_4 = [\"colspan\"];\nvar _hoisted_5 = [\"colspan\"];\nvar _hoisted_6 = [\"colspan\"];\nfunction render$8(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_ChevronDownIcon = resolveComponent(\"ChevronDownIcon\");\n  var _component_ChevronRightIcon = resolveComponent(\"ChevronRightIcon\");\n  var _component_DTBodyCell = resolveComponent(\"DTBodyCell\");\n  return !$props.empty ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [$props.templates['groupheader'] && $props.rowGroupMode === 'subheader' && $options.shouldRenderRowGroupHeader ? (openBlock(), createElementBlock(\"tr\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('rowGroupHeader'),\n    style: $props.rowGroupHeaderStyle,\n    role: \"row\"\n  }, _ctx.ptm('rowGroupHeader')), [createElementVNode(\"td\", mergeProps({\n    colspan: $options.columnsLength - 1\n  }, _objectSpread$8(_objectSpread$8({}, $options.getColumnPT('bodycell')), _ctx.ptm('rowGroupHeaderCell'))), [$props.expandableRowGroups ? (openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('rowGroupToggler'),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.onRowGroupToggle && $options.onRowGroupToggle.apply($options, arguments);\n    }),\n    type: \"button\"\n  }, _ctx.ptm('rowGroupToggler')), [$props.templates['rowgrouptogglericon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['rowgrouptogglericon']), {\n    key: 0,\n    expanded: $options.isRowGroupExpanded\n  }, null, 8, [\"expanded\"])) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [$options.isRowGroupExpanded && $props.expandedRowIcon ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 0,\n    \"class\": [_ctx.cx('rowGroupTogglerIcon'), $props.expandedRowIcon]\n  }, _ctx.ptm('rowGroupTogglerIcon')), null, 16)) : $options.isRowGroupExpanded && !$props.expandedRowIcon ? (openBlock(), createBlock(_component_ChevronDownIcon, mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('rowGroupTogglerIcon')\n  }, _ctx.ptm('rowGroupTogglerIcon')), null, 16, [\"class\"])) : !$options.isRowGroupExpanded && $props.collapsedRowIcon ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 2,\n    \"class\": [_ctx.cx('rowGroupTogglerIcon'), $props.collapsedRowIcon]\n  }, _ctx.ptm('rowGroupTogglerIcon')), null, 16)) : !$options.isRowGroupExpanded && !$props.collapsedRowIcon ? (openBlock(), createBlock(_component_ChevronRightIcon, mergeProps({\n    key: 3,\n    \"class\": _ctx.cx('rowGroupTogglerIcon')\n  }, _ctx.ptm('rowGroupTogglerIcon')), null, 16, [\"class\"])) : createCommentVNode(\"\", true)], 64))], 16)) : createCommentVNode(\"\", true), (openBlock(), createBlock(resolveDynamicComponent($props.templates['groupheader']), {\n    data: $props.rowData,\n    index: $options.rowIndex\n  }, null, 8, [\"data\", \"index\"]))], 16, _hoisted_1$3)], 16)) : createCommentVNode(\"\", true), ($props.expandableRowGroups ? $options.isRowGroupExpanded : true) ? (openBlock(), createElementBlock(\"tr\", mergeProps({\n    key: 1,\n    \"class\": $options.rowClasses,\n    style: $options.rowStyles,\n    tabindex: $options.rowTabindex,\n    role: \"row\",\n    \"aria-selected\": $props.selectionMode ? $options.isSelected : null,\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.onRowClick && $options.onRowClick.apply($options, arguments);\n    }),\n    onDblclick: _cache[2] || (_cache[2] = function () {\n      return $options.onRowDblClick && $options.onRowDblClick.apply($options, arguments);\n    }),\n    onContextmenu: _cache[3] || (_cache[3] = function () {\n      return $options.onRowRightClick && $options.onRowRightClick.apply($options, arguments);\n    }),\n    onTouchend: _cache[4] || (_cache[4] = function () {\n      return $options.onRowTouchEnd && $options.onRowTouchEnd.apply($options, arguments);\n    }),\n    onKeydown: _cache[5] || (_cache[5] = withModifiers(function () {\n      return $options.onRowKeyDown && $options.onRowKeyDown.apply($options, arguments);\n    }, [\"self\"])),\n    onMousedown: _cache[6] || (_cache[6] = function () {\n      return $options.onRowMouseDown && $options.onRowMouseDown.apply($options, arguments);\n    }),\n    onDragstart: _cache[7] || (_cache[7] = function () {\n      return $options.onRowDragStart && $options.onRowDragStart.apply($options, arguments);\n    }),\n    onDragover: _cache[8] || (_cache[8] = function () {\n      return $options.onRowDragOver && $options.onRowDragOver.apply($options, arguments);\n    }),\n    onDragleave: _cache[9] || (_cache[9] = function () {\n      return $options.onRowDragLeave && $options.onRowDragLeave.apply($options, arguments);\n    }),\n    onDragend: _cache[10] || (_cache[10] = function () {\n      return $options.onRowDragEnd && $options.onRowDragEnd.apply($options, arguments);\n    }),\n    onDrop: _cache[11] || (_cache[11] = function () {\n      return $options.onRowDrop && $options.onRowDrop.apply($options, arguments);\n    })\n  }, $options.getBodyRowPTOptions('bodyRow'), {\n    \"data-p-index\": $options.rowIndex,\n    \"data-p-selectable-row\": $props.selectionMode ? true : false,\n    \"data-p-highlight\": $props.selection && $options.isSelected,\n    \"data-p-highlight-contextmenu\": $props.contextMenuSelection && $options.isSelectedWithContextMenu\n  }), [(openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, function (col, i) {\n    return openBlock(), createElementBlock(Fragment, null, [$options.shouldRenderBodyCell(col) ? (openBlock(), createBlock(_component_DTBodyCell, {\n      key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || i,\n      rowData: $props.rowData,\n      column: col,\n      rowIndex: $options.rowIndex,\n      index: i,\n      selected: $options.isSelected,\n      frozenRow: $props.frozenRow,\n      rowspan: $props.rowGroupMode === 'rowspan' ? $options.calculateRowGroupSize(col) : null,\n      editMode: $props.editMode,\n      editing: $props.editMode === 'row' && $options.isRowEditing,\n      editingMeta: $props.editingMeta,\n      responsiveLayout: $props.responsiveLayout,\n      virtualScrollerContentProps: $props.virtualScrollerContentProps,\n      ariaControls: $props.expandedRowId + '_' + $options.rowIndex + '_expansion',\n      name: $props.nameAttributeSelector,\n      isRowExpanded: $data.d_rowExpanded,\n      expandedRowIcon: $props.expandedRowIcon,\n      collapsedRowIcon: $props.collapsedRowIcon,\n      onRadioChange: $options.onRadioChange,\n      onCheckboxChange: $options.onCheckboxChange,\n      onRowToggle: $options.onRowToggle,\n      onCellEditInit: $options.onCellEditInit,\n      onCellEditComplete: $options.onCellEditComplete,\n      onCellEditCancel: $options.onCellEditCancel,\n      onRowEditInit: $options.onRowEditInit,\n      onRowEditSave: $options.onRowEditSave,\n      onRowEditCancel: $options.onRowEditCancel,\n      onEditingMetaChange: $options.onEditingMetaChange,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"rowData\", \"column\", \"rowIndex\", \"index\", \"selected\", \"frozenRow\", \"rowspan\", \"editMode\", \"editing\", \"editingMeta\", \"responsiveLayout\", \"virtualScrollerContentProps\", \"ariaControls\", \"name\", \"isRowExpanded\", \"expandedRowIcon\", \"collapsedRowIcon\", \"onRadioChange\", \"onCheckboxChange\", \"onRowToggle\", \"onCellEditInit\", \"onCellEditComplete\", \"onCellEditCancel\", \"onRowEditInit\", \"onRowEditSave\", \"onRowEditCancel\", \"onEditingMetaChange\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 64);\n  }), 256))], 16, _hoisted_2$1)) : createCommentVNode(\"\", true), $props.templates['expansion'] && $props.expandedRows && $data.d_rowExpanded ? (openBlock(), createElementBlock(\"tr\", mergeProps({\n    key: 2,\n    id: $props.expandedRowId + '_' + $options.rowIndex + '_expansion',\n    \"class\": _ctx.cx('rowExpansion'),\n    role: \"row\"\n  }, _ctx.ptm('rowExpansion')), [createElementVNode(\"td\", mergeProps({\n    colspan: $options.columnsLength\n  }, _objectSpread$8(_objectSpread$8({}, $options.getColumnPT('bodycell')), _ctx.ptm('rowExpansionCell'))), [(openBlock(), createBlock(resolveDynamicComponent($props.templates['expansion']), {\n    data: $props.rowData,\n    index: $options.rowIndex\n  }, null, 8, [\"data\", \"index\"]))], 16, _hoisted_4)], 16, _hoisted_3$1)) : createCommentVNode(\"\", true), $props.templates['groupfooter'] && $props.rowGroupMode === 'subheader' && $options.shouldRenderRowGroupFooter ? (openBlock(), createElementBlock(\"tr\", mergeProps({\n    key: 3,\n    \"class\": _ctx.cx('rowGroupFooter'),\n    role: \"row\"\n  }, _ctx.ptm('rowGroupFooter')), [createElementVNode(\"td\", mergeProps({\n    colspan: $options.columnsLength - 1\n  }, _objectSpread$8(_objectSpread$8({}, $options.getColumnPT('bodycell')), _ctx.ptm('rowGroupFooterCell'))), [(openBlock(), createBlock(resolveDynamicComponent($props.templates['groupfooter']), {\n    data: $props.rowData,\n    index: $options.rowIndex\n  }, null, 8, [\"data\", \"index\"]))], 16, _hoisted_5)], 16)) : createCommentVNode(\"\", true)], 64)) : (openBlock(), createElementBlock(\"tr\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('emptyMessage'),\n    role: \"row\"\n  }, _ctx.ptm('emptyMessage')), [createElementVNode(\"td\", mergeProps({\n    colspan: $options.columnsLength\n  }, _objectSpread$8(_objectSpread$8({}, $options.getColumnPT('bodycell')), _ctx.ptm('emptyMessageCell'))), [$props.templates.empty ? (openBlock(), createBlock(resolveDynamicComponent($props.templates.empty), {\n    key: 0\n  })) : createCommentVNode(\"\", true)], 16, _hoisted_6)], 16));\n}\n\nscript$8.render = render$8;\n\nvar script$7 = {\n  name: 'TableBody',\n  hostName: 'DataTable',\n  \"extends\": BaseComponent,\n  emits: ['rowgroup-toggle', 'row-click', 'row-dblclick', 'row-rightclick', 'row-touchend', 'row-keydown', 'row-mousedown', 'row-dragstart', 'row-dragover', 'row-dragleave', 'row-dragend', 'row-drop', 'row-toggle', 'radio-change', 'checkbox-change', 'cell-edit-init', 'cell-edit-complete', 'cell-edit-cancel', 'row-edit-init', 'row-edit-save', 'row-edit-cancel', 'editing-meta-change'],\n  props: {\n    value: {\n      type: Array,\n      \"default\": null\n    },\n    columns: {\n      type: null,\n      \"default\": null\n    },\n    frozenRow: {\n      type: Boolean,\n      \"default\": false\n    },\n    empty: {\n      type: Boolean,\n      \"default\": false\n    },\n    rowGroupMode: {\n      type: String,\n      \"default\": null\n    },\n    groupRowsBy: {\n      type: [Array, String, Function],\n      \"default\": null\n    },\n    expandableRowGroups: {\n      type: Boolean,\n      \"default\": false\n    },\n    expandedRowGroups: {\n      type: Array,\n      \"default\": null\n    },\n    first: {\n      type: Number,\n      \"default\": 0\n    },\n    dataKey: {\n      type: [String, Function],\n      \"default\": null\n    },\n    expandedRowIcon: {\n      type: String,\n      \"default\": null\n    },\n    collapsedRowIcon: {\n      type: String,\n      \"default\": null\n    },\n    expandedRows: {\n      type: [Array, Object],\n      \"default\": null\n    },\n    selection: {\n      type: [Array, Object],\n      \"default\": null\n    },\n    selectionKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    },\n    contextMenu: {\n      type: Boolean,\n      \"default\": false\n    },\n    contextMenuSelection: {\n      type: Object,\n      \"default\": null\n    },\n    rowClass: {\n      type: null,\n      \"default\": null\n    },\n    rowStyle: {\n      type: null,\n      \"default\": null\n    },\n    editMode: {\n      type: String,\n      \"default\": null\n    },\n    compareSelectionBy: {\n      type: String,\n      \"default\": 'deepEquals'\n    },\n    editingRows: {\n      type: Array,\n      \"default\": null\n    },\n    editingRowKeys: {\n      type: null,\n      \"default\": null\n    },\n    editingMeta: {\n      type: Object,\n      \"default\": null\n    },\n    templates: {\n      type: null,\n      \"default\": null\n    },\n    scrollable: {\n      type: Boolean,\n      \"default\": false\n    },\n    responsiveLayout: {\n      type: String,\n      \"default\": 'stack'\n    },\n    virtualScrollerContentProps: {\n      type: Object,\n      \"default\": null\n    },\n    isVirtualScrollerDisabled: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      rowGroupHeaderStyleObject: {}\n    };\n  },\n  mounted: function mounted() {\n    if (this.frozenRow) {\n      this.updateFrozenRowStickyPosition();\n    }\n    if (this.scrollable && this.rowGroupMode === 'subheader') {\n      this.updateFrozenRowGroupHeaderStickyPosition();\n    }\n  },\n  updated: function updated() {\n    if (this.frozenRow) {\n      this.updateFrozenRowStickyPosition();\n    }\n    if (this.scrollable && this.rowGroupMode === 'subheader') {\n      this.updateFrozenRowGroupHeaderStickyPosition();\n    }\n  },\n  methods: {\n    getRowKey: function getRowKey(rowData, rowIndex) {\n      return this.dataKey ? ObjectUtils.resolveFieldData(rowData, this.dataKey) : rowIndex;\n    },\n    updateFrozenRowStickyPosition: function updateFrozenRowStickyPosition() {\n      this.$el.style.top = DomHandler.getOuterHeight(this.$el.previousElementSibling) + 'px';\n    },\n    updateFrozenRowGroupHeaderStickyPosition: function updateFrozenRowGroupHeaderStickyPosition() {\n      var tableHeaderHeight = DomHandler.getOuterHeight(this.$el.previousElementSibling);\n      this.rowGroupHeaderStyleObject.top = tableHeaderHeight + 'px';\n    },\n    getVirtualScrollerProp: function getVirtualScrollerProp(option, options) {\n      options = options || this.virtualScrollerContentProps;\n      return options ? options[option] : null;\n    },\n    bodyRef: function bodyRef(el) {\n      // For VirtualScroller\n      var contentRef = this.getVirtualScrollerProp('contentRef');\n      contentRef && contentRef(el);\n    }\n  },\n  computed: {\n    rowGroupHeaderStyle: function rowGroupHeaderStyle() {\n      if (this.scrollable) {\n        return {\n          top: this.rowGroupHeaderStyleObject.top\n        };\n      }\n      return null;\n    },\n    bodyContentStyle: function bodyContentStyle() {\n      return this.getVirtualScrollerProp('contentStyle');\n    },\n    ptmTBodyOptions: function ptmTBodyOptions() {\n      var _this$$parentInstance;\n      return {\n        context: {\n          scrollable: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 || (_this$$parentInstance = _this$$parentInstance.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.scrollable\n        }\n      };\n    },\n    expandedRowId: function expandedRowId() {\n      return UniqueComponentId();\n    },\n    nameAttributeSelector: function nameAttributeSelector() {\n      return UniqueComponentId();\n    }\n  },\n  components: {\n    DTBodyRow: script$8\n  }\n};\n\nfunction render$7(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_DTBodyRow = resolveComponent(\"DTBodyRow\");\n  return openBlock(), createElementBlock(\"tbody\", mergeProps({\n    ref: $options.bodyRef,\n    \"class\": _ctx.cx('tbody'),\n    role: \"rowgroup\",\n    style: $options.bodyContentStyle\n  }, _ctx.ptm('tbody', $options.ptmTBodyOptions)), [!$props.empty ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList($props.value, function (rowData, rowIndex) {\n    return openBlock(), createBlock(_component_DTBodyRow, {\n      key: $options.getRowKey(rowData, rowIndex),\n      rowData: rowData,\n      index: rowIndex,\n      value: $props.value,\n      columns: $props.columns,\n      frozenRow: $props.frozenRow,\n      empty: $props.empty,\n      first: $props.first,\n      dataKey: $props.dataKey,\n      selection: $props.selection,\n      selectionKeys: $props.selectionKeys,\n      selectionMode: $props.selectionMode,\n      contextMenu: $props.contextMenu,\n      contextMenuSelection: $props.contextMenuSelection,\n      rowGroupMode: $props.rowGroupMode,\n      groupRowsBy: $props.groupRowsBy,\n      expandableRowGroups: $props.expandableRowGroups,\n      rowClass: $props.rowClass,\n      rowStyle: $props.rowStyle,\n      editMode: $props.editMode,\n      compareSelectionBy: $props.compareSelectionBy,\n      scrollable: $props.scrollable,\n      expandedRowIcon: $props.expandedRowIcon,\n      collapsedRowIcon: $props.collapsedRowIcon,\n      expandedRows: $props.expandedRows,\n      expandedRowGroups: $props.expandedRowGroups,\n      editingRows: $props.editingRows,\n      editingRowKeys: $props.editingRowKeys,\n      templates: $props.templates,\n      responsiveLayout: $props.responsiveLayout,\n      virtualScrollerContentProps: $props.virtualScrollerContentProps,\n      isVirtualScrollerDisabled: $props.isVirtualScrollerDisabled,\n      editingMeta: $props.editingMeta,\n      rowGroupHeaderStyle: $options.rowGroupHeaderStyle,\n      expandedRowId: $options.expandedRowId,\n      nameAttributeSelector: $options.nameAttributeSelector,\n      onRowgroupToggle: _cache[0] || (_cache[0] = function ($event) {\n        return _ctx.$emit('rowgroup-toggle', $event);\n      }),\n      onRowClick: _cache[1] || (_cache[1] = function ($event) {\n        return _ctx.$emit('row-click', $event);\n      }),\n      onRowDblclick: _cache[2] || (_cache[2] = function ($event) {\n        return _ctx.$emit('row-dblclick', $event);\n      }),\n      onRowRightclick: _cache[3] || (_cache[3] = function ($event) {\n        return _ctx.$emit('row-rightclick', $event);\n      }),\n      onRowTouchend: _cache[4] || (_cache[4] = function ($event) {\n        return _ctx.$emit('row-touchend', $event);\n      }),\n      onRowKeydown: _cache[5] || (_cache[5] = function ($event) {\n        return _ctx.$emit('row-keydown', $event);\n      }),\n      onRowMousedown: _cache[6] || (_cache[6] = function ($event) {\n        return _ctx.$emit('row-mousedown', $event);\n      }),\n      onRowDragstart: _cache[7] || (_cache[7] = function ($event) {\n        return _ctx.$emit('row-dragstart', $event);\n      }),\n      onRowDragover: _cache[8] || (_cache[8] = function ($event) {\n        return _ctx.$emit('row-dragover', $event);\n      }),\n      onRowDragleave: _cache[9] || (_cache[9] = function ($event) {\n        return _ctx.$emit('row-dragleave', $event);\n      }),\n      onRowDragend: _cache[10] || (_cache[10] = function ($event) {\n        return _ctx.$emit('row-dragend', $event);\n      }),\n      onRowDrop: _cache[11] || (_cache[11] = function ($event) {\n        return _ctx.$emit('row-drop', $event);\n      }),\n      onRowToggle: _cache[12] || (_cache[12] = function ($event) {\n        return _ctx.$emit('row-toggle', $event);\n      }),\n      onRadioChange: _cache[13] || (_cache[13] = function ($event) {\n        return _ctx.$emit('radio-change', $event);\n      }),\n      onCheckboxChange: _cache[14] || (_cache[14] = function ($event) {\n        return _ctx.$emit('checkbox-change', $event);\n      }),\n      onCellEditInit: _cache[15] || (_cache[15] = function ($event) {\n        return _ctx.$emit('cell-edit-init', $event);\n      }),\n      onCellEditComplete: _cache[16] || (_cache[16] = function ($event) {\n        return _ctx.$emit('cell-edit-complete', $event);\n      }),\n      onCellEditCancel: _cache[17] || (_cache[17] = function ($event) {\n        return _ctx.$emit('cell-edit-cancel', $event);\n      }),\n      onRowEditInit: _cache[18] || (_cache[18] = function ($event) {\n        return _ctx.$emit('row-edit-init', $event);\n      }),\n      onRowEditSave: _cache[19] || (_cache[19] = function ($event) {\n        return _ctx.$emit('row-edit-save', $event);\n      }),\n      onRowEditCancel: _cache[20] || (_cache[20] = function ($event) {\n        return _ctx.$emit('row-edit-cancel', $event);\n      }),\n      onEditingMetaChange: _cache[21] || (_cache[21] = function ($event) {\n        return _ctx.$emit('editing-meta-change', $event);\n      }),\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"rowData\", \"index\", \"value\", \"columns\", \"frozenRow\", \"empty\", \"first\", \"dataKey\", \"selection\", \"selectionKeys\", \"selectionMode\", \"contextMenu\", \"contextMenuSelection\", \"rowGroupMode\", \"groupRowsBy\", \"expandableRowGroups\", \"rowClass\", \"rowStyle\", \"editMode\", \"compareSelectionBy\", \"scrollable\", \"expandedRowIcon\", \"collapsedRowIcon\", \"expandedRows\", \"expandedRowGroups\", \"editingRows\", \"editingRowKeys\", \"templates\", \"responsiveLayout\", \"virtualScrollerContentProps\", \"isVirtualScrollerDisabled\", \"editingMeta\", \"rowGroupHeaderStyle\", \"expandedRowId\", \"nameAttributeSelector\", \"unstyled\", \"pt\"]);\n  }), 128)) : (openBlock(), createBlock(_component_DTBodyRow, {\n    key: 1,\n    empty: $props.empty,\n    columns: $props.columns,\n    templates: $props.templates\n  }, null, 8, [\"empty\", \"columns\", \"templates\"]))], 16);\n}\n\nscript$7.render = render$7;\n\nvar script$6 = {\n  name: 'FooterCell',\n  hostName: 'DataTable',\n  \"extends\": BaseComponent,\n  props: {\n    column: {\n      type: Object,\n      \"default\": null\n    },\n    index: {\n      type: Number,\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      styleObject: {}\n    };\n  },\n  mounted: function mounted() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  updated: function updated() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  methods: {\n    columnProp: function columnProp(prop) {\n      return ObjectUtils.getVNodeProp(this.column, prop);\n    },\n    getColumnPT: function getColumnPT(key) {\n      var _this$$parentInstance, _this$$parentInstance2;\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: this.index,\n          size: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 || (_this$$parentInstance = _this$$parentInstance.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.size,\n          showGridlines: ((_this$$parentInstance2 = this.$parentInstance) === null || _this$$parentInstance2 === void 0 || (_this$$parentInstance2 = _this$$parentInstance2.$parentInstance) === null || _this$$parentInstance2 === void 0 ? void 0 : _this$$parentInstance2.showGridlines) || false\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined;\n    },\n    updateStickyPosition: function updateStickyPosition() {\n      if (this.columnProp('frozen')) {\n        var align = this.columnProp('alignFrozen');\n        if (align === 'right') {\n          var right = 0;\n          var next = DomHandler.getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (next) {\n            right = DomHandler.getOuterWidth(next) + parseFloat(next.style.right || 0);\n          }\n          this.styleObject.right = right + 'px';\n        } else {\n          var left = 0;\n          var prev = DomHandler.getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (prev) {\n            left = DomHandler.getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n          }\n          this.styleObject.left = left + 'px';\n        }\n      }\n    }\n  },\n  computed: {\n    containerClass: function containerClass() {\n      return [this.columnProp('footerClass'), this.columnProp('class'), this.cx('footerCell')];\n    },\n    containerStyle: function containerStyle() {\n      var bodyStyle = this.columnProp('footerStyle');\n      var columnStyle = this.columnProp('style');\n      return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n    }\n  }\n};\n\nfunction _typeof$7(o) { \"@babel/helpers - typeof\"; return _typeof$7 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$7(o); }\nfunction ownKeys$7(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$7(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$7(Object(t), !0).forEach(function (r) { _defineProperty$7(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$7(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$7(obj, key, value) { key = _toPropertyKey$7(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey$7(t) { var i = _toPrimitive$7(t, \"string\"); return \"symbol\" == _typeof$7(i) ? i : String(i); }\nfunction _toPrimitive$7(t, r) { if (\"object\" != _typeof$7(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof$7(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1$2 = [\"colspan\", \"rowspan\", \"data-p-frozen-column\"];\nfunction render$6(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"td\", mergeProps({\n    style: $options.containerStyle,\n    \"class\": $options.containerClass,\n    role: \"cell\",\n    colspan: $options.columnProp('colspan'),\n    rowspan: $options.columnProp('rowspan')\n  }, _objectSpread$7(_objectSpread$7({}, $options.getColumnPT('root')), $options.getColumnPT('footerCell')), {\n    \"data-p-frozen-column\": $options.columnProp('frozen')\n  }), [$props.column.children && $props.column.children.footer ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.footer), {\n    key: 0,\n    column: $props.column\n  }, null, 8, [\"column\"])) : createCommentVNode(\"\", true), createTextVNode(\" \" + toDisplayString($options.columnProp('footer')), 1)], 16, _hoisted_1$2);\n}\n\nscript$6.render = render$6;\n\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }\nfunction _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar script$5 = {\n  name: 'TableFooter',\n  hostName: 'DataTable',\n  \"extends\": BaseComponent,\n  props: {\n    columnGroup: {\n      type: null,\n      \"default\": null\n    },\n    columns: {\n      type: Object,\n      \"default\": null\n    }\n  },\n  provide: function provide() {\n    return {\n      $rows: this.d_footerRows,\n      $columns: this.d_footerColumns\n    };\n  },\n  data: function data() {\n    return {\n      d_footerRows: new HelperSet({\n        type: 'Row'\n      }),\n      d_footerColumns: new HelperSet({\n        type: 'Column'\n      })\n    };\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.d_footerRows.clear();\n    this.d_footerColumns.clear();\n  },\n  methods: {\n    columnProp: function columnProp(col, prop) {\n      return ObjectUtils.getVNodeProp(col, prop);\n    },\n    getColumnGroupPT: function getColumnGroupPT(key) {\n      var columnGroupMetaData = {\n        props: this.getColumnGroupProps(),\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          type: 'footer',\n          scrollable: this.ptmTFootOptions.context.scrollable\n        }\n      };\n      return mergeProps(this.ptm(\"columnGroup.\".concat(key), {\n        columnGroup: columnGroupMetaData\n      }), this.ptm(\"columnGroup.\".concat(key), columnGroupMetaData), this.ptmo(this.getColumnGroupProps(), key, columnGroupMetaData));\n    },\n    getColumnGroupProps: function getColumnGroupProps() {\n      return this.columnGroup && this.columnGroup.props && this.columnGroup.props.pt ? this.columnGroup.props.pt : undefined; //@todo\n    },\n    getRowPT: function getRowPT(row, key, index) {\n      var rowMetaData = {\n        props: row.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: index\n        }\n      };\n      return mergeProps(this.ptm(\"row.\".concat(key), {\n        row: rowMetaData\n      }), this.ptm(\"row.\".concat(key), rowMetaData), this.ptmo(this.getRowProp(row), key, rowMetaData));\n    },\n    getRowProp: function getRowProp(row) {\n      return row.props && row.props.pt ? row.props.pt : undefined; //@todo\n    },\n    getFooterRows: function getFooterRows() {\n      var _this$d_footerRows;\n      return (_this$d_footerRows = this.d_footerRows) === null || _this$d_footerRows === void 0 ? void 0 : _this$d_footerRows.get(this.columnGroup, this.columnGroup.children);\n    },\n    getFooterColumns: function getFooterColumns(row) {\n      var _this$d_footerColumns;\n      return (_this$d_footerColumns = this.d_footerColumns) === null || _this$d_footerColumns === void 0 ? void 0 : _this$d_footerColumns.get(row, row.children);\n    }\n  },\n  computed: {\n    hasFooter: function hasFooter() {\n      var hasFooter = false;\n      if (this.columnGroup) {\n        hasFooter = true;\n      } else if (this.columns) {\n        var _iterator = _createForOfIteratorHelper$1(this.columns),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var col = _step.value;\n            if (this.columnProp(col, 'footer') || col.children && col.children.footer) {\n              hasFooter = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return hasFooter;\n    },\n    ptmTFootOptions: function ptmTFootOptions() {\n      var _this$$parentInstance;\n      return {\n        context: {\n          scrollable: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 || (_this$$parentInstance = _this$$parentInstance.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.scrollable\n        }\n      };\n    }\n  },\n  components: {\n    DTFooterCell: script$6\n  }\n};\n\nfunction _typeof$6(o) { \"@babel/helpers - typeof\"; return _typeof$6 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$6(o); }\nfunction ownKeys$6(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$6(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$6(Object(t), !0).forEach(function (r) { _defineProperty$6(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$6(obj, key, value) { key = _toPropertyKey$6(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey$6(t) { var i = _toPrimitive$6(t, \"string\"); return \"symbol\" == _typeof$6(i) ? i : String(i); }\nfunction _toPrimitive$6(t, r) { if (\"object\" != _typeof$6(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof$6(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction render$5(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_DTFooterCell = resolveComponent(\"DTFooterCell\");\n  return $options.hasFooter ? (openBlock(), createElementBlock(\"tfoot\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('tfoot'),\n    style: _ctx.sx('tfoot'),\n    role: \"rowgroup\"\n  }, $props.columnGroup ? _objectSpread$6(_objectSpread$6({}, _ctx.ptm('tfoot', $options.ptmTFootOptions)), $options.getColumnGroupPT('root')) : _ctx.ptm('tfoot', $options.ptmTFootOptions), {\n    \"data-pc-section\": \"tfoot\"\n  }), [!$props.columnGroup ? (openBlock(), createElementBlock(\"tr\", mergeProps({\n    key: 0,\n    role: \"row\"\n  }, _ctx.ptm('footerRow')), [(openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, function (col, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || i\n    }, [!$options.columnProp(col, 'hidden') ? (openBlock(), createBlock(_component_DTFooterCell, {\n      key: 0,\n      column: col,\n      pt: _ctx.pt\n    }, null, 8, [\"column\", \"pt\"])) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16)) : (openBlock(true), createElementBlock(Fragment, {\n    key: 1\n  }, renderList($options.getFooterRows(), function (row, i) {\n    return openBlock(), createElementBlock(\"tr\", mergeProps({\n      key: i,\n      role: \"row\"\n    }, _objectSpread$6(_objectSpread$6({}, _ctx.ptm('footerRow')), $options.getRowPT(row, 'root', i))), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.getFooterColumns(row), function (col, j) {\n      return openBlock(), createElementBlock(Fragment, {\n        key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || j\n      }, [!$options.columnProp(col, 'hidden') ? (openBlock(), createBlock(_component_DTFooterCell, {\n        key: 0,\n        column: col,\n        index: i,\n        pt: _ctx.pt\n      }, null, 8, [\"column\", \"index\", \"pt\"])) : createCommentVNode(\"\", true)], 64);\n    }), 128))], 16);\n  }), 128))], 16)) : createCommentVNode(\"\", true);\n}\n\nscript$5.render = render$5;\n\nfunction _typeof$5(o) { \"@babel/helpers - typeof\"; return _typeof$5 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$5(o); }\nfunction ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) { _defineProperty$5(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$5(obj, key, value) { key = _toPropertyKey$5(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey$5(t) { var i = _toPrimitive$5(t, \"string\"); return \"symbol\" == _typeof$5(i) ? i : String(i); }\nfunction _toPrimitive$5(t, r) { if (\"object\" != _typeof$5(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof$5(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar script$4 = {\n  name: 'ColumnFilter',\n  hostName: 'DataTable',\n  \"extends\": BaseComponent,\n  emits: ['filter-change', 'filter-apply', 'operator-change', 'matchmode-change', 'constraint-add', 'constraint-remove', 'filter-clear', 'apply-click'],\n  props: {\n    field: {\n      type: String,\n      \"default\": null\n    },\n    type: {\n      type: String,\n      \"default\": 'text'\n    },\n    display: {\n      type: String,\n      \"default\": null\n    },\n    showMenu: {\n      type: Boolean,\n      \"default\": true\n    },\n    matchMode: {\n      type: String,\n      \"default\": null\n    },\n    showOperator: {\n      type: Boolean,\n      \"default\": true\n    },\n    showClearButton: {\n      type: Boolean,\n      \"default\": true\n    },\n    showApplyButton: {\n      type: Boolean,\n      \"default\": true\n    },\n    showMatchModes: {\n      type: Boolean,\n      \"default\": true\n    },\n    showAddButton: {\n      type: Boolean,\n      \"default\": true\n    },\n    matchModeOptions: {\n      type: Array,\n      \"default\": null\n    },\n    maxConstraints: {\n      type: Number,\n      \"default\": 2\n    },\n    filterElement: {\n      type: Function,\n      \"default\": null\n    },\n    filterHeaderTemplate: {\n      type: Function,\n      \"default\": null\n    },\n    filterFooterTemplate: {\n      type: Function,\n      \"default\": null\n    },\n    filterClearTemplate: {\n      type: Function,\n      \"default\": null\n    },\n    filterApplyTemplate: {\n      type: Function,\n      \"default\": null\n    },\n    filterIconTemplate: {\n      type: Function,\n      \"default\": null\n    },\n    filterAddIconTemplate: {\n      type: Function,\n      \"default\": null\n    },\n    filterRemoveIconTemplate: {\n      type: Function,\n      \"default\": null\n    },\n    filterClearIconTemplate: {\n      type: Function,\n      \"default\": null\n    },\n    filters: {\n      type: Object,\n      \"default\": null\n    },\n    filtersStore: {\n      type: Object,\n      \"default\": null\n    },\n    filterMenuClass: {\n      type: String,\n      \"default\": null\n    },\n    filterMenuStyle: {\n      type: null,\n      \"default\": null\n    },\n    filterInputProps: {\n      type: null,\n      \"default\": null\n    },\n    column: null\n  },\n  data: function data() {\n    return {\n      id: this.$attrs.id,\n      overlayVisible: false,\n      defaultMatchMode: null,\n      defaultOperator: null\n    };\n  },\n  watch: {\n    '$attrs.id': function $attrsId(newValue) {\n      this.id = newValue || UniqueComponentId();\n    }\n  },\n  overlay: null,\n  selfClick: false,\n  overlayEventListener: null,\n  beforeUnmount: function beforeUnmount() {\n    if (this.overlayEventListener) {\n      OverlayEventBus.off('overlay-click', this.overlayEventListener);\n      this.overlayEventListener = null;\n    }\n    if (this.overlay) {\n      ZIndexUtils.clear(this.overlay);\n      this.onOverlayHide();\n    }\n  },\n  mounted: function mounted() {\n    this.id = this.id || UniqueComponentId();\n    if (this.filters && this.filters[this.field]) {\n      var fieldFilters = this.filters[this.field];\n      if (fieldFilters.operator) {\n        this.defaultMatchMode = fieldFilters.constraints[0].matchMode;\n        this.defaultOperator = fieldFilters.operator;\n      } else {\n        this.defaultMatchMode = this.filters[this.field].matchMode;\n      }\n    }\n  },\n  methods: {\n    getColumnPT: function getColumnPT(key, params) {\n      var columnMetaData = _objectSpread$5({\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        }\n      }, params);\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined;\n    },\n    ptmFilterRowItemOptions: function ptmFilterRowItemOptions(matchMode) {\n      return {\n        context: {\n          highlighted: matchMode && this.isRowMatchModeSelected(matchMode.value)\n        }\n      };\n    },\n    clearFilter: function clearFilter() {\n      var _filters = _objectSpread$5({}, this.filters);\n      if (_filters[this.field].operator) {\n        _filters[this.field].constraints.splice(1);\n        _filters[this.field].operator = this.defaultOperator;\n        _filters[this.field].constraints[0] = {\n          value: null,\n          matchMode: this.defaultMatchMode\n        };\n      } else {\n        _filters[this.field].value = null;\n        _filters[this.field].matchMode = this.defaultMatchMode;\n      }\n      this.$emit('filter-clear');\n      this.$emit('filter-change', _filters);\n      this.$emit('filter-apply');\n      this.hide();\n    },\n    applyFilter: function applyFilter() {\n      this.$emit('apply-click', {\n        field: this.field,\n        constraints: this.filters[this.field]\n      });\n      this.$emit('filter-apply');\n      this.hide();\n    },\n    hasFilter: function hasFilter() {\n      if (this.filtersStore) {\n        var fieldFilter = this.filtersStore[this.field];\n        if (fieldFilter) {\n          if (fieldFilter.operator) return !this.isFilterBlank(fieldFilter.constraints[0].value);else return !this.isFilterBlank(fieldFilter.value);\n        }\n      }\n      return false;\n    },\n    hasRowFilter: function hasRowFilter() {\n      return this.filters[this.field] && !this.isFilterBlank(this.filters[this.field].value);\n    },\n    isFilterBlank: function isFilterBlank(filter) {\n      if (filter !== null && filter !== undefined) {\n        if (typeof filter === 'string' && filter.trim().length == 0 || filter instanceof Array && filter.length == 0) return true;else return false;\n      }\n      return true;\n    },\n    toggleMenu: function toggleMenu(event) {\n      this.overlayVisible = !this.overlayVisible;\n      event.preventDefault();\n    },\n    onToggleButtonKeyDown: function onToggleButtonKeyDown(event) {\n      switch (event.code) {\n        case 'Enter':\n        case 'NumpadEnter':\n        case 'Space':\n          this.toggleMenu(event);\n          break;\n        case 'Escape':\n          this.overlayVisible = false;\n          break;\n      }\n    },\n    onRowMatchModeChange: function onRowMatchModeChange(matchMode) {\n      var _filters = _objectSpread$5({}, this.filters);\n      _filters[this.field].matchMode = matchMode;\n      this.$emit('matchmode-change', {\n        field: this.field,\n        matchMode: matchMode\n      });\n      this.$emit('filter-change', _filters);\n      this.$emit('filter-apply');\n      this.hide();\n    },\n    onRowMatchModeKeyDown: function onRowMatchModeKeyDown(event) {\n      var item = event.target;\n      switch (event.code) {\n        case 'ArrowDown':\n          var nextItem = this.findNextItem(item);\n          if (nextItem) {\n            item.removeAttribute('tabindex');\n            nextItem.tabIndex = '0';\n            nextItem.focus();\n          }\n          event.preventDefault();\n          break;\n        case 'ArrowUp':\n          var prevItem = this.findPrevItem(item);\n          if (prevItem) {\n            item.removeAttribute('tabindex');\n            prevItem.tabIndex = '0';\n            prevItem.focus();\n          }\n          event.preventDefault();\n          break;\n      }\n    },\n    isRowMatchModeSelected: function isRowMatchModeSelected(matchMode) {\n      return this.filters[this.field].matchMode === matchMode;\n    },\n    onOperatorChange: function onOperatorChange(value) {\n      var _filters = _objectSpread$5({}, this.filters);\n      _filters[this.field].operator = value;\n      this.$emit('filter-change', _filters);\n      this.$emit('operator-change', {\n        field: this.field,\n        operator: value\n      });\n      if (!this.showApplyButton) {\n        this.$emit('filter-apply');\n      }\n    },\n    onMenuMatchModeChange: function onMenuMatchModeChange(value, index) {\n      var _filters = _objectSpread$5({}, this.filters);\n      _filters[this.field].constraints[index].matchMode = value;\n      this.$emit('matchmode-change', {\n        field: this.field,\n        matchMode: value,\n        index: index\n      });\n      if (!this.showApplyButton) {\n        this.$emit('filter-apply');\n      }\n    },\n    addConstraint: function addConstraint() {\n      var _filters = _objectSpread$5({}, this.filters);\n      var newConstraint = {\n        value: null,\n        matchMode: this.defaultMatchMode\n      };\n      _filters[this.field].constraints.push(newConstraint);\n      this.$emit('constraint-add', {\n        field: this.field,\n        constraing: newConstraint\n      });\n      this.$emit('filter-change', _filters);\n      if (!this.showApplyButton) {\n        this.$emit('filter-apply');\n      }\n    },\n    removeConstraint: function removeConstraint(index) {\n      var _filters = _objectSpread$5({}, this.filters);\n      var removedConstraint = _filters[this.field].constraints.splice(index, 1);\n      this.$emit('constraint-remove', {\n        field: this.field,\n        constraing: removedConstraint\n      });\n      this.$emit('filter-change', _filters);\n      if (!this.showApplyButton) {\n        this.$emit('filter-apply');\n      }\n    },\n    filterCallback: function filterCallback() {\n      this.$emit('filter-apply');\n    },\n    findNextItem: function findNextItem(item) {\n      var nextItem = item.nextElementSibling;\n      if (nextItem) return DomHandler.getAttribute(nextItem, 'data-pc-section') === 'filterseparator' ? this.findNextItem(nextItem) : nextItem;else return item.parentElement.firstElementChild;\n    },\n    findPrevItem: function findPrevItem(item) {\n      var prevItem = item.previousElementSibling;\n      if (prevItem) return DomHandler.getAttribute(prevItem, 'data-pc-section') === 'filterseparator' ? this.findPrevItem(prevItem) : prevItem;else return item.parentElement.lastElementChild;\n    },\n    hide: function hide() {\n      this.overlayVisible = false;\n      DomHandler.focus(this.$refs.icon);\n    },\n    onContentClick: function onContentClick(event) {\n      this.selfClick = true;\n      OverlayEventBus.emit('overlay-click', {\n        originalEvent: event,\n        target: this.overlay\n      });\n    },\n    onContentMouseDown: function onContentMouseDown() {\n      this.selfClick = true;\n    },\n    onOverlayEnter: function onOverlayEnter(el) {\n      var _this = this;\n      if (this.filterMenuStyle) {\n        DomHandler.applyStyle(this.overlay, this.filterMenuStyle);\n      }\n      ZIndexUtils.set('overlay', el, this.$primevue.config.zIndex.overlay);\n      DomHandler.addStyles(el, {\n        position: 'absolute',\n        top: '0',\n        left: '0'\n      });\n      DomHandler.absolutePosition(this.overlay, this.$refs.icon);\n      this.bindOutsideClickListener();\n      this.bindScrollListener();\n      this.bindResizeListener();\n      this.overlayEventListener = function (e) {\n        if (!_this.isOutsideClicked(e.target)) {\n          _this.selfClick = true;\n        }\n      };\n      OverlayEventBus.on('overlay-click', this.overlayEventListener);\n    },\n    onOverlayAfterEnter: function onOverlayAfterEnter() {\n      var _this$overlay;\n      (_this$overlay = this.overlay) === null || _this$overlay === void 0 || (_this$overlay = _this$overlay.$focustrap) === null || _this$overlay === void 0 || _this$overlay.autoFocus();\n    },\n    onOverlayLeave: function onOverlayLeave() {\n      this.onOverlayHide();\n    },\n    onOverlayAfterLeave: function onOverlayAfterLeave(el) {\n      ZIndexUtils.clear(el);\n    },\n    onOverlayHide: function onOverlayHide() {\n      this.unbindOutsideClickListener();\n      this.unbindResizeListener();\n      this.unbindScrollListener();\n      this.overlay = null;\n      OverlayEventBus.off('overlay-click', this.overlayEventListener);\n      this.overlayEventListener = null;\n    },\n    overlayRef: function overlayRef(el) {\n      this.overlay = el;\n    },\n    isOutsideClicked: function isOutsideClicked(target) {\n      return !this.isTargetClicked(target) && this.overlay && !(this.overlay.isSameNode(target) || this.overlay.contains(target));\n    },\n    isTargetClicked: function isTargetClicked(target) {\n      return this.$refs.icon && (this.$refs.icon.isSameNode(target) || this.$refs.icon.contains(target));\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this2 = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          if (_this2.overlayVisible && !_this2.selfClick && _this2.isOutsideClicked(event.target)) {\n            _this2.overlayVisible = false;\n          }\n          _this2.selfClick = false;\n        };\n        document.addEventListener('click', this.outsideClickListener);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n        this.selfClick = false;\n      }\n    },\n    bindScrollListener: function bindScrollListener() {\n      var _this3 = this;\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.icon, function () {\n          if (_this3.overlayVisible) {\n            _this3.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this4 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this4.overlayVisible && !DomHandler.isTouchDevice()) {\n            _this4.hide();\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    }\n  },\n  computed: {\n    showMenuButton: function showMenuButton() {\n      return this.showMenu && (this.display === 'row' ? this.type !== 'boolean' : true);\n    },\n    overlayId: function overlayId() {\n      return this.id + '_overlay';\n    },\n    matchModes: function matchModes() {\n      var _this5 = this;\n      return this.matchModeOptions || this.$primevue.config.filterMatchModeOptions[this.type].map(function (key) {\n        return {\n          label: _this5.$primevue.config.locale[key],\n          value: key\n        };\n      });\n    },\n    isShowMatchModes: function isShowMatchModes() {\n      return this.type !== 'boolean' && this.showMatchModes && this.matchModes;\n    },\n    operatorOptions: function operatorOptions() {\n      return [{\n        label: this.$primevue.config.locale.matchAll,\n        value: FilterOperator.AND\n      }, {\n        label: this.$primevue.config.locale.matchAny,\n        value: FilterOperator.OR\n      }];\n    },\n    noFilterLabel: function noFilterLabel() {\n      return this.$primevue.config.locale ? this.$primevue.config.locale.noFilter : undefined;\n    },\n    isShowOperator: function isShowOperator() {\n      return this.showOperator && this.filters[this.field].operator;\n    },\n    operator: function operator() {\n      return this.filters[this.field].operator;\n    },\n    fieldConstraints: function fieldConstraints() {\n      return this.filters[this.field].constraints || [this.filters[this.field]];\n    },\n    showRemoveIcon: function showRemoveIcon() {\n      return this.fieldConstraints.length > 1;\n    },\n    removeRuleButtonLabel: function removeRuleButtonLabel() {\n      return this.$primevue.config.locale ? this.$primevue.config.locale.removeRule : undefined;\n    },\n    addRuleButtonLabel: function addRuleButtonLabel() {\n      return this.$primevue.config.locale ? this.$primevue.config.locale.addRule : undefined;\n    },\n    isShowAddConstraint: function isShowAddConstraint() {\n      return this.showAddButton && this.filters[this.field].operator && this.fieldConstraints && this.fieldConstraints.length < this.maxConstraints;\n    },\n    clearButtonLabel: function clearButtonLabel() {\n      return this.$primevue.config.locale ? this.$primevue.config.locale.clear : undefined;\n    },\n    applyButtonLabel: function applyButtonLabel() {\n      return this.$primevue.config.locale ? this.$primevue.config.locale.apply : undefined;\n    },\n    filterMenuButtonAriaLabel: function filterMenuButtonAriaLabel() {\n      return this.$primevue.config.locale ? this.overlayVisible ? this.$primevue.config.locale.showFilterMenu : this.$primevue.config.locale.hideFilterMenu : undefined;\n    },\n    filterOperatorAriaLabel: function filterOperatorAriaLabel() {\n      return this.$primevue.config.locale ? this.$primevue.config.locale.filterOperator : undefined;\n    },\n    filterConstraintAriaLabel: function filterConstraintAriaLabel() {\n      return this.$primevue.config.locale ? this.$primevue.config.locale.filterConstraint : undefined;\n    },\n    ptmHeaderFilterClearParams: function ptmHeaderFilterClearParams() {\n      return {\n        context: {\n          hidden: this.hasRowFilter()\n        }\n      };\n    },\n    ptmFilterMenuParams: function ptmFilterMenuParams() {\n      return {\n        context: {\n          overlayVisible: this.overlayVisible,\n          active: this.hasFilter()\n        }\n      };\n    }\n  },\n  components: {\n    CFDropdown: Dropdown,\n    CFButton: Button,\n    Portal: Portal,\n    FilterSlashIcon: FilterSlashIcon,\n    FilterIcon: FilterIcon,\n    TrashIcon: TrashIcon,\n    PlusIcon: PlusIcon\n  },\n  directives: {\n    focustrap: FocusTrap\n  }\n};\n\nfunction _typeof$4(o) { \"@babel/helpers - typeof\"; return _typeof$4 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$4(o); }\nfunction ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty$4(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$4(obj, key, value) { key = _toPropertyKey$4(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey$4(t) { var i = _toPrimitive$4(t, \"string\"); return \"symbol\" == _typeof$4(i) ? i : String(i); }\nfunction _toPrimitive$4(t, r) { if (\"object\" != _typeof$4(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof$4(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1$1 = [\"aria-label\", \"aria-expanded\", \"aria-controls\"];\nvar _hoisted_2 = [\"id\", \"aria-modal\"];\nvar _hoisted_3 = [\"onClick\", \"onKeydown\", \"tabindex\"];\nfunction render$4(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_CFDropdown = resolveComponent(\"CFDropdown\");\n  var _component_CFButton = resolveComponent(\"CFButton\");\n  var _component_Portal = resolveComponent(\"Portal\");\n  var _directive_focustrap = resolveDirective(\"focustrap\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('columnFilter')\n  }, $options.getColumnPT('columnFilter')), [$props.display === 'row' ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('filterInput')\n  }, _objectSpread$4(_objectSpread$4({}, $props.filterInputProps), $options.getColumnPT('filterInput'))), [(openBlock(), createBlock(resolveDynamicComponent($props.filterElement), {\n    field: $props.field,\n    filterModel: $props.filters[$props.field],\n    filterCallback: $options.filterCallback\n  }, null, 8, [\"field\", \"filterModel\", \"filterCallback\"]))], 16)) : createCommentVNode(\"\", true), $options.showMenuButton ? (openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 1,\n    ref: \"icon\",\n    type: \"button\",\n    \"aria-label\": $options.filterMenuButtonAriaLabel,\n    \"aria-haspopup\": \"true\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": $options.overlayId,\n    \"class\": _ctx.cx('filterMenuButton'),\n    onClick: _cache[0] || (_cache[0] = function ($event) {\n      return $options.toggleMenu($event);\n    }),\n    onKeydown: _cache[1] || (_cache[1] = function ($event) {\n      return $options.onToggleButtonKeyDown($event);\n    })\n  }, $options.getColumnPT('filterMenuButton', $options.ptmFilterMenuParams)), [(openBlock(), createBlock(resolveDynamicComponent($props.filterIconTemplate || 'FilterIcon'), normalizeProps(guardReactiveProps($options.getColumnPT('filterMenuIcon'))), null, 16))], 16, _hoisted_1$1)) : createCommentVNode(\"\", true), $props.showClearButton && $props.display === 'row' ? (openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 2,\n    \"class\": _ctx.cx('headerFilterClearButton'),\n    type: \"button\",\n    onClick: _cache[2] || (_cache[2] = function ($event) {\n      return $options.clearFilter();\n    })\n  }, $options.getColumnPT('headerFilterClearButton', $options.ptmHeaderFilterClearParams)), [(openBlock(), createBlock(resolveDynamicComponent($props.filterClearIconTemplate || 'FilterSlashIcon'), normalizeProps(guardReactiveProps($options.getColumnPT('filterClearIcon'))), null, 16))], 16)) : createCommentVNode(\"\", true), createVNode(_component_Portal, null, {\n    \"default\": withCtx(function () {\n      return [createVNode(Transition, mergeProps({\n        name: \"p-connected-overlay\",\n        onEnter: $options.onOverlayEnter,\n        onAfterEnter: $options.onOverlayAfterEnter,\n        onLeave: $options.onOverlayLeave,\n        onAfterLeave: $options.onOverlayAfterLeave\n      }, $options.getColumnPT('transition')), {\n        \"default\": withCtx(function () {\n          return [$data.overlayVisible ? withDirectives((openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.overlayRef,\n            id: $options.overlayId,\n            \"aria-modal\": $data.overlayVisible,\n            role: \"dialog\",\n            \"class\": [_ctx.cx('filterOverlay'), $props.filterMenuClass],\n            onKeydown: _cache[10] || (_cache[10] = withKeys(function () {\n              return $options.hide && $options.hide.apply($options, arguments);\n            }, [\"escape\"])),\n            onClick: _cache[11] || (_cache[11] = function () {\n              return $options.onContentClick && $options.onContentClick.apply($options, arguments);\n            }),\n            onMousedown: _cache[12] || (_cache[12] = function () {\n              return $options.onContentMouseDown && $options.onContentMouseDown.apply($options, arguments);\n            })\n          }, $options.getColumnPT('filterOverlay')), [(openBlock(), createBlock(resolveDynamicComponent($props.filterHeaderTemplate), {\n            field: $props.field,\n            filterModel: $props.filters[$props.field],\n            filterCallback: $options.filterCallback\n          }, null, 8, [\"field\", \"filterModel\", \"filterCallback\"])), $props.display === 'row' ? (openBlock(), createElementBlock(\"ul\", mergeProps({\n            key: 0,\n            \"class\": _ctx.cx('filterRowItems')\n          }, $options.getColumnPT('filterRowItems')), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.matchModes, function (matchMode, i) {\n            return openBlock(), createElementBlock(\"li\", mergeProps({\n              key: matchMode.label,\n              \"class\": _ctx.cx('filterRowItem', {\n                matchMode: matchMode\n              }),\n              onClick: function onClick($event) {\n                return $options.onRowMatchModeChange(matchMode.value);\n              },\n              onKeydown: [_cache[3] || (_cache[3] = function ($event) {\n                return $options.onRowMatchModeKeyDown($event);\n              }), withKeys(withModifiers(function ($event) {\n                return $options.onRowMatchModeChange(matchMode.value);\n              }, [\"prevent\"]), [\"enter\"])],\n              tabindex: i === 0 ? '0' : null\n            }, $options.getColumnPT('filterRowItem', $options.ptmFilterRowItemOptions(matchMode))), toDisplayString(matchMode.label), 17, _hoisted_3);\n          }), 128)), createElementVNode(\"li\", mergeProps({\n            \"class\": _ctx.cx('filterSeparator')\n          }, $options.getColumnPT('filterSeparator')), null, 16), createElementVNode(\"li\", mergeProps({\n            \"class\": _ctx.cx('filterRowItem'),\n            onClick: _cache[4] || (_cache[4] = function ($event) {\n              return $options.clearFilter();\n            }),\n            onKeydown: [_cache[5] || (_cache[5] = function ($event) {\n              return $options.onRowMatchModeKeyDown($event);\n            }), _cache[6] || (_cache[6] = withKeys(function ($event) {\n              return _ctx.onRowClearItemClick();\n            }, [\"enter\"]))]\n          }, $options.getColumnPT('filterRowItem')), toDisplayString($options.noFilterLabel), 17)], 16)) : (openBlock(), createElementBlock(Fragment, {\n            key: 1\n          }, [$options.isShowOperator ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            \"class\": _ctx.cx('filterOperator')\n          }, $options.getColumnPT('filterOperator')), [createVNode(_component_CFDropdown, {\n            options: $options.operatorOptions,\n            modelValue: $options.operator,\n            \"aria-label\": $options.filterOperatorAriaLabel,\n            \"class\": normalizeClass(_ctx.cx('filterOperatorDropdown')),\n            optionLabel: \"label\",\n            optionValue: \"value\",\n            \"onUpdate:modelValue\": _cache[7] || (_cache[7] = function ($event) {\n              return $options.onOperatorChange($event);\n            }),\n            unstyled: _ctx.unstyled,\n            pt: $options.getColumnPT('filterOperatorDropdown')\n          }, null, 8, [\"options\", \"modelValue\", \"aria-label\", \"class\", \"unstyled\", \"pt\"])], 16)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n            \"class\": _ctx.cx('filterConstraints')\n          }, $options.getColumnPT('filterConstraints')), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.fieldConstraints, function (fieldConstraint, i) {\n            return openBlock(), createElementBlock(\"div\", mergeProps({\n              key: i,\n              \"class\": _ctx.cx('filterConstraint')\n            }, $options.getColumnPT('filterConstraint')), [$options.isShowMatchModes ? (openBlock(), createBlock(_component_CFDropdown, {\n              key: 0,\n              options: $options.matchModes,\n              modelValue: fieldConstraint.matchMode,\n              \"class\": normalizeClass(_ctx.cx('filterMatchModeDropdown')),\n              optionLabel: \"label\",\n              optionValue: \"value\",\n              \"aria-label\": $options.filterConstraintAriaLabel,\n              \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n                return $options.onMenuMatchModeChange($event, i);\n              },\n              unstyled: _ctx.unstyled,\n              pt: $options.getColumnPT('filterMatchModeDropdown')\n            }, null, 8, [\"options\", \"modelValue\", \"class\", \"aria-label\", \"onUpdate:modelValue\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true), $props.display === 'menu' ? (openBlock(), createBlock(resolveDynamicComponent($props.filterElement), {\n              key: 1,\n              field: $props.field,\n              filterModel: fieldConstraint,\n              filterCallback: $options.filterCallback,\n              applyFilter: $options.applyFilter\n            }, null, 8, [\"field\", \"filterModel\", \"filterCallback\", \"applyFilter\"])) : createCommentVNode(\"\", true), createElementVNode(\"div\", normalizeProps(guardReactiveProps($options.getColumnPT('filterRemove'))), [$options.showRemoveIcon ? (openBlock(), createBlock(_component_CFButton, {\n              key: 0,\n              type: \"button\",\n              \"class\": normalizeClass(_ctx.cx('filterRemoveButton')),\n              onClick: function onClick($event) {\n                return $options.removeConstraint(i);\n              },\n              label: $options.removeRuleButtonLabel,\n              unstyled: _ctx.unstyled,\n              text: \"\",\n              severity: \"danger\",\n              size: \"small\",\n              pt: $options.getColumnPT('filterRemoveButton')\n            }, {\n              icon: withCtx(function (iconProps) {\n                return [(openBlock(), createBlock(resolveDynamicComponent($props.filterRemoveIconTemplate || 'TrashIcon'), mergeProps({\n                  \"class\": iconProps[\"class\"]\n                }, $options.getColumnPT('filterRemoveButton')['icon']), null, 16, [\"class\"]))];\n              }),\n              _: 2\n            }, 1032, [\"class\", \"onClick\", \"label\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 16)], 16);\n          }), 128))], 16), $options.isShowAddConstraint ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 1,\n            \"class\": _ctx.cx('filterAddRule')\n          }, $options.getColumnPT('filterAddRule')), [createVNode(_component_CFButton, {\n            type: \"button\",\n            label: $options.addRuleButtonLabel,\n            iconPos: \"left\",\n            \"class\": normalizeClass(_ctx.cx('filterAddRuleButton')),\n            onClick: _cache[8] || (_cache[8] = function ($event) {\n              return $options.addConstraint();\n            }),\n            unstyled: _ctx.unstyled,\n            text: \"\",\n            severity: \"info\",\n            size: \"small\",\n            pt: $options.getColumnPT('filterAddRuleButton')\n          }, {\n            icon: withCtx(function (iconProps) {\n              return [(openBlock(), createBlock(resolveDynamicComponent($props.filterAddIconTemplate || 'PlusIcon'), mergeProps({\n                \"class\": iconProps[\"class\"]\n              }, $options.getColumnPT('filterAddRuleButton')['icon']), null, 16, [\"class\"]))];\n            }),\n            _: 1\n          }, 8, [\"label\", \"class\", \"unstyled\", \"pt\"])], 16)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n            \"class\": _ctx.cx('filterButtonbar')\n          }, $options.getColumnPT('filterButtonbar')), [!$props.filterClearTemplate && $props.showClearButton ? (openBlock(), createBlock(_component_CFButton, {\n            key: 0,\n            type: \"button\",\n            \"class\": normalizeClass(_ctx.cx('filterClearButton')),\n            label: $options.clearButtonLabel,\n            onClick: $options.clearFilter,\n            unstyled: _ctx.unstyled,\n            size: \"small\",\n            outlined: \"\",\n            pt: $options.getColumnPT('filterClearButton')\n          }, null, 8, [\"class\", \"label\", \"onClick\", \"unstyled\", \"pt\"])) : (openBlock(), createBlock(resolveDynamicComponent($props.filterClearTemplate), {\n            key: 1,\n            field: $props.field,\n            filterModel: $props.filters[$props.field],\n            filterCallback: $options.clearFilter\n          }, null, 8, [\"field\", \"filterModel\", \"filterCallback\"])), $props.showApplyButton ? (openBlock(), createElementBlock(Fragment, {\n            key: 2\n          }, [!$props.filterApplyTemplate ? (openBlock(), createBlock(_component_CFButton, {\n            key: 0,\n            type: \"button\",\n            \"class\": normalizeClass(_ctx.cx('filterApplyButton')),\n            label: $options.applyButtonLabel,\n            onClick: _cache[9] || (_cache[9] = function ($event) {\n              return $options.applyFilter();\n            }),\n            unstyled: _ctx.unstyled,\n            size: \"small\",\n            pt: $options.getColumnPT('filterApplyButton')\n          }, null, 8, [\"class\", \"label\", \"unstyled\", \"pt\"])) : (openBlock(), createBlock(resolveDynamicComponent($props.filterApplyTemplate), {\n            key: 1,\n            field: $props.field,\n            filterModel: $props.filters[$props.field],\n            filterCallback: $options.applyFilter\n          }, null, 8, [\"field\", \"filterModel\", \"filterCallback\"]))], 64)) : createCommentVNode(\"\", true)], 16)], 64)), (openBlock(), createBlock(resolveDynamicComponent($props.filterFooterTemplate), {\n            field: $props.field,\n            filterModel: $props.filters[$props.field],\n            filterCallback: $options.filterCallback\n          }, null, 8, [\"field\", \"filterModel\", \"filterCallback\"]))], 16, _hoisted_2)), [[_directive_focustrap]]) : createCommentVNode(\"\", true)];\n        }),\n        _: 1\n      }, 16, [\"onEnter\", \"onAfterEnter\", \"onLeave\", \"onAfterLeave\"])];\n    }),\n    _: 1\n  })], 16);\n}\n\nscript$4.render = render$4;\n\nvar script$3 = {\n  name: 'HeaderCheckbox',\n  hostName: 'DataTable',\n  \"extends\": BaseComponent,\n  emits: ['change'],\n  props: {\n    checked: null,\n    disabled: null,\n    column: null,\n    headerCheckboxIconTemplate: {\n      type: Function,\n      \"default\": null\n    }\n  },\n  methods: {\n    getColumnPT: function getColumnPT(key) {\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          checked: this.checked,\n          disabled: this.disabled\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo:\n    },\n    onChange: function onChange(event) {\n      this.$emit('change', {\n        originalEvent: event,\n        checked: !this.checked\n      });\n    }\n  },\n  computed: {\n    headerCheckboxAriaLabel: function headerCheckboxAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.checked ? this.$primevue.config.locale.aria.selectAll : this.$primevue.config.locale.aria.unselectAll : undefined;\n    }\n  },\n  components: {\n    CheckIcon: CheckIcon,\n    Checkbox: Checkbox\n  }\n};\n\nfunction render$3(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_CheckIcon = resolveComponent(\"CheckIcon\");\n  var _component_Checkbox = resolveComponent(\"Checkbox\");\n  return openBlock(), createBlock(_component_Checkbox, {\n    modelValue: $props.checked,\n    binary: true,\n    disabled: $props.disabled,\n    \"aria-label\": $options.headerCheckboxAriaLabel,\n    onChange: $options.onChange,\n    pt: $options.getColumnPT('headerCheckbox')\n  }, {\n    icon: withCtx(function (slotProps) {\n      return [$props.headerCheckboxIconTemplate ? (openBlock(), createBlock(resolveDynamicComponent($props.headerCheckboxIconTemplate), {\n        key: 0,\n        checked: slotProps.checked,\n        \"class\": normalizeClass(slotProps[\"class\"])\n      }, null, 8, [\"checked\", \"class\"])) : !$props.headerCheckboxIconTemplate && slotProps.checked ? (openBlock(), createBlock(_component_CheckIcon, mergeProps({\n        key: 1,\n        \"class\": slotProps[\"class\"]\n      }, $options.getColumnPT('headerCheckbox.icon')), null, 16, [\"class\"])) : createCommentVNode(\"\", true)];\n    }),\n    _: 1\n  }, 8, [\"modelValue\", \"disabled\", \"aria-label\", \"onChange\", \"pt\"]);\n}\n\nscript$3.render = render$3;\n\nvar script$2 = {\n  name: 'HeaderCell',\n  hostName: 'DataTable',\n  \"extends\": BaseComponent,\n  emits: ['column-click', 'column-mousedown', 'column-dragstart', 'column-dragover', 'column-dragleave', 'column-drop', 'column-resizestart', 'checkbox-change', 'filter-change', 'filter-apply', 'operator-change', 'matchmode-change', 'constraint-add', 'constraint-remove', 'filter-clear', 'apply-click'],\n  props: {\n    column: {\n      type: Object,\n      \"default\": null\n    },\n    index: {\n      type: Number,\n      \"default\": null\n    },\n    resizableColumns: {\n      type: Boolean,\n      \"default\": false\n    },\n    groupRowsBy: {\n      type: [Array, String, Function],\n      \"default\": null\n    },\n    sortMode: {\n      type: String,\n      \"default\": 'single'\n    },\n    groupRowSortField: {\n      type: [String, Function],\n      \"default\": null\n    },\n    sortField: {\n      type: [String, Function],\n      \"default\": null\n    },\n    sortOrder: {\n      type: Number,\n      \"default\": null\n    },\n    multiSortMeta: {\n      type: Array,\n      \"default\": null\n    },\n    allRowsSelected: {\n      type: Boolean,\n      \"default\": false\n    },\n    empty: {\n      type: Boolean,\n      \"default\": false\n    },\n    filterDisplay: {\n      type: String,\n      \"default\": null\n    },\n    filters: {\n      type: Object,\n      \"default\": null\n    },\n    filtersStore: {\n      type: Object,\n      \"default\": null\n    },\n    filterColumn: {\n      type: Boolean,\n      \"default\": false\n    },\n    reorderableColumns: {\n      type: Boolean,\n      \"default\": false\n    },\n    filterInputProps: {\n      type: null,\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      styleObject: {}\n    };\n  },\n  mounted: function mounted() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  updated: function updated() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  methods: {\n    columnProp: function columnProp(prop) {\n      return ObjectUtils.getVNodeProp(this.column, prop);\n    },\n    getColumnPT: function getColumnPT(key) {\n      var _this$$parentInstance, _this$$parentInstance2;\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: this.index,\n          sortable: this.columnProp('sortable') === '' || this.columnProp('sortable'),\n          sorted: this.isColumnSorted(),\n          resizable: this.resizableColumns,\n          size: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 || (_this$$parentInstance = _this$$parentInstance.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.size,\n          showGridlines: ((_this$$parentInstance2 = this.$parentInstance) === null || _this$$parentInstance2 === void 0 || (_this$$parentInstance2 = _this$$parentInstance2.$parentInstance) === null || _this$$parentInstance2 === void 0 ? void 0 : _this$$parentInstance2.showGridlines) || false\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo:\n    },\n    onClick: function onClick(event) {\n      this.$emit('column-click', {\n        originalEvent: event,\n        column: this.column\n      });\n    },\n    onKeyDown: function onKeyDown(event) {\n      if ((event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') && event.currentTarget.nodeName === 'TH' && DomHandler.getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n        this.$emit('column-click', {\n          originalEvent: event,\n          column: this.column\n        });\n        event.preventDefault();\n      }\n    },\n    onMouseDown: function onMouseDown(event) {\n      this.$emit('column-mousedown', {\n        originalEvent: event,\n        column: this.column\n      });\n    },\n    onDragStart: function onDragStart(event) {\n      this.$emit('column-dragstart', {\n        originalEvent: event,\n        column: this.column\n      });\n    },\n    onDragOver: function onDragOver(event) {\n      this.$emit('column-dragover', {\n        originalEvent: event,\n        column: this.column\n      });\n    },\n    onDragLeave: function onDragLeave(event) {\n      this.$emit('column-dragleave', {\n        originalEvent: event,\n        column: this.column\n      });\n    },\n    onDrop: function onDrop(event) {\n      this.$emit('column-drop', {\n        originalEvent: event,\n        column: this.column\n      });\n    },\n    onResizeStart: function onResizeStart(event) {\n      this.$emit('column-resizestart', event);\n    },\n    getMultiSortMetaIndex: function getMultiSortMetaIndex() {\n      var _this = this;\n      return this.multiSortMeta.findIndex(function (meta) {\n        return meta.field === _this.columnProp('field') || meta.field === _this.columnProp('sortField');\n      });\n    },\n    getBadgeValue: function getBadgeValue() {\n      var index = this.getMultiSortMetaIndex();\n      return this.groupRowsBy && this.groupRowsBy === this.groupRowSortField && index > -1 ? index : index + 1;\n    },\n    isMultiSorted: function isMultiSorted() {\n      return this.sortMode === 'multiple' && this.columnProp('sortable') && this.getMultiSortMetaIndex() > -1;\n    },\n    isColumnSorted: function isColumnSorted() {\n      return this.sortMode === 'single' ? this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField')) : this.isMultiSorted();\n    },\n    updateStickyPosition: function updateStickyPosition() {\n      if (this.columnProp('frozen')) {\n        var align = this.columnProp('alignFrozen');\n        if (align === 'right') {\n          var right = 0;\n          var next = DomHandler.getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (next) {\n            right = DomHandler.getOuterWidth(next) + parseFloat(next.style.right || 0);\n          }\n          this.styleObject.right = right + 'px';\n        } else {\n          var left = 0;\n          var prev = DomHandler.getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (prev) {\n            left = DomHandler.getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n          }\n          this.styleObject.left = left + 'px';\n        }\n        var filterRow = this.$el.parentElement.nextElementSibling;\n        if (filterRow) {\n          var index = DomHandler.index(this.$el);\n          if (filterRow.children[index]) {\n            filterRow.children[index].style.left = this.styleObject.left;\n            filterRow.children[index].style.right = this.styleObject.right;\n          }\n        }\n      }\n    },\n    onHeaderCheckboxChange: function onHeaderCheckboxChange(event) {\n      this.$emit('checkbox-change', event);\n    }\n  },\n  computed: {\n    containerClass: function containerClass() {\n      return [this.cx('headerCell'), this.filterColumn ? this.columnProp('filterHeaderClass') : this.columnProp('headerClass'), this.columnProp('class')];\n    },\n    containerStyle: function containerStyle() {\n      var headerStyle = this.filterColumn ? this.columnProp('filterHeaderStyle') : this.columnProp('headerStyle');\n      var columnStyle = this.columnProp('style');\n      return this.columnProp('frozen') ? [columnStyle, headerStyle, this.styleObject] : [columnStyle, headerStyle];\n    },\n    sortState: function sortState() {\n      var sorted = false;\n      var sortOrder = null;\n      if (this.sortMode === 'single') {\n        sorted = this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField'));\n        sortOrder = sorted ? this.sortOrder : 0;\n      } else if (this.sortMode === 'multiple') {\n        var metaIndex = this.getMultiSortMetaIndex();\n        if (metaIndex > -1) {\n          sorted = true;\n          sortOrder = this.multiSortMeta[metaIndex].order;\n        }\n      }\n      return {\n        sorted: sorted,\n        sortOrder: sortOrder\n      };\n    },\n    sortableColumnIcon: function sortableColumnIcon() {\n      var _this$sortState = this.sortState,\n        sorted = _this$sortState.sorted,\n        sortOrder = _this$sortState.sortOrder;\n      if (!sorted) return SortAltIcon;else if (sorted && sortOrder > 0) return SortAmountUpAltIcon;else if (sorted && sortOrder < 0) return SortAmountDownIcon;\n      return null;\n    },\n    ariaSort: function ariaSort() {\n      if (this.columnProp('sortable')) {\n        var _this$sortState2 = this.sortState,\n          sorted = _this$sortState2.sorted,\n          sortOrder = _this$sortState2.sortOrder;\n        if (sorted && sortOrder < 0) return 'descending';else if (sorted && sortOrder > 0) return 'ascending';else return 'none';\n      } else {\n        return null;\n      }\n    }\n  },\n  components: {\n    DTHeaderCheckbox: script$3,\n    DTColumnFilter: script$4,\n    SortAltIcon: SortAltIcon,\n    SortAmountUpAltIcon: SortAmountUpAltIcon,\n    SortAmountDownIcon: SortAmountDownIcon\n  }\n};\n\nfunction _typeof$3(o) { \"@babel/helpers - typeof\"; return _typeof$3 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$3(o); }\nfunction ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty$3(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$3(obj, key, value) { key = _toPropertyKey$3(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey$3(t) { var i = _toPrimitive$3(t, \"string\"); return \"symbol\" == _typeof$3(i) ? i : String(i); }\nfunction _toPrimitive$3(t, r) { if (\"object\" != _typeof$3(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof$3(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1 = [\"tabindex\", \"colspan\", \"rowspan\", \"aria-sort\", \"data-p-sortable-column\", \"data-p-resizable-column\", \"data-p-highlight\", \"data-p-filter-column\", \"data-p-frozen-column\", \"data-p-reorderable-column\"];\nfunction render$2(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_DTHeaderCheckbox = resolveComponent(\"DTHeaderCheckbox\");\n  var _component_DTColumnFilter = resolveComponent(\"DTColumnFilter\");\n  return openBlock(), createElementBlock(\"th\", mergeProps({\n    style: $options.containerStyle,\n    \"class\": $options.containerClass,\n    tabindex: $options.columnProp('sortable') ? '0' : null,\n    role: \"columnheader\",\n    colspan: $options.columnProp('colspan'),\n    rowspan: $options.columnProp('rowspan'),\n    \"aria-sort\": $options.ariaSort,\n    onClick: _cache[8] || (_cache[8] = function () {\n      return $options.onClick && $options.onClick.apply($options, arguments);\n    }),\n    onKeydown: _cache[9] || (_cache[9] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    }),\n    onMousedown: _cache[10] || (_cache[10] = function () {\n      return $options.onMouseDown && $options.onMouseDown.apply($options, arguments);\n    }),\n    onDragstart: _cache[11] || (_cache[11] = function () {\n      return $options.onDragStart && $options.onDragStart.apply($options, arguments);\n    }),\n    onDragover: _cache[12] || (_cache[12] = function () {\n      return $options.onDragOver && $options.onDragOver.apply($options, arguments);\n    }),\n    onDragleave: _cache[13] || (_cache[13] = function () {\n      return $options.onDragLeave && $options.onDragLeave.apply($options, arguments);\n    }),\n    onDrop: _cache[14] || (_cache[14] = function () {\n      return $options.onDrop && $options.onDrop.apply($options, arguments);\n    })\n  }, _objectSpread$3(_objectSpread$3({}, $options.getColumnPT('root')), $options.getColumnPT('headerCell')), {\n    \"data-p-sortable-column\": $options.columnProp('sortable'),\n    \"data-p-resizable-column\": $props.resizableColumns,\n    \"data-p-highlight\": $options.isColumnSorted(),\n    \"data-p-filter-column\": $props.filterColumn,\n    \"data-p-frozen-column\": $options.columnProp('frozen'),\n    \"data-p-reorderable-column\": $props.reorderableColumns\n  }), [$props.resizableColumns && !$options.columnProp('frozen') ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('columnResizer'),\n    onMousedown: _cache[0] || (_cache[0] = function () {\n      return $options.onResizeStart && $options.onResizeStart.apply($options, arguments);\n    })\n  }, $options.getColumnPT('columnResizer')), null, 16)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('headerContent')\n  }, $options.getColumnPT('headerContent')), [$props.column.children && $props.column.children.header ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.header), {\n    key: 0,\n    column: $props.column\n  }, null, 8, [\"column\"])) : createCommentVNode(\"\", true), $options.columnProp('header') ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('headerTitle')\n  }, $options.getColumnPT('headerTitle')), toDisplayString($options.columnProp('header')), 17)) : createCommentVNode(\"\", true), $options.columnProp('sortable') ? (openBlock(), createElementBlock(\"span\", normalizeProps(mergeProps({\n    key: 2\n  }, $options.getColumnPT('sort'))), [(openBlock(), createBlock(resolveDynamicComponent($props.column.children && $props.column.children.sorticon || $options.sortableColumnIcon), mergeProps({\n    sorted: $options.sortState.sorted,\n    sortOrder: $options.sortState.sortOrder,\n    \"class\": _ctx.cx('sortIcon')\n  }, $options.getColumnPT('sorticon')), null, 16, [\"sorted\", \"sortOrder\", \"class\"]))], 16)) : createCommentVNode(\"\", true), $options.isMultiSorted() ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 3,\n    \"class\": _ctx.cx('sortBadge')\n  }, $options.getColumnPT('sortBadge')), toDisplayString($options.getBadgeValue()), 17)) : createCommentVNode(\"\", true), $options.columnProp('selectionMode') === 'multiple' && $props.filterDisplay !== 'row' ? (openBlock(), createBlock(_component_DTHeaderCheckbox, {\n    key: 4,\n    checked: $props.allRowsSelected,\n    onChange: $options.onHeaderCheckboxChange,\n    disabled: $props.empty,\n    headerCheckboxIconTemplate: $props.column.children && $props.column.children.headercheckboxicon,\n    column: $props.column,\n    unstyled: _ctx.unstyled,\n    pt: _ctx.pt\n  }, null, 8, [\"checked\", \"onChange\", \"disabled\", \"headerCheckboxIconTemplate\", \"column\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true), $props.filterDisplay === 'menu' && $props.column.children && $props.column.children.filter ? (openBlock(), createBlock(_component_DTColumnFilter, {\n    key: 5,\n    field: $options.columnProp('filterField') || $options.columnProp('field'),\n    type: $options.columnProp('dataType'),\n    display: \"menu\",\n    showMenu: $options.columnProp('showFilterMenu'),\n    filterElement: $props.column.children && $props.column.children.filter,\n    filterHeaderTemplate: $props.column.children && $props.column.children.filterheader,\n    filterFooterTemplate: $props.column.children && $props.column.children.filterfooter,\n    filterClearTemplate: $props.column.children && $props.column.children.filterclear,\n    filterApplyTemplate: $props.column.children && $props.column.children.filterapply,\n    filterIconTemplate: $props.column.children && $props.column.children.filtericon,\n    filterAddIconTemplate: $props.column.children && $props.column.children.filteraddicon,\n    filterRemoveIconTemplate: $props.column.children && $props.column.children.filterremoveicon,\n    filterClearIconTemplate: $props.column.children && $props.column.children.filterclearicon,\n    filters: $props.filters,\n    filtersStore: $props.filtersStore,\n    filterInputProps: $props.filterInputProps,\n    onFilterChange: _cache[1] || (_cache[1] = function ($event) {\n      return _ctx.$emit('filter-change', $event);\n    }),\n    onFilterApply: _cache[2] || (_cache[2] = function ($event) {\n      return _ctx.$emit('filter-apply');\n    }),\n    filterMenuStyle: $options.columnProp('filterMenuStyle'),\n    filterMenuClass: $options.columnProp('filterMenuClass'),\n    showOperator: $options.columnProp('showFilterOperator'),\n    showClearButton: $options.columnProp('showClearButton'),\n    showApplyButton: $options.columnProp('showApplyButton'),\n    showMatchModes: $options.columnProp('showFilterMatchModes'),\n    showAddButton: $options.columnProp('showAddButton'),\n    matchModeOptions: $options.columnProp('filterMatchModeOptions'),\n    maxConstraints: $options.columnProp('maxConstraints'),\n    onOperatorChange: _cache[3] || (_cache[3] = function ($event) {\n      return _ctx.$emit('operator-change', $event);\n    }),\n    onMatchmodeChange: _cache[4] || (_cache[4] = function ($event) {\n      return _ctx.$emit('matchmode-change', $event);\n    }),\n    onConstraintAdd: _cache[5] || (_cache[5] = function ($event) {\n      return _ctx.$emit('constraint-add', $event);\n    }),\n    onConstraintRemove: _cache[6] || (_cache[6] = function ($event) {\n      return _ctx.$emit('constraint-remove', $event);\n    }),\n    onApplyClick: _cache[7] || (_cache[7] = function ($event) {\n      return _ctx.$emit('apply-click', $event);\n    }),\n    column: $props.column,\n    unstyled: _ctx.unstyled,\n    pt: _ctx.pt\n  }, null, 8, [\"field\", \"type\", \"showMenu\", \"filterElement\", \"filterHeaderTemplate\", \"filterFooterTemplate\", \"filterClearTemplate\", \"filterApplyTemplate\", \"filterIconTemplate\", \"filterAddIconTemplate\", \"filterRemoveIconTemplate\", \"filterClearIconTemplate\", \"filters\", \"filtersStore\", \"filterInputProps\", \"filterMenuStyle\", \"filterMenuClass\", \"showOperator\", \"showClearButton\", \"showApplyButton\", \"showMatchModes\", \"showAddButton\", \"matchModeOptions\", \"maxConstraints\", \"column\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 16)], 16, _hoisted_1);\n}\n\nscript$2.render = render$2;\n\nvar script$1 = {\n  name: 'TableHeader',\n  hostName: 'DataTable',\n  \"extends\": BaseComponent,\n  emits: ['column-click', 'column-mousedown', 'column-dragstart', 'column-dragover', 'column-dragleave', 'column-drop', 'column-resizestart', 'checkbox-change', 'filter-change', 'filter-apply', 'operator-change', 'matchmode-change', 'constraint-add', 'constraint-remove', 'filter-clear', 'apply-click'],\n  props: {\n    columnGroup: {\n      type: null,\n      \"default\": null\n    },\n    columns: {\n      type: null,\n      \"default\": null\n    },\n    rowGroupMode: {\n      type: String,\n      \"default\": null\n    },\n    groupRowsBy: {\n      type: [Array, String, Function],\n      \"default\": null\n    },\n    resizableColumns: {\n      type: Boolean,\n      \"default\": false\n    },\n    allRowsSelected: {\n      type: Boolean,\n      \"default\": false\n    },\n    empty: {\n      type: Boolean,\n      \"default\": false\n    },\n    sortMode: {\n      type: String,\n      \"default\": 'single'\n    },\n    groupRowSortField: {\n      type: [String, Function],\n      \"default\": null\n    },\n    sortField: {\n      type: [String, Function],\n      \"default\": null\n    },\n    sortOrder: {\n      type: Number,\n      \"default\": null\n    },\n    multiSortMeta: {\n      type: Array,\n      \"default\": null\n    },\n    filterDisplay: {\n      type: String,\n      \"default\": null\n    },\n    filters: {\n      type: Object,\n      \"default\": null\n    },\n    filtersStore: {\n      type: Object,\n      \"default\": null\n    },\n    reorderableColumns: {\n      type: Boolean,\n      \"default\": false\n    },\n    first: {\n      type: Number,\n      \"default\": 0\n    },\n    filterInputProps: {\n      type: null,\n      \"default\": null\n    }\n  },\n  provide: function provide() {\n    return {\n      $rows: this.d_headerRows,\n      $columns: this.d_headerColumns\n    };\n  },\n  data: function data() {\n    return {\n      d_headerRows: new HelperSet({\n        type: 'Row'\n      }),\n      d_headerColumns: new HelperSet({\n        type: 'Column'\n      })\n    };\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.d_headerRows.clear();\n    this.d_headerColumns.clear();\n  },\n  methods: {\n    columnProp: function columnProp(col, prop) {\n      return ObjectUtils.getVNodeProp(col, prop);\n    },\n    getColumnGroupPT: function getColumnGroupPT(key) {\n      var _this$$parentInstance;\n      var columnGroupMetaData = {\n        props: this.getColumnGroupProps(),\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          type: 'header',\n          scrollable: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 || (_this$$parentInstance = _this$$parentInstance.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.scrollable\n        }\n      };\n      return mergeProps(this.ptm(\"columnGroup.\".concat(key), {\n        columnGroup: columnGroupMetaData\n      }), this.ptm(\"columnGroup.\".concat(key), columnGroupMetaData), this.ptmo(this.getColumnGroupProps(), key, columnGroupMetaData));\n    },\n    getColumnGroupProps: function getColumnGroupProps() {\n      return this.columnGroup && this.columnGroup.props && this.columnGroup.props.pt ? this.columnGroup.props.pt : undefined; //@todo\n    },\n    getRowPT: function getRowPT(row, key, index) {\n      var rowMetaData = {\n        props: row.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: index\n        }\n      };\n      return mergeProps(this.ptm(\"row.\".concat(key), {\n        row: rowMetaData\n      }), this.ptm(\"row.\".concat(key), rowMetaData), this.ptmo(this.getRowProp(row), key, rowMetaData));\n    },\n    getRowProp: function getRowProp(row) {\n      return row.props && row.props.pt ? row.props.pt : undefined; //@todo\n    },\n    getColumnPT: function getColumnPT(column, key, index) {\n      var columnMetaData = {\n        props: column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: index\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(column), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp(column) {\n      return column.props && column.props.pt ? column.props.pt : undefined; //@todo\n    },\n    getFilterColumnHeaderClass: function getFilterColumnHeaderClass(column) {\n      return [this.cx('headerCell', {\n        column: column\n      }), this.columnProp(column, 'filterHeaderClass'), this.columnProp(column, 'class')];\n    },\n    getFilterColumnHeaderStyle: function getFilterColumnHeaderStyle(column) {\n      return [this.columnProp(column, 'filterHeaderStyle'), this.columnProp(column, 'style')];\n    },\n    getHeaderRows: function getHeaderRows() {\n      var _this$d_headerRows;\n      return (_this$d_headerRows = this.d_headerRows) === null || _this$d_headerRows === void 0 ? void 0 : _this$d_headerRows.get(this.columnGroup, this.columnGroup.children);\n    },\n    getHeaderColumns: function getHeaderColumns(row) {\n      var _this$d_headerColumns;\n      return (_this$d_headerColumns = this.d_headerColumns) === null || _this$d_headerColumns === void 0 ? void 0 : _this$d_headerColumns.get(row, row.children);\n    }\n  },\n  computed: {\n    ptmTHeadOptions: function ptmTHeadOptions() {\n      var _this$$parentInstance2;\n      return {\n        context: {\n          scrollable: (_this$$parentInstance2 = this.$parentInstance) === null || _this$$parentInstance2 === void 0 || (_this$$parentInstance2 = _this$$parentInstance2.$parentInstance) === null || _this$$parentInstance2 === void 0 ? void 0 : _this$$parentInstance2.scrollable\n        }\n      };\n    }\n  },\n  components: {\n    DTHeaderCell: script$2,\n    DTHeaderCheckbox: script$3,\n    DTColumnFilter: script$4\n  }\n};\n\nfunction _typeof$2(o) { \"@babel/helpers - typeof\"; return _typeof$2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$2(o); }\nfunction ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$2(obj, key, value) { key = _toPropertyKey$2(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey$2(t) { var i = _toPrimitive$2(t, \"string\"); return \"symbol\" == _typeof$2(i) ? i : String(i); }\nfunction _toPrimitive$2(t, r) { if (\"object\" != _typeof$2(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof$2(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_DTHeaderCell = resolveComponent(\"DTHeaderCell\");\n  var _component_DTHeaderCheckbox = resolveComponent(\"DTHeaderCheckbox\");\n  var _component_DTColumnFilter = resolveComponent(\"DTColumnFilter\");\n  return openBlock(), createElementBlock(\"thead\", mergeProps({\n    \"class\": _ctx.cx('thead'),\n    style: _ctx.sx('thead'),\n    role: \"rowgroup\"\n  }, $props.columnGroup ? _objectSpread$2(_objectSpread$2({}, _ctx.ptm('thead', $options.ptmTHeadOptions)), $options.getColumnGroupPT('root')) : _ctx.ptm('thead', $options.ptmTHeadOptions), {\n    \"data-pc-section\": \"thead\"\n  }), [!$props.columnGroup ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [createElementVNode(\"tr\", mergeProps({\n    role: \"row\"\n  }, _ctx.ptm('headerRow')), [(openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, function (col, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || i\n    }, [!$options.columnProp(col, 'hidden') && ($props.rowGroupMode !== 'subheader' || $props.groupRowsBy !== $options.columnProp(col, 'field')) ? (openBlock(), createBlock(_component_DTHeaderCell, {\n      key: 0,\n      column: col,\n      index: i,\n      onColumnClick: _cache[0] || (_cache[0] = function ($event) {\n        return _ctx.$emit('column-click', $event);\n      }),\n      onColumnMousedown: _cache[1] || (_cache[1] = function ($event) {\n        return _ctx.$emit('column-mousedown', $event);\n      }),\n      onColumnDragstart: _cache[2] || (_cache[2] = function ($event) {\n        return _ctx.$emit('column-dragstart', $event);\n      }),\n      onColumnDragover: _cache[3] || (_cache[3] = function ($event) {\n        return _ctx.$emit('column-dragover', $event);\n      }),\n      onColumnDragleave: _cache[4] || (_cache[4] = function ($event) {\n        return _ctx.$emit('column-dragleave', $event);\n      }),\n      onColumnDrop: _cache[5] || (_cache[5] = function ($event) {\n        return _ctx.$emit('column-drop', $event);\n      }),\n      groupRowsBy: $props.groupRowsBy,\n      groupRowSortField: $props.groupRowSortField,\n      reorderableColumns: $props.reorderableColumns,\n      resizableColumns: $props.resizableColumns,\n      onColumnResizestart: _cache[6] || (_cache[6] = function ($event) {\n        return _ctx.$emit('column-resizestart', $event);\n      }),\n      sortMode: $props.sortMode,\n      sortField: $props.sortField,\n      sortOrder: $props.sortOrder,\n      multiSortMeta: $props.multiSortMeta,\n      allRowsSelected: $props.allRowsSelected,\n      empty: $props.empty,\n      onCheckboxChange: _cache[7] || (_cache[7] = function ($event) {\n        return _ctx.$emit('checkbox-change', $event);\n      }),\n      filters: $props.filters,\n      filterDisplay: $props.filterDisplay,\n      filtersStore: $props.filtersStore,\n      filterInputProps: $props.filterInputProps,\n      first: $props.first,\n      onFilterChange: _cache[8] || (_cache[8] = function ($event) {\n        return _ctx.$emit('filter-change', $event);\n      }),\n      onFilterApply: _cache[9] || (_cache[9] = function ($event) {\n        return _ctx.$emit('filter-apply');\n      }),\n      onOperatorChange: _cache[10] || (_cache[10] = function ($event) {\n        return _ctx.$emit('operator-change', $event);\n      }),\n      onMatchmodeChange: _cache[11] || (_cache[11] = function ($event) {\n        return _ctx.$emit('matchmode-change', $event);\n      }),\n      onConstraintAdd: _cache[12] || (_cache[12] = function ($event) {\n        return _ctx.$emit('constraint-add', $event);\n      }),\n      onConstraintRemove: _cache[13] || (_cache[13] = function ($event) {\n        return _ctx.$emit('constraint-remove', $event);\n      }),\n      onApplyClick: _cache[14] || (_cache[14] = function ($event) {\n        return _ctx.$emit('apply-click', $event);\n      }),\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"column\", \"index\", \"groupRowsBy\", \"groupRowSortField\", \"reorderableColumns\", \"resizableColumns\", \"sortMode\", \"sortField\", \"sortOrder\", \"multiSortMeta\", \"allRowsSelected\", \"empty\", \"filters\", \"filterDisplay\", \"filtersStore\", \"filterInputProps\", \"first\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16), $props.filterDisplay === 'row' ? (openBlock(), createElementBlock(\"tr\", mergeProps({\n    key: 0,\n    role: \"row\"\n  }, _ctx.ptm('headerRow')), [(openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, function (col, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || i\n    }, [!$options.columnProp(col, 'hidden') && ($props.rowGroupMode !== 'subheader' || $props.groupRowsBy !== $options.columnProp(col, 'field')) ? (openBlock(), createElementBlock(\"th\", mergeProps({\n      key: 0,\n      style: $options.getFilterColumnHeaderStyle(col),\n      \"class\": $options.getFilterColumnHeaderClass(col)\n    }, _objectSpread$2(_objectSpread$2({}, $options.getColumnPT(col, 'root', i)), $options.getColumnPT(col, 'headerCell', i))), [$options.columnProp(col, 'selectionMode') === 'multiple' ? (openBlock(), createBlock(_component_DTHeaderCheckbox, {\n      key: 0,\n      checked: $props.allRowsSelected,\n      disabled: $props.empty,\n      onChange: _cache[15] || (_cache[15] = function ($event) {\n        return _ctx.$emit('checkbox-change', $event);\n      }),\n      column: col,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"checked\", \"disabled\", \"column\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true), col.children && col.children.filter ? (openBlock(), createBlock(_component_DTColumnFilter, {\n      key: 1,\n      field: $options.columnProp(col, 'filterField') || $options.columnProp(col, 'field'),\n      type: $options.columnProp(col, 'dataType'),\n      display: \"row\",\n      showMenu: $options.columnProp(col, 'showFilterMenu'),\n      filterElement: col.children && col.children.filter,\n      filterHeaderTemplate: col.children && col.children.filterheader,\n      filterFooterTemplate: col.children && col.children.filterfooter,\n      filterClearTemplate: col.children && col.children.filterclear,\n      filterApplyTemplate: col.children && col.children.filterapply,\n      filterIconTemplate: col.children && col.children.filtericon,\n      filterAddIconTemplate: col.children && col.children.filteraddicon,\n      filterRemoveIconTemplate: col.children && col.children.filterremoveicon,\n      filterClearIconTemplate: col.children && col.children.filterclearicon,\n      filters: $props.filters,\n      filtersStore: $props.filtersStore,\n      filterInputProps: $props.filterInputProps,\n      onFilterChange: _cache[16] || (_cache[16] = function ($event) {\n        return _ctx.$emit('filter-change', $event);\n      }),\n      onFilterApply: _cache[17] || (_cache[17] = function ($event) {\n        return _ctx.$emit('filter-apply');\n      }),\n      filterMenuStyle: $options.columnProp(col, 'filterMenuStyle'),\n      filterMenuClass: $options.columnProp(col, 'filterMenuClass'),\n      showOperator: $options.columnProp(col, 'showFilterOperator'),\n      showClearButton: $options.columnProp(col, 'showClearButton'),\n      showApplyButton: $options.columnProp(col, 'showApplyButton'),\n      showMatchModes: $options.columnProp(col, 'showFilterMatchModes'),\n      showAddButton: $options.columnProp(col, 'showAddButton'),\n      matchModeOptions: $options.columnProp(col, 'filterMatchModeOptions'),\n      maxConstraints: $options.columnProp(col, 'maxConstraints'),\n      onOperatorChange: _cache[18] || (_cache[18] = function ($event) {\n        return _ctx.$emit('operator-change', $event);\n      }),\n      onMatchmodeChange: _cache[19] || (_cache[19] = function ($event) {\n        return _ctx.$emit('matchmode-change', $event);\n      }),\n      onConstraintAdd: _cache[20] || (_cache[20] = function ($event) {\n        return _ctx.$emit('constraint-add', $event);\n      }),\n      onConstraintRemove: _cache[21] || (_cache[21] = function ($event) {\n        return _ctx.$emit('constraint-remove', $event);\n      }),\n      onApplyClick: _cache[22] || (_cache[22] = function ($event) {\n        return _ctx.$emit('apply-click', $event);\n      }),\n      column: col,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"field\", \"type\", \"showMenu\", \"filterElement\", \"filterHeaderTemplate\", \"filterFooterTemplate\", \"filterClearTemplate\", \"filterApplyTemplate\", \"filterIconTemplate\", \"filterAddIconTemplate\", \"filterRemoveIconTemplate\", \"filterClearIconTemplate\", \"filters\", \"filtersStore\", \"filterInputProps\", \"filterMenuStyle\", \"filterMenuClass\", \"showOperator\", \"showClearButton\", \"showApplyButton\", \"showMatchModes\", \"showAddButton\", \"matchModeOptions\", \"maxConstraints\", \"column\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 16)) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16)) : createCommentVNode(\"\", true)], 64)) : (openBlock(true), createElementBlock(Fragment, {\n    key: 1\n  }, renderList($options.getHeaderRows(), function (row, i) {\n    return openBlock(), createElementBlock(\"tr\", mergeProps({\n      key: i,\n      role: \"row\"\n    }, _objectSpread$2(_objectSpread$2({}, _ctx.ptm('headerRow')), $options.getRowPT(row, 'root', i))), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.getHeaderColumns(row), function (col, j) {\n      return openBlock(), createElementBlock(Fragment, {\n        key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || j\n      }, [!$options.columnProp(col, 'hidden') && ($props.rowGroupMode !== 'subheader' || $props.groupRowsBy !== $options.columnProp(col, 'field')) && typeof col.children !== 'string' ? (openBlock(), createBlock(_component_DTHeaderCell, {\n        key: 0,\n        column: col,\n        onColumnClick: _cache[23] || (_cache[23] = function ($event) {\n          return _ctx.$emit('column-click', $event);\n        }),\n        onColumnMousedown: _cache[24] || (_cache[24] = function ($event) {\n          return _ctx.$emit('column-mousedown', $event);\n        }),\n        groupRowsBy: $props.groupRowsBy,\n        groupRowSortField: $props.groupRowSortField,\n        sortMode: $props.sortMode,\n        sortField: $props.sortField,\n        sortOrder: $props.sortOrder,\n        multiSortMeta: $props.multiSortMeta,\n        allRowsSelected: $props.allRowsSelected,\n        empty: $props.empty,\n        onCheckboxChange: _cache[25] || (_cache[25] = function ($event) {\n          return _ctx.$emit('checkbox-change', $event);\n        }),\n        filters: $props.filters,\n        filterDisplay: $props.filterDisplay,\n        filtersStore: $props.filtersStore,\n        onFilterChange: _cache[26] || (_cache[26] = function ($event) {\n          return _ctx.$emit('filter-change', $event);\n        }),\n        onFilterApply: _cache[27] || (_cache[27] = function ($event) {\n          return _ctx.$emit('filter-apply');\n        }),\n        onOperatorChange: _cache[28] || (_cache[28] = function ($event) {\n          return _ctx.$emit('operator-change', $event);\n        }),\n        onMatchmodeChange: _cache[29] || (_cache[29] = function ($event) {\n          return _ctx.$emit('matchmode-change', $event);\n        }),\n        onConstraintAdd: _cache[30] || (_cache[30] = function ($event) {\n          return _ctx.$emit('constraint-add', $event);\n        }),\n        onConstraintRemove: _cache[31] || (_cache[31] = function ($event) {\n          return _ctx.$emit('constraint-remove', $event);\n        }),\n        onApplyClick: _cache[32] || (_cache[32] = function ($event) {\n          return _ctx.$emit('apply-click', $event);\n        }),\n        unstyled: _ctx.unstyled,\n        pt: _ctx.pt\n      }, null, 8, [\"column\", \"groupRowsBy\", \"groupRowSortField\", \"sortMode\", \"sortField\", \"sortOrder\", \"multiSortMeta\", \"allRowsSelected\", \"empty\", \"filters\", \"filterDisplay\", \"filtersStore\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 64);\n    }), 128))], 16);\n  }), 128))], 16);\n}\n\nscript$1.render = render$1;\n\nfunction _typeof$1(o) { \"@babel/helpers - typeof\"; return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$1(o); }\nvar _excluded = [\"expanded\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$1(obj, key, value) { key = _toPropertyKey$1(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey$1(t) { var i = _toPrimitive$1(t, \"string\"); return \"symbol\" == _typeof$1(i) ? i : String(i); }\nfunction _toPrimitive$1(t, r) { if (\"object\" != _typeof$1(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof$1(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar script = {\n  name: 'DataTable',\n  \"extends\": script$c,\n  inheritAttrs: false,\n  emits: ['value-change', 'update:first', 'update:rows', 'page', 'update:sortField', 'update:sortOrder', 'update:multiSortMeta', 'sort', 'filter', 'row-click', 'row-dblclick', 'update:selection', 'row-select', 'row-unselect', 'update:contextMenuSelection', 'row-contextmenu', 'row-unselect-all', 'row-select-all', 'select-all-change', 'column-resize-end', 'column-reorder', 'row-reorder', 'update:expandedRows', 'row-collapse', 'row-expand', 'update:expandedRowGroups', 'rowgroup-collapse', 'rowgroup-expand', 'update:filters', 'state-restore', 'state-save', 'cell-edit-init', 'cell-edit-complete', 'cell-edit-cancel', 'update:editingRows', 'row-edit-init', 'row-edit-save', 'row-edit-cancel'],\n  provide: function provide() {\n    return {\n      $columns: this.d_columns,\n      $columnGroups: this.d_columnGroups\n    };\n  },\n  data: function data() {\n    return {\n      d_first: this.first,\n      d_rows: this.rows,\n      d_sortField: this.sortField,\n      d_sortOrder: this.sortOrder,\n      d_nullSortOrder: this.nullSortOrder,\n      d_multiSortMeta: this.multiSortMeta ? _toConsumableArray(this.multiSortMeta) : [],\n      d_groupRowsSortMeta: null,\n      d_selectionKeys: null,\n      d_columnOrder: null,\n      d_editingRowKeys: null,\n      d_editingMeta: {},\n      d_filters: this.cloneFilters(this.filters),\n      d_columns: new HelperSet({\n        type: 'Column'\n      }),\n      d_columnGroups: new HelperSet({\n        type: 'ColumnGroup'\n      })\n    };\n  },\n  rowTouched: false,\n  anchorRowIndex: null,\n  rangeRowIndex: null,\n  documentColumnResizeListener: null,\n  documentColumnResizeEndListener: null,\n  lastResizeHelperX: null,\n  resizeColumnElement: null,\n  columnResizing: false,\n  colReorderIconWidth: null,\n  colReorderIconHeight: null,\n  draggedColumn: null,\n  draggedColumnElement: null,\n  draggedRowIndex: null,\n  droppedRowIndex: null,\n  rowDragging: null,\n  columnWidthsState: null,\n  tableWidthState: null,\n  columnWidthsRestored: false,\n  watch: {\n    first: function first(newValue) {\n      this.d_first = newValue;\n    },\n    rows: function rows(newValue) {\n      this.d_rows = newValue;\n    },\n    sortField: function sortField(newValue) {\n      this.d_sortField = newValue;\n    },\n    sortOrder: function sortOrder(newValue) {\n      this.d_sortOrder = newValue;\n    },\n    nullSortOrder: function nullSortOrder(newValue) {\n      this.d_nullSortOrder = newValue;\n    },\n    multiSortMeta: function multiSortMeta(newValue) {\n      this.d_multiSortMeta = newValue;\n    },\n    selection: {\n      immediate: true,\n      handler: function handler(newValue) {\n        if (this.dataKey) {\n          this.updateSelectionKeys(newValue);\n        }\n      }\n    },\n    editingRows: {\n      immediate: true,\n      handler: function handler(newValue) {\n        if (this.dataKey) {\n          this.updateEditingRowKeys(newValue);\n        }\n      }\n    },\n    filters: {\n      deep: true,\n      handler: function handler(newValue) {\n        this.d_filters = this.cloneFilters(newValue);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.$el.setAttribute(this.attributeSelector, '');\n    if (this.responsiveLayout === 'stack' && !this.scrollable && !this.unstyled) {\n      this.createResponsiveStyle();\n    }\n    if (this.isStateful()) {\n      this.restoreState();\n      this.resizableColumns && this.restoreColumnWidths();\n    }\n    if (this.editMode === 'row' && this.dataKey && !this.d_editingRowKeys) {\n      this.updateEditingRowKeys(this.editingRows);\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.unbindColumnResizeEvents();\n    this.destroyStyleElement();\n    this.destroyResponsiveStyle();\n    this.d_columns.clear();\n    this.d_columnGroups.clear();\n  },\n  updated: function updated() {\n    if (this.isStateful()) {\n      this.saveState();\n    }\n    if (this.editMode === 'row' && this.dataKey && !this.d_editingRowKeys) {\n      this.updateEditingRowKeys(this.editingRows);\n    }\n  },\n  methods: {\n    columnProp: function columnProp(col, prop) {\n      return ObjectUtils.getVNodeProp(col, prop);\n    },\n    onPage: function onPage(event) {\n      var _this = this;\n      this.clearEditingMetaData();\n      this.d_first = event.first;\n      this.d_rows = event.rows;\n      var pageEvent = this.createLazyLoadEvent(event);\n      pageEvent.pageCount = event.pageCount;\n      pageEvent.page = event.page;\n      this.$emit('update:first', this.d_first);\n      this.$emit('update:rows', this.d_rows);\n      this.$emit('page', pageEvent);\n      this.$nextTick(function () {\n        _this.$emit('value-change', _this.processedData);\n      });\n    },\n    onColumnHeaderClick: function onColumnHeaderClick(e) {\n      var _this2 = this;\n      var event = e.originalEvent;\n      var column = e.column;\n      if (this.columnProp(column, 'sortable')) {\n        var targetNode = event.target;\n        var columnField = this.columnProp(column, 'sortField') || this.columnProp(column, 'field');\n        if (DomHandler.getAttribute(targetNode, 'data-p-sortable-column') === true || DomHandler.getAttribute(targetNode, 'data-pc-section') === 'headertitle' || DomHandler.getAttribute(targetNode, 'data-pc-section') === 'headercontent' || DomHandler.getAttribute(targetNode, 'data-pc-section') === 'sorticon' || DomHandler.getAttribute(targetNode.parentElement, 'data-pc-section') === 'sorticon' || DomHandler.getAttribute(targetNode.parentElement.parentElement, 'data-pc-section') === 'sorticon' || targetNode.closest('[data-p-sortable-column=\"true\"]') && !targetNode.closest('[data-pc-section=\"filtermenubutton\"]') && !DomHandler.isClickable(event.target)) {\n          DomHandler.clearSelection();\n          if (this.sortMode === 'single') {\n            if (this.d_sortField === columnField) {\n              if (this.removableSort && this.d_sortOrder * -1 === this.defaultSortOrder) {\n                this.d_sortOrder = null;\n                this.d_sortField = null;\n              } else {\n                this.d_sortOrder = this.d_sortOrder * -1;\n              }\n            } else {\n              this.d_sortOrder = this.defaultSortOrder;\n              this.d_sortField = columnField;\n            }\n            this.$emit('update:sortField', this.d_sortField);\n            this.$emit('update:sortOrder', this.d_sortOrder);\n            this.resetPage();\n          } else if (this.sortMode === 'multiple') {\n            var metaKey = event.metaKey || event.ctrlKey;\n            if (!metaKey) {\n              this.d_multiSortMeta = this.d_multiSortMeta.filter(function (meta) {\n                return meta.field === columnField;\n              });\n            }\n            this.addMultiSortField(columnField);\n            this.$emit('update:multiSortMeta', this.d_multiSortMeta);\n          }\n          this.$emit('sort', this.createLazyLoadEvent(event));\n          this.$nextTick(function () {\n            _this2.$emit('value-change', _this2.processedData);\n          });\n        }\n      }\n    },\n    sortSingle: function sortSingle(value) {\n      var _this3 = this;\n      this.clearEditingMetaData();\n      if (this.groupRowsBy && this.groupRowsBy === this.sortField) {\n        this.d_multiSortMeta = [{\n          field: this.sortField,\n          order: this.sortOrder || this.defaultSortOrder\n        }, {\n          field: this.d_sortField,\n          order: this.d_sortOrder\n        }];\n        return this.sortMultiple(value);\n      }\n      var data = _toConsumableArray(value);\n      var resolvedFieldData = new Map();\n      var _iterator = _createForOfIteratorHelper(data),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          resolvedFieldData.set(item, ObjectUtils.resolveFieldData(item, this.d_sortField));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var comparer = ObjectUtils.localeComparator();\n      data.sort(function (data1, data2) {\n        var value1 = resolvedFieldData.get(data1);\n        var value2 = resolvedFieldData.get(data2);\n        return ObjectUtils.sort(value1, value2, _this3.d_sortOrder, comparer, _this3.d_nullSortOrder);\n      });\n      return data;\n    },\n    sortMultiple: function sortMultiple(value) {\n      var _this4 = this;\n      this.clearEditingMetaData();\n      if (this.groupRowsBy && (this.d_groupRowsSortMeta || this.d_multiSortMeta.length && this.groupRowsBy === this.d_multiSortMeta[0].field)) {\n        var firstSortMeta = this.d_multiSortMeta[0];\n        !this.d_groupRowsSortMeta && (this.d_groupRowsSortMeta = firstSortMeta);\n        if (firstSortMeta.field !== this.d_groupRowsSortMeta.field) {\n          this.d_multiSortMeta = [this.d_groupRowsSortMeta].concat(_toConsumableArray(this.d_multiSortMeta));\n        }\n      }\n      var data = _toConsumableArray(value);\n      data.sort(function (data1, data2) {\n        return _this4.multisortField(data1, data2, 0);\n      });\n      return data;\n    },\n    multisortField: function multisortField(data1, data2, index) {\n      var value1 = ObjectUtils.resolveFieldData(data1, this.d_multiSortMeta[index].field);\n      var value2 = ObjectUtils.resolveFieldData(data2, this.d_multiSortMeta[index].field);\n      var comparer = ObjectUtils.localeComparator();\n      if (value1 === value2) {\n        return this.d_multiSortMeta.length - 1 > index ? this.multisortField(data1, data2, index + 1) : 0;\n      }\n      return ObjectUtils.sort(value1, value2, this.d_multiSortMeta[index].order, comparer, this.d_nullSortOrder);\n    },\n    addMultiSortField: function addMultiSortField(field) {\n      var index = this.d_multiSortMeta.findIndex(function (meta) {\n        return meta.field === field;\n      });\n      if (index >= 0) {\n        if (this.removableSort && this.d_multiSortMeta[index].order * -1 === this.defaultSortOrder) this.d_multiSortMeta.splice(index, 1);else this.d_multiSortMeta[index] = {\n          field: field,\n          order: this.d_multiSortMeta[index].order * -1\n        };\n      } else {\n        this.d_multiSortMeta.push({\n          field: field,\n          order: this.defaultSortOrder\n        });\n      }\n      this.d_multiSortMeta = _toConsumableArray(this.d_multiSortMeta);\n    },\n    getActiveFilters: function getActiveFilters(filters) {\n      var removeEmptyFilters = function removeEmptyFilters(_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        if (value.constraints) {\n          var filteredConstraints = value.constraints.filter(function (constraint) {\n            return constraint.value !== null;\n          });\n          if (filteredConstraints.length > 0) {\n            return [key, _objectSpread$1(_objectSpread$1({}, value), {}, {\n              constraints: filteredConstraints\n            })];\n          }\n        } else if (value.value !== null) {\n          return [key, value];\n        }\n        return undefined;\n      };\n      var filterValidEntries = function filterValidEntries(entry) {\n        return entry !== undefined;\n      };\n      var entries = Object.entries(filters).map(removeEmptyFilters).filter(filterValidEntries);\n      return Object.fromEntries(entries);\n    },\n    filter: function filter(data) {\n      var _this5 = this;\n      if (!data) {\n        return;\n      }\n      this.clearEditingMetaData();\n      var activeFilters = this.getActiveFilters(this.filters);\n      var globalFilterFieldsArray;\n      if (activeFilters['global']) {\n        globalFilterFieldsArray = this.globalFilterFields || this.columns.map(function (col) {\n          return _this5.columnProp(col, 'filterField') || _this5.columnProp(col, 'field');\n        });\n      }\n      var filteredValue = [];\n      for (var i = 0; i < data.length; i++) {\n        var localMatch = true;\n        var globalMatch = false;\n        var localFiltered = false;\n        for (var prop in activeFilters) {\n          if (Object.prototype.hasOwnProperty.call(activeFilters, prop) && prop !== 'global') {\n            localFiltered = true;\n            var filterField = prop;\n            var filterMeta = activeFilters[filterField];\n            if (filterMeta.operator) {\n              var _iterator2 = _createForOfIteratorHelper(filterMeta.constraints),\n                _step2;\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var filterConstraint = _step2.value;\n                  localMatch = this.executeLocalFilter(filterField, data[i], filterConstraint);\n                  if (filterMeta.operator === FilterOperator.OR && localMatch || filterMeta.operator === FilterOperator.AND && !localMatch) {\n                    break;\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            } else {\n              localMatch = this.executeLocalFilter(filterField, data[i], filterMeta);\n            }\n            if (!localMatch) {\n              break;\n            }\n          }\n        }\n        if (localMatch && activeFilters['global'] && !globalMatch && globalFilterFieldsArray) {\n          for (var j = 0; j < globalFilterFieldsArray.length; j++) {\n            var globalFilterField = globalFilterFieldsArray[j];\n            globalMatch = FilterService.filters[activeFilters['global'].matchMode || FilterMatchMode.CONTAINS](ObjectUtils.resolveFieldData(data[i], globalFilterField), activeFilters['global'].value, this.filterLocale);\n            if (globalMatch) {\n              break;\n            }\n          }\n        }\n        var matches = void 0;\n        if (activeFilters['global']) {\n          matches = localFiltered ? localFiltered && localMatch && globalMatch : globalMatch;\n        } else {\n          matches = localFiltered && localMatch;\n        }\n        if (matches) {\n          filteredValue.push(data[i]);\n        }\n      }\n      if (filteredValue.length === this.value.length || Object.keys(activeFilters).length == 0) {\n        filteredValue = data;\n      }\n      var filterEvent = this.createLazyLoadEvent();\n      filterEvent.filteredValue = filteredValue;\n      this.$emit('filter', filterEvent);\n      this.$nextTick(function () {\n        _this5.$emit('value-change', _this5.processedData);\n      });\n      return filteredValue;\n    },\n    executeLocalFilter: function executeLocalFilter(field, rowData, filterMeta) {\n      var filterValue = filterMeta.value;\n      var filterMatchMode = filterMeta.matchMode || FilterMatchMode.STARTS_WITH;\n      var dataFieldValue = ObjectUtils.resolveFieldData(rowData, field);\n      var filterConstraint = FilterService.filters[filterMatchMode];\n      return filterConstraint(dataFieldValue, filterValue, this.filterLocale);\n    },\n    onRowClick: function onRowClick(e) {\n      var event = e.originalEvent;\n      var body = this.$refs.bodyRef && this.$refs.bodyRef.$el;\n      var focusedItem = DomHandler.findSingle(body, 'tr[data-p-selectable-row=\"true\"][tabindex=\"0\"]');\n      if (DomHandler.isClickable(event.target)) {\n        return;\n      }\n      this.$emit('row-click', e);\n      if (this.selectionMode) {\n        var rowData = e.data;\n        var rowIndex = this.d_first + e.index;\n        if (this.isMultipleSelectionMode() && event.shiftKey && this.anchorRowIndex != null) {\n          DomHandler.clearSelection();\n          this.rangeRowIndex = rowIndex;\n          this.selectRange(event);\n        } else {\n          var selected = this.isSelected(rowData);\n          var metaSelection = this.rowTouched ? false : this.metaKeySelection;\n          this.anchorRowIndex = rowIndex;\n          this.rangeRowIndex = rowIndex;\n          if (metaSelection) {\n            var metaKey = event.metaKey || event.ctrlKey;\n            if (selected && metaKey) {\n              if (this.isSingleSelectionMode()) {\n                this.$emit('update:selection', null);\n              } else {\n                var selectionIndex = this.findIndexInSelection(rowData);\n                var _selection = this.selection.filter(function (val, i) {\n                  return i != selectionIndex;\n                });\n                this.$emit('update:selection', _selection);\n              }\n              this.$emit('row-unselect', {\n                originalEvent: event,\n                data: rowData,\n                index: rowIndex,\n                type: 'row'\n              });\n            } else {\n              if (this.isSingleSelectionMode()) {\n                this.$emit('update:selection', rowData);\n              } else if (this.isMultipleSelectionMode()) {\n                var _selection2 = metaKey ? this.selection || [] : [];\n                _selection2 = [].concat(_toConsumableArray(_selection2), [rowData]);\n                this.$emit('update:selection', _selection2);\n              }\n              this.$emit('row-select', {\n                originalEvent: event,\n                data: rowData,\n                index: rowIndex,\n                type: 'row'\n              });\n            }\n          } else {\n            if (this.selectionMode === 'single') {\n              if (selected) {\n                this.$emit('update:selection', null);\n                this.$emit('row-unselect', {\n                  originalEvent: event,\n                  data: rowData,\n                  index: rowIndex,\n                  type: 'row'\n                });\n              } else {\n                this.$emit('update:selection', rowData);\n                this.$emit('row-select', {\n                  originalEvent: event,\n                  data: rowData,\n                  index: rowIndex,\n                  type: 'row'\n                });\n              }\n            } else if (this.selectionMode === 'multiple') {\n              if (selected) {\n                var _selectionIndex = this.findIndexInSelection(rowData);\n                var _selection3 = this.selection.filter(function (val, i) {\n                  return i != _selectionIndex;\n                });\n                this.$emit('update:selection', _selection3);\n                this.$emit('row-unselect', {\n                  originalEvent: event,\n                  data: rowData,\n                  index: rowIndex,\n                  type: 'row'\n                });\n              } else {\n                var _selection4 = this.selection ? [].concat(_toConsumableArray(this.selection), [rowData]) : [rowData];\n                this.$emit('update:selection', _selection4);\n                this.$emit('row-select', {\n                  originalEvent: event,\n                  data: rowData,\n                  index: rowIndex,\n                  type: 'row'\n                });\n              }\n            }\n          }\n        }\n      }\n      this.rowTouched = false;\n      if (focusedItem) {\n        var _event$target, _event$target2, _event$target3;\n        if (((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.getAttribute('data-pc-section')) === 'rowtogglericon' || ((_event$target2 = event.target) === null || _event$target2 === void 0 || (_event$target2 = _event$target2.parentElement) === null || _event$target2 === void 0 ? void 0 : _event$target2.getAttribute('data-pc-section')) === 'rowtogglericon') return;\n        var targetRow = (_event$target3 = event.target) === null || _event$target3 === void 0 ? void 0 : _event$target3.closest('tr[data-p-selectable-row=\"true\"]');\n        focusedItem.tabIndex = '-1';\n        targetRow.tabIndex = '0';\n      }\n    },\n    onRowDblClick: function onRowDblClick(e) {\n      var event = e.originalEvent;\n      if (DomHandler.isClickable(event.target)) {\n        return;\n      }\n      this.$emit('row-dblclick', e);\n    },\n    onRowRightClick: function onRowRightClick(event) {\n      if (this.contextMenu) {\n        DomHandler.clearSelection();\n        event.originalEvent.target.focus();\n      }\n      this.$emit('update:contextMenuSelection', event.data);\n      this.$emit('row-contextmenu', event);\n    },\n    onRowTouchEnd: function onRowTouchEnd() {\n      this.rowTouched = true;\n    },\n    onRowKeyDown: function onRowKeyDown(e, slotProps) {\n      var event = e.originalEvent;\n      var rowData = e.data;\n      var rowIndex = e.index;\n      var metaKey = event.metaKey || event.ctrlKey;\n      if (this.selectionMode) {\n        var row = event.target;\n        switch (event.code) {\n          case 'ArrowDown':\n            this.onArrowDownKey(event, row, rowIndex, slotProps);\n            break;\n          case 'ArrowUp':\n            this.onArrowUpKey(event, row, rowIndex, slotProps);\n            break;\n          case 'Home':\n            this.onHomeKey(event, row, rowIndex, slotProps);\n            break;\n          case 'End':\n            this.onEndKey(event, row, rowIndex, slotProps);\n            break;\n          case 'Enter':\n          case 'NumpadEnter':\n            this.onEnterKey(event, rowData, rowIndex);\n            break;\n          case 'Space':\n            this.onSpaceKey(event, rowData, rowIndex, slotProps);\n            break;\n          case 'Tab':\n            this.onTabKey(event, rowIndex);\n            break;\n          default:\n            if (event.code === 'KeyA' && metaKey && this.isMultipleSelectionMode()) {\n              var data = this.dataToRender(slotProps.rows);\n              this.$emit('update:selection', data);\n            }\n            var isCopyShortcut = event.code === 'KeyC' && metaKey;\n            if (!isCopyShortcut) event.preventDefault();\n            break;\n        }\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event, row, rowIndex, slotProps) {\n      var nextRow = this.findNextSelectableRow(row);\n      nextRow && this.focusRowChange(row, nextRow);\n      if (event.shiftKey) {\n        var data = this.dataToRender(slotProps.rows);\n        var nextRowIndex = rowIndex + 1 >= data.length ? data.length - 1 : rowIndex + 1;\n        this.onRowClick({\n          originalEvent: event,\n          data: data[nextRowIndex],\n          index: nextRowIndex\n        });\n      }\n      event.preventDefault();\n    },\n    onArrowUpKey: function onArrowUpKey(event, row, rowIndex, slotProps) {\n      var prevRow = this.findPrevSelectableRow(row);\n      prevRow && this.focusRowChange(row, prevRow);\n      if (event.shiftKey) {\n        var data = this.dataToRender(slotProps.rows);\n        var prevRowIndex = rowIndex - 1 <= 0 ? 0 : rowIndex - 1;\n        this.onRowClick({\n          originalEvent: event,\n          data: data[prevRowIndex],\n          index: prevRowIndex\n        });\n      }\n      event.preventDefault();\n    },\n    onHomeKey: function onHomeKey(event, row, rowIndex, slotProps) {\n      var firstRow = this.findFirstSelectableRow();\n      firstRow && this.focusRowChange(row, firstRow);\n      if (event.ctrlKey && event.shiftKey) {\n        var data = this.dataToRender(slotProps.rows);\n        this.$emit('update:selection', data.slice(0, rowIndex + 1));\n      }\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event, row, rowIndex, slotProps) {\n      var lastRow = this.findLastSelectableRow();\n      lastRow && this.focusRowChange(row, lastRow);\n      if (event.ctrlKey && event.shiftKey) {\n        var data = this.dataToRender(slotProps.rows);\n        this.$emit('update:selection', data.slice(rowIndex, data.length));\n      }\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event, rowData, rowIndex) {\n      this.onRowClick({\n        originalEvent: event,\n        data: rowData,\n        index: rowIndex\n      });\n      event.preventDefault();\n    },\n    onSpaceKey: function onSpaceKey(event, rowData, rowIndex, slotProps) {\n      this.onEnterKey(event, rowData, rowIndex);\n      if (event.shiftKey && this.selection !== null) {\n        var data = this.dataToRender(slotProps.rows);\n        var index;\n        if (this.selection.length > 0) {\n          var firstSelectedRowIndex, lastSelectedRowIndex;\n          firstSelectedRowIndex = ObjectUtils.findIndexInList(this.selection[0], data);\n          lastSelectedRowIndex = ObjectUtils.findIndexInList(this.selection[this.selection.length - 1], data);\n          index = rowIndex <= firstSelectedRowIndex ? lastSelectedRowIndex : firstSelectedRowIndex;\n        } else {\n          index = ObjectUtils.findIndexInList(this.selection, data);\n        }\n        var _selection = index !== rowIndex ? data.slice(Math.min(index, rowIndex), Math.max(index, rowIndex) + 1) : rowData;\n        this.$emit('update:selection', _selection);\n      }\n    },\n    onTabKey: function onTabKey(event, rowIndex) {\n      var body = this.$refs.bodyRef && this.$refs.bodyRef.$el;\n      var rows = DomHandler.find(body, 'tr[data-p-selectable-row=\"true\"]');\n      if (event.code === 'Tab' && rows && rows.length > 0) {\n        var firstSelectedRow = DomHandler.findSingle(body, 'tr[data-p-highlight=\"true\"]');\n        var focusedItem = DomHandler.findSingle(body, 'tr[data-p-selectable-row=\"true\"][tabindex=\"0\"]');\n        if (firstSelectedRow) {\n          firstSelectedRow.tabIndex = '0';\n          focusedItem && focusedItem !== firstSelectedRow && (focusedItem.tabIndex = '-1');\n        } else {\n          rows[0].tabIndex = '0';\n          focusedItem !== rows[0] && (rows[rowIndex].tabIndex = '-1');\n        }\n      }\n    },\n    findNextSelectableRow: function findNextSelectableRow(row) {\n      var nextRow = row.nextElementSibling;\n      if (nextRow) {\n        if (DomHandler.getAttribute(nextRow, 'data-p-selectable-row') === true) return nextRow;else return this.findNextSelectableRow(nextRow);\n      } else {\n        return null;\n      }\n    },\n    findPrevSelectableRow: function findPrevSelectableRow(row) {\n      var prevRow = row.previousElementSibling;\n      if (prevRow) {\n        if (DomHandler.getAttribute(prevRow, 'data-p-selectable-row') === true) return prevRow;else return this.findPrevSelectableRow(prevRow);\n      } else {\n        return null;\n      }\n    },\n    findFirstSelectableRow: function findFirstSelectableRow() {\n      var firstRow = DomHandler.findSingle(this.$refs.table, 'tr[data-p-selectable-row=\"true\"]');\n      return firstRow;\n    },\n    findLastSelectableRow: function findLastSelectableRow() {\n      var rows = DomHandler.find(this.$refs.table, 'tr[data-p-selectable-row=\"true\"]');\n      return rows ? rows[rows.length - 1] : null;\n    },\n    focusRowChange: function focusRowChange(firstFocusableRow, currentFocusedRow) {\n      firstFocusableRow.tabIndex = '-1';\n      currentFocusedRow.tabIndex = '0';\n      DomHandler.focus(currentFocusedRow);\n    },\n    toggleRowWithRadio: function toggleRowWithRadio(event) {\n      var rowData = event.data;\n      if (this.isSelected(rowData)) {\n        this.$emit('update:selection', null);\n        this.$emit('row-unselect', {\n          originalEvent: event.originalEvent,\n          data: rowData,\n          index: event.index,\n          type: 'radiobutton'\n        });\n      } else {\n        this.$emit('update:selection', rowData);\n        this.$emit('row-select', {\n          originalEvent: event.originalEvent,\n          data: rowData,\n          index: event.index,\n          type: 'radiobutton'\n        });\n      }\n    },\n    toggleRowWithCheckbox: function toggleRowWithCheckbox(event) {\n      var rowData = event.data;\n      if (this.isSelected(rowData)) {\n        var selectionIndex = this.findIndexInSelection(rowData);\n        var _selection = this.selection.filter(function (val, i) {\n          return i != selectionIndex;\n        });\n        this.$emit('update:selection', _selection);\n        this.$emit('row-unselect', {\n          originalEvent: event.originalEvent,\n          data: rowData,\n          index: event.index,\n          type: 'checkbox'\n        });\n      } else {\n        var _selection5 = this.selection ? _toConsumableArray(this.selection) : [];\n        _selection5 = [].concat(_toConsumableArray(_selection5), [rowData]);\n        this.$emit('update:selection', _selection5);\n        this.$emit('row-select', {\n          originalEvent: event.originalEvent,\n          data: rowData,\n          index: event.index,\n          type: 'checkbox'\n        });\n      }\n    },\n    toggleRowsWithCheckbox: function toggleRowsWithCheckbox(event) {\n      if (this.selectAll !== null) {\n        this.$emit('select-all-change', event);\n      } else {\n        var originalEvent = event.originalEvent,\n          checked = event.checked;\n        var _selection = [];\n        if (checked) {\n          _selection = this.frozenValue ? [].concat(_toConsumableArray(this.frozenValue), _toConsumableArray(this.processedData)) : this.processedData;\n          this.$emit('row-select-all', {\n            originalEvent: originalEvent,\n            data: _selection\n          });\n        } else {\n          this.$emit('row-unselect-all', {\n            originalEvent: originalEvent\n          });\n        }\n        this.$emit('update:selection', _selection);\n      }\n    },\n    isSingleSelectionMode: function isSingleSelectionMode() {\n      return this.selectionMode === 'single';\n    },\n    isMultipleSelectionMode: function isMultipleSelectionMode() {\n      return this.selectionMode === 'multiple';\n    },\n    isSelected: function isSelected(rowData) {\n      if (rowData && this.selection) {\n        if (this.dataKey) {\n          return this.d_selectionKeys ? this.d_selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined : false;\n        } else {\n          if (this.selection instanceof Array) return this.findIndexInSelection(rowData) > -1;else return this.equals(rowData, this.selection);\n        }\n      }\n      return false;\n    },\n    findIndexInSelection: function findIndexInSelection(rowData) {\n      return this.findIndex(rowData, this.selection);\n    },\n    findIndex: function findIndex(rowData, collection) {\n      var index = -1;\n      if (collection && collection.length) {\n        for (var i = 0; i < collection.length; i++) {\n          if (this.equals(rowData, collection[i])) {\n            index = i;\n            break;\n          }\n        }\n      }\n      return index;\n    },\n    updateSelectionKeys: function updateSelectionKeys(selection) {\n      this.d_selectionKeys = {};\n      if (Array.isArray(selection)) {\n        var _iterator3 = _createForOfIteratorHelper(selection),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var data = _step3.value;\n            this.d_selectionKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } else {\n        this.d_selectionKeys[String(ObjectUtils.resolveFieldData(selection, this.dataKey))] = 1;\n      }\n    },\n    updateEditingRowKeys: function updateEditingRowKeys(editingRows) {\n      if (editingRows && editingRows.length) {\n        this.d_editingRowKeys = {};\n        var _iterator4 = _createForOfIteratorHelper(editingRows),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var data = _step4.value;\n            this.d_editingRowKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      } else {\n        this.d_editingRowKeys = null;\n      }\n    },\n    equals: function equals(data1, data2) {\n      return this.compareSelectionBy === 'equals' ? data1 === data2 : ObjectUtils.equals(data1, data2, this.dataKey);\n    },\n    selectRange: function selectRange(event) {\n      var rangeStart, rangeEnd;\n      if (this.rangeRowIndex > this.anchorRowIndex) {\n        rangeStart = this.anchorRowIndex;\n        rangeEnd = this.rangeRowIndex;\n      } else if (this.rangeRowIndex < this.anchorRowIndex) {\n        rangeStart = this.rangeRowIndex;\n        rangeEnd = this.anchorRowIndex;\n      } else {\n        rangeStart = this.rangeRowIndex;\n        rangeEnd = this.rangeRowIndex;\n      }\n      if (this.lazy && this.paginator) {\n        rangeStart -= this.first;\n        rangeEnd -= this.first;\n      }\n      var value = this.processedData;\n      var _selection = [];\n      for (var i = rangeStart; i <= rangeEnd; i++) {\n        var rangeRowData = value[i];\n        _selection.push(rangeRowData);\n        this.$emit('row-select', {\n          originalEvent: event,\n          data: rangeRowData,\n          type: 'row'\n        });\n      }\n      this.$emit('update:selection', _selection);\n    },\n    exportCSV: function exportCSV(options, data) {\n      var _this6 = this;\n      var csv = \"\\uFEFF\";\n      if (!data) {\n        data = this.processedData;\n        if (options && options.selectionOnly) data = this.selection || [];else if (this.frozenValue) data = data ? [].concat(_toConsumableArray(this.frozenValue), _toConsumableArray(data)) : this.frozenValue;\n      }\n\n      //headers\n      var headerInitiated = false;\n      for (var i = 0; i < this.columns.length; i++) {\n        var column = this.columns[i];\n        if (this.columnProp(column, 'exportable') !== false && this.columnProp(column, 'field')) {\n          if (headerInitiated) csv += this.csvSeparator;else headerInitiated = true;\n          csv += '\"' + (this.columnProp(column, 'exportHeader') || this.columnProp(column, 'header') || this.columnProp(column, 'field')) + '\"';\n        }\n      }\n\n      //body\n      if (data) {\n        data.forEach(function (record) {\n          csv += '\\n';\n          var rowInitiated = false;\n          for (var _i = 0; _i < _this6.columns.length; _i++) {\n            var _column = _this6.columns[_i];\n            if (_this6.columnProp(_column, 'exportable') !== false && _this6.columnProp(_column, 'field')) {\n              if (rowInitiated) csv += _this6.csvSeparator;else rowInitiated = true;\n              var cellData = ObjectUtils.resolveFieldData(record, _this6.columnProp(_column, 'field'));\n              if (cellData != null) {\n                if (_this6.exportFunction) {\n                  cellData = _this6.exportFunction({\n                    data: cellData,\n                    field: _this6.columnProp(_column, 'field')\n                  });\n                } else cellData = String(cellData).replace(/\"/g, '\"\"');\n              } else cellData = '';\n              csv += '\"' + cellData + '\"';\n            }\n          }\n        });\n      }\n\n      //footers\n      var footerInitiated = false;\n      for (var _i2 = 0; _i2 < this.columns.length; _i2++) {\n        var _column2 = this.columns[_i2];\n        if (_i2 === 0) csv += '\\n';\n        if (this.columnProp(_column2, 'exportable') !== false && this.columnProp(_column2, 'exportFooter')) {\n          if (footerInitiated) csv += this.csvSeparator;else footerInitiated = true;\n          csv += '\"' + (this.columnProp(_column2, 'exportFooter') || this.columnProp(_column2, 'footer') || this.columnProp(_column2, 'field')) + '\"';\n        }\n      }\n      DomHandler.exportCSV(csv, this.exportFilename);\n    },\n    resetPage: function resetPage() {\n      this.d_first = 0;\n      this.$emit('update:first', this.d_first);\n    },\n    onColumnResizeStart: function onColumnResizeStart(event) {\n      var containerLeft = DomHandler.getOffset(this.$el).left;\n      this.resizeColumnElement = event.target.parentElement;\n      this.columnResizing = true;\n      this.lastResizeHelperX = event.pageX - containerLeft + this.$el.scrollLeft;\n      this.bindColumnResizeEvents();\n    },\n    onColumnResize: function onColumnResize(event) {\n      var containerLeft = DomHandler.getOffset(this.$el).left;\n      this.$el.setAttribute('data-p-unselectable-text', 'true');\n      !this.isUnstyled && DomHandler.addClass(this.$el, 'p-unselectable-text');\n      this.$refs.resizeHelper.style.height = this.$el.offsetHeight + 'px';\n      this.$refs.resizeHelper.style.top = 0 + 'px';\n      this.$refs.resizeHelper.style.left = event.pageX - containerLeft + this.$el.scrollLeft + 'px';\n      this.$refs.resizeHelper.style.display = 'block';\n    },\n    onColumnResizeEnd: function onColumnResizeEnd() {\n      var delta = this.$refs.resizeHelper.offsetLeft - this.lastResizeHelperX;\n      var columnWidth = this.resizeColumnElement.offsetWidth;\n      var newColumnWidth = columnWidth + delta;\n      var minWidth = this.resizeColumnElement.style.minWidth || 15;\n      if (columnWidth + delta > parseInt(minWidth, 10)) {\n        if (this.columnResizeMode === 'fit') {\n          var nextColumn = this.resizeColumnElement.nextElementSibling;\n          var nextColumnWidth = nextColumn.offsetWidth - delta;\n          if (newColumnWidth > 15 && nextColumnWidth > 15) {\n            this.resizeTableCells(newColumnWidth, nextColumnWidth);\n          }\n        } else if (this.columnResizeMode === 'expand') {\n          var tableWidth = this.$refs.table.offsetWidth + delta + 'px';\n          var updateTableWidth = function updateTableWidth(el) {\n            !!el && (el.style.width = el.style.minWidth = tableWidth);\n          };\n\n          // Reasoning: resize table cells before updating the table width so that it can use existing computed cell widths and adjust only the one column.\n          this.resizeTableCells(newColumnWidth);\n          updateTableWidth(this.$refs.table);\n          if (!this.virtualScrollerDisabled) {\n            var body = this.$refs.bodyRef && this.$refs.bodyRef.$el;\n            var frozenBody = this.$refs.frozenBodyRef && this.$refs.frozenBodyRef.$el;\n            updateTableWidth(body);\n            updateTableWidth(frozenBody);\n          }\n        }\n        this.$emit('column-resize-end', {\n          element: this.resizeColumnElement,\n          delta: delta\n        });\n      }\n      this.$refs.resizeHelper.style.display = 'none';\n      this.resizeColumn = null;\n      this.$el.removeAttribute('data-p-unselectable-text');\n      !this.isUnstyled && DomHandler.removeClass(this.$el, 'p-unselectable-text');\n      this.unbindColumnResizeEvents();\n      if (this.isStateful()) {\n        this.saveState();\n      }\n    },\n    resizeTableCells: function resizeTableCells(newColumnWidth, nextColumnWidth) {\n      var colIndex = DomHandler.index(this.resizeColumnElement);\n      var widths = [];\n      var headers = DomHandler.find(this.$refs.table, 'thead[data-pc-section=\"thead\"] > tr > th');\n      headers.forEach(function (header) {\n        return widths.push(DomHandler.getOuterWidth(header));\n      });\n      this.destroyStyleElement();\n      this.createStyleElement();\n      var innerHTML = '';\n      var selector = \"[data-pc-name=\\\"datatable\\\"][\".concat(this.attributeSelector, \"] > [data-pc-section=\\\"wrapper\\\"] \").concat(this.virtualScrollerDisabled ? '' : '> [data-pc-name=\"virtualscroller\"]', \" > table[data-pc-section=\\\"table\\\"]\");\n      widths.forEach(function (width, index) {\n        var colWidth = index === colIndex ? newColumnWidth : nextColumnWidth && index === colIndex + 1 ? nextColumnWidth : width;\n        var style = \"width: \".concat(colWidth, \"px !important; max-width: \").concat(colWidth, \"px !important\");\n        innerHTML += \"\\n                    \".concat(selector, \" > thead[data-pc-section=\\\"thead\\\"] > tr > th:nth-child(\").concat(index + 1, \"),\\n                    \").concat(selector, \" > tbody[data-pc-section=\\\"tbody\\\"] > tr > td:nth-child(\").concat(index + 1, \"),\\n                    \").concat(selector, \" > tfoot[data-pc-section=\\\"tfoot\\\"] > tr > td:nth-child(\").concat(index + 1, \") {\\n                        \").concat(style, \"\\n                    }\\n                \");\n      });\n      this.styleElement.innerHTML = innerHTML;\n    },\n    bindColumnResizeEvents: function bindColumnResizeEvents() {\n      var _this7 = this;\n      if (!this.documentColumnResizeListener) {\n        this.documentColumnResizeListener = document.addEventListener('mousemove', function () {\n          if (_this7.columnResizing) {\n            _this7.onColumnResize(event);\n          }\n        });\n      }\n      if (!this.documentColumnResizeEndListener) {\n        this.documentColumnResizeEndListener = document.addEventListener('mouseup', function () {\n          if (_this7.columnResizing) {\n            _this7.columnResizing = false;\n            _this7.onColumnResizeEnd();\n          }\n        });\n      }\n    },\n    unbindColumnResizeEvents: function unbindColumnResizeEvents() {\n      if (this.documentColumnResizeListener) {\n        document.removeEventListener('document', this.documentColumnResizeListener);\n        this.documentColumnResizeListener = null;\n      }\n      if (this.documentColumnResizeEndListener) {\n        document.removeEventListener('document', this.documentColumnResizeEndListener);\n        this.documentColumnResizeEndListener = null;\n      }\n    },\n    onColumnHeaderMouseDown: function onColumnHeaderMouseDown(e) {\n      var event = e.originalEvent;\n      var column = e.column;\n      if (this.reorderableColumns && this.columnProp(column, 'reorderableColumn') !== false) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.getAttribute(event.target, '[data-pc-section=\"columnresizer\"]')) event.currentTarget.draggable = false;else event.currentTarget.draggable = true;\n      }\n    },\n    onColumnHeaderDragStart: function onColumnHeaderDragStart(e) {\n      var event = e.originalEvent,\n        column = e.column;\n      if (this.columnResizing) {\n        event.preventDefault();\n        return;\n      }\n      this.colReorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.$refs.reorderIndicatorUp);\n      this.colReorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.$refs.reorderIndicatorUp);\n      this.draggedColumn = column;\n      this.draggedColumnElement = this.findParentHeader(event.target);\n      event.dataTransfer.setData('text', 'b'); // Firefox requires this to make dragging possible\n    },\n    onColumnHeaderDragOver: function onColumnHeaderDragOver(e) {\n      var event = e.originalEvent,\n        column = e.column;\n      var dropHeader = this.findParentHeader(event.target);\n      if (this.reorderableColumns && this.draggedColumnElement && dropHeader && !this.columnProp(column, 'frozen')) {\n        event.preventDefault();\n        var containerOffset = DomHandler.getOffset(this.$el);\n        var dropHeaderOffset = DomHandler.getOffset(dropHeader);\n        if (this.draggedColumnElement !== dropHeader) {\n          var targetLeft = dropHeaderOffset.left - containerOffset.left;\n          var columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n          this.$refs.reorderIndicatorUp.style.top = dropHeaderOffset.top - containerOffset.top - (this.colReorderIconHeight - 1) + 'px';\n          this.$refs.reorderIndicatorDown.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n          if (event.pageX > columnCenter) {\n            this.$refs.reorderIndicatorUp.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.colReorderIconWidth / 2) + 'px';\n            this.$refs.reorderIndicatorDown.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.colReorderIconWidth / 2) + 'px';\n            this.dropPosition = 1;\n          } else {\n            this.$refs.reorderIndicatorUp.style.left = targetLeft - Math.ceil(this.colReorderIconWidth / 2) + 'px';\n            this.$refs.reorderIndicatorDown.style.left = targetLeft - Math.ceil(this.colReorderIconWidth / 2) + 'px';\n            this.dropPosition = -1;\n          }\n          this.$refs.reorderIndicatorUp.style.display = 'block';\n          this.$refs.reorderIndicatorDown.style.display = 'block';\n        }\n      }\n    },\n    onColumnHeaderDragLeave: function onColumnHeaderDragLeave(e) {\n      var event = e.originalEvent;\n      if (this.reorderableColumns && this.draggedColumnElement) {\n        event.preventDefault();\n        this.$refs.reorderIndicatorUp.style.display = 'none';\n        this.$refs.reorderIndicatorDown.style.display = 'none';\n      }\n    },\n    onColumnHeaderDrop: function onColumnHeaderDrop(e) {\n      var _this8 = this;\n      var event = e.originalEvent,\n        column = e.column;\n      event.preventDefault();\n      if (this.draggedColumnElement) {\n        var dragIndex = DomHandler.index(this.draggedColumnElement);\n        var dropIndex = DomHandler.index(this.findParentHeader(event.target));\n        var allowDrop = dragIndex !== dropIndex;\n        if (allowDrop && (dropIndex - dragIndex === 1 && this.dropPosition === -1 || dropIndex - dragIndex === -1 && this.dropPosition === 1)) {\n          allowDrop = false;\n        }\n        if (allowDrop) {\n          var isSameColumn = function isSameColumn(col1, col2) {\n            return _this8.columnProp(col1, 'columnKey') || _this8.columnProp(col2, 'columnKey') ? _this8.columnProp(col1, 'columnKey') === _this8.columnProp(col2, 'columnKey') : _this8.columnProp(col1, 'field') === _this8.columnProp(col2, 'field');\n          };\n          var dragColIndex = this.columns.findIndex(function (child) {\n            return isSameColumn(child, _this8.draggedColumn);\n          });\n          var dropColIndex = this.columns.findIndex(function (child) {\n            return isSameColumn(child, column);\n          });\n          var widths = [];\n          var headers = DomHandler.find(this.$el, 'thead[data-pc-section=\"thead\"] > tr > th');\n          headers.forEach(function (header) {\n            return widths.push(DomHandler.getOuterWidth(header));\n          });\n          var movedItem = widths.find(function (_, index) {\n            return index === dragColIndex;\n          });\n          var remainingItems = widths.filter(function (_, index) {\n            return index !== dragColIndex;\n          });\n          var reorderedWidths = [].concat(_toConsumableArray(remainingItems.slice(0, dropColIndex)), [movedItem], _toConsumableArray(remainingItems.slice(dropColIndex)));\n          this.addColumnWidthStyles(reorderedWidths);\n          if (dropColIndex < dragColIndex && this.dropPosition === 1) {\n            dropColIndex++;\n          }\n          if (dropColIndex > dragColIndex && this.dropPosition === -1) {\n            dropColIndex--;\n          }\n          ObjectUtils.reorderArray(this.columns, dragColIndex, dropColIndex);\n          this.updateReorderableColumns();\n          this.$emit('column-reorder', {\n            originalEvent: event,\n            dragIndex: dragColIndex,\n            dropIndex: dropColIndex\n          });\n        }\n        this.$refs.reorderIndicatorUp.style.display = 'none';\n        this.$refs.reorderIndicatorDown.style.display = 'none';\n        this.draggedColumnElement.draggable = false;\n        this.draggedColumnElement = null;\n        this.draggedColumn = null;\n        this.dropPosition = null;\n      }\n    },\n    findParentHeader: function findParentHeader(element) {\n      if (element.nodeName === 'TH') {\n        return element;\n      } else {\n        var parent = element.parentElement;\n        while (parent.nodeName !== 'TH') {\n          parent = parent.parentElement;\n          if (!parent) break;\n        }\n        return parent;\n      }\n    },\n    findColumnByKey: function findColumnByKey(columns, key) {\n      if (columns && columns.length) {\n        for (var i = 0; i < columns.length; i++) {\n          var column = columns[i];\n          if (this.columnProp(column, 'columnKey') === key || this.columnProp(column, 'field') === key) {\n            return column;\n          }\n        }\n      }\n      return null;\n    },\n    onRowMouseDown: function onRowMouseDown(event) {\n      if (DomHandler.getAttribute(event.target, 'data-pc-section') === 'rowreordericon' || DomHandler.getAttribute(event.target.parentElement, 'data-pc-section') === 'rowreordericon') event.currentTarget.draggable = true;else event.currentTarget.draggable = false;\n    },\n    onRowDragStart: function onRowDragStart(e) {\n      var event = e.originalEvent;\n      var index = e.index;\n      this.rowDragging = true;\n      this.draggedRowIndex = index;\n      event.dataTransfer.setData('text', 'b'); // For firefox\n    },\n    onRowDragOver: function onRowDragOver(e) {\n      var event = e.originalEvent;\n      var index = e.index;\n      if (this.rowDragging && this.draggedRowIndex !== index) {\n        var rowElement = event.currentTarget;\n        var rowY = DomHandler.getOffset(rowElement).top + DomHandler.getWindowScrollTop();\n        var pageY = event.pageY;\n        var rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;\n        var prevRowElement = rowElement.previousElementSibling;\n        if (pageY < rowMidY) {\n          rowElement.setAttribute('data-p-datatable-dragpoint-bottom', 'false');\n          !this.isUnstyled && DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\n          this.droppedRowIndex = index;\n          if (prevRowElement) {\n            prevRowElement.setAttribute('data-p-datatable-dragpoint-bottom', 'true');\n            !this.isUnstyled && DomHandler.addClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n          } else {\n            rowElement.setAttribute('data-p-datatable-dragpoint-top', 'true');\n            !this.isUnstyled && DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\n          }\n        } else {\n          if (prevRowElement) {\n            prevRowElement.setAttribute('data-p-datatable-dragpoint-bottom', 'false');\n            !this.isUnstyled && DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n          } else {\n            rowElement.setAttribute('data-p-datatable-dragpoint-top', 'true');\n            !this.isUnstyled && DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\n          }\n          this.droppedRowIndex = index + 1;\n          rowElement.setAttribute('data-p-datatable-dragpoint-bottom', 'true');\n          !this.isUnstyled && DomHandler.addClass(rowElement, 'p-datatable-dragpoint-bottom');\n        }\n        event.preventDefault();\n      }\n    },\n    onRowDragLeave: function onRowDragLeave(event) {\n      var rowElement = event.currentTarget;\n      var prevRowElement = rowElement.previousElementSibling;\n      if (prevRowElement) {\n        prevRowElement.setAttribute('data-p-datatable-dragpoint-bottom', 'false');\n        !this.isUnstyled && DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n      }\n      rowElement.setAttribute('data-p-datatable-dragpoint-bottom', 'false');\n      !this.isUnstyled && DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\n      rowElement.setAttribute('data-p-datatable-dragpoint-top', 'false');\n      !this.isUnstyled && DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-top');\n    },\n    onRowDragEnd: function onRowDragEnd(event) {\n      this.rowDragging = false;\n      this.draggedRowIndex = null;\n      this.droppedRowIndex = null;\n      event.currentTarget.draggable = false;\n    },\n    onRowDrop: function onRowDrop(event) {\n      if (this.droppedRowIndex != null) {\n        var dropIndex = this.draggedRowIndex > this.droppedRowIndex ? this.droppedRowIndex : this.droppedRowIndex === 0 ? 0 : this.droppedRowIndex - 1;\n        var processedData = _toConsumableArray(this.processedData);\n        ObjectUtils.reorderArray(processedData, this.draggedRowIndex + this.d_first, dropIndex + this.d_first);\n        this.$emit('row-reorder', {\n          originalEvent: event,\n          dragIndex: this.draggedRowIndex,\n          dropIndex: dropIndex,\n          value: processedData\n        });\n      }\n\n      //cleanup\n      this.onRowDragLeave(event);\n      this.onRowDragEnd(event);\n      event.preventDefault();\n    },\n    toggleRow: function toggleRow(event) {\n      var _this9 = this;\n      var expanded = event.expanded,\n        rest = _objectWithoutProperties(event, _excluded);\n      var rowData = event.data;\n      var expandedRows;\n      if (this.dataKey) {\n        var value = ObjectUtils.resolveFieldData(rowData, this.dataKey);\n        expandedRows = this.expandedRows ? _objectSpread$1({}, this.expandedRows) : {};\n        expanded ? expandedRows[value] = true : delete expandedRows[value];\n      } else {\n        expandedRows = this.expandedRows ? _toConsumableArray(this.expandedRows) : [];\n        expanded ? expandedRows.push(rowData) : expandedRows = expandedRows.filter(function (d) {\n          return !_this9.equals(rowData, d);\n        });\n      }\n      this.$emit('update:expandedRows', expandedRows);\n      expanded ? this.$emit('row-expand', rest) : this.$emit('row-collapse', rest);\n    },\n    toggleRowGroup: function toggleRowGroup(e) {\n      var event = e.originalEvent;\n      var data = e.data;\n      var groupFieldValue = ObjectUtils.resolveFieldData(data, this.groupRowsBy);\n      var _expandedRowGroups = this.expandedRowGroups ? _toConsumableArray(this.expandedRowGroups) : [];\n      if (this.isRowGroupExpanded(data)) {\n        _expandedRowGroups = _expandedRowGroups.filter(function (group) {\n          return group !== groupFieldValue;\n        });\n        this.$emit('update:expandedRowGroups', _expandedRowGroups);\n        this.$emit('rowgroup-collapse', {\n          originalEvent: event,\n          data: groupFieldValue\n        });\n      } else {\n        _expandedRowGroups.push(groupFieldValue);\n        this.$emit('update:expandedRowGroups', _expandedRowGroups);\n        this.$emit('rowgroup-expand', {\n          originalEvent: event,\n          data: groupFieldValue\n        });\n      }\n    },\n    isRowGroupExpanded: function isRowGroupExpanded(rowData) {\n      if (this.expandableRowGroups && this.expandedRowGroups) {\n        var groupFieldValue = ObjectUtils.resolveFieldData(rowData, this.groupRowsBy);\n        return this.expandedRowGroups.indexOf(groupFieldValue) > -1;\n      }\n      return false;\n    },\n    isStateful: function isStateful() {\n      return this.stateKey != null;\n    },\n    getStorage: function getStorage() {\n      switch (this.stateStorage) {\n        case 'local':\n          return window.localStorage;\n        case 'session':\n          return window.sessionStorage;\n        default:\n          throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n      }\n    },\n    saveState: function saveState() {\n      var storage = this.getStorage();\n      var state = {};\n      if (this.paginator) {\n        state.first = this.d_first;\n        state.rows = this.d_rows;\n      }\n      if (this.d_sortField) {\n        state.sortField = this.d_sortField;\n        state.sortOrder = this.d_sortOrder;\n      }\n      if (this.d_multiSortMeta) {\n        state.multiSortMeta = this.d_multiSortMeta;\n      }\n      if (this.hasFilters) {\n        state.filters = this.filters;\n      }\n      if (this.resizableColumns) {\n        this.saveColumnWidths(state);\n      }\n      if (this.reorderableColumns) {\n        state.columnOrder = this.d_columnOrder;\n      }\n      if (this.expandedRows) {\n        state.expandedRows = this.expandedRows;\n      }\n      if (this.expandedRowGroups) {\n        state.expandedRowGroups = this.expandedRowGroups;\n      }\n      if (this.selection) {\n        state.selection = this.selection;\n        state.selectionKeys = this.d_selectionKeys;\n      }\n      if (Object.keys(state).length) {\n        storage.setItem(this.stateKey, JSON.stringify(state));\n      }\n      this.$emit('state-save', state);\n    },\n    restoreState: function restoreState() {\n      var storage = this.getStorage();\n      var stateString = storage.getItem(this.stateKey);\n      var dateFormat = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/;\n      var reviver = function reviver(key, value) {\n        if (typeof value === 'string' && dateFormat.test(value)) {\n          return new Date(value);\n        }\n        return value;\n      };\n      if (stateString) {\n        var restoredState = JSON.parse(stateString, reviver);\n        if (this.paginator) {\n          this.d_first = restoredState.first;\n          this.d_rows = restoredState.rows;\n        }\n        if (restoredState.sortField) {\n          this.d_sortField = restoredState.sortField;\n          this.d_sortOrder = restoredState.sortOrder;\n        }\n        if (restoredState.multiSortMeta) {\n          this.d_multiSortMeta = restoredState.multiSortMeta;\n        }\n        if (restoredState.filters) {\n          this.$emit('update:filters', restoredState.filters);\n        }\n        if (this.resizableColumns) {\n          this.columnWidthsState = restoredState.columnWidths;\n          this.tableWidthState = restoredState.tableWidth;\n        }\n        if (this.reorderableColumns) {\n          this.d_columnOrder = restoredState.columnOrder;\n        }\n        if (restoredState.expandedRows) {\n          this.$emit('update:expandedRows', restoredState.expandedRows);\n        }\n        if (restoredState.expandedRowGroups) {\n          this.$emit('update:expandedRowGroups', restoredState.expandedRowGroups);\n        }\n        if (restoredState.selection) {\n          this.d_selectionKeys = restoredState.d_selectionKeys;\n          this.$emit('update:selection', restoredState.selection);\n        }\n        this.$emit('state-restore', restoredState);\n      }\n    },\n    saveColumnWidths: function saveColumnWidths(state) {\n      var widths = [];\n      var headers = DomHandler.find(this.$el, 'thead[data-pc-section=\"thead\"] > tr > th');\n      headers.forEach(function (header) {\n        return widths.push(DomHandler.getOuterWidth(header));\n      });\n      state.columnWidths = widths.join(',');\n      if (this.columnResizeMode === 'expand') {\n        state.tableWidth = DomHandler.getOuterWidth(this.$refs.table) + 'px';\n      }\n    },\n    addColumnWidthStyles: function addColumnWidthStyles(widths) {\n      this.createStyleElement();\n      var innerHTML = '';\n      var selector = \"[data-pc-name=\\\"datatable\\\"][\".concat(this.attributeSelector, \"] > [data-pc-section=\\\"wrapper\\\"] \").concat(this.virtualScrollerDisabled ? '' : '> [data-pc-name=\"virtualscroller\"]', \" > table[data-pc-section=\\\"table\\\"]\");\n      widths.forEach(function (width, index) {\n        var style = \"width: \".concat(width, \"px !important; max-width: \").concat(width, \"px !important\");\n        innerHTML += \"\\n        \".concat(selector, \" > thead[data-pc-section=\\\"thead\\\"] > tr > th:nth-child(\").concat(index + 1, \"),\\n        \").concat(selector, \" > tbody[data-pc-section=\\\"tbody\\\"] > tr > td:nth-child(\").concat(index + 1, \"),\\n        \").concat(selector, \" > tfoot[data-pc-section=\\\"tfoot\\\"] > tr > td:nth-child(\").concat(index + 1, \") {\\n            \").concat(style, \"\\n        }\\n    \");\n      });\n      this.styleElement.innerHTML = innerHTML;\n    },\n    restoreColumnWidths: function restoreColumnWidths() {\n      if (this.columnWidthsState) {\n        var widths = this.columnWidthsState.split(',');\n        if (this.columnResizeMode === 'expand' && this.tableWidthState) {\n          this.$refs.table.style.width = this.tableWidthState;\n          this.$refs.table.style.minWidth = this.tableWidthState;\n        }\n        if (ObjectUtils.isNotEmpty(widths)) {\n          this.addColumnWidthStyles(widths);\n        }\n      }\n    },\n    onCellEditInit: function onCellEditInit(event) {\n      this.$emit('cell-edit-init', event);\n    },\n    onCellEditComplete: function onCellEditComplete(event) {\n      this.$emit('cell-edit-complete', event);\n    },\n    onCellEditCancel: function onCellEditCancel(event) {\n      this.$emit('cell-edit-cancel', event);\n    },\n    onRowEditInit: function onRowEditInit(event) {\n      var _editingRows = this.editingRows ? _toConsumableArray(this.editingRows) : [];\n      _editingRows.push(event.data);\n      this.$emit('update:editingRows', _editingRows);\n      this.$emit('row-edit-init', event);\n    },\n    onRowEditSave: function onRowEditSave(event) {\n      var _editingRows = _toConsumableArray(this.editingRows);\n      _editingRows.splice(this.findIndex(event.data, _editingRows), 1);\n      this.$emit('update:editingRows', _editingRows);\n      this.$emit('row-edit-save', event);\n    },\n    onRowEditCancel: function onRowEditCancel(event) {\n      var _editingRows = _toConsumableArray(this.editingRows);\n      _editingRows.splice(this.findIndex(event.data, _editingRows), 1);\n      this.$emit('update:editingRows', _editingRows);\n      this.$emit('row-edit-cancel', event);\n    },\n    onEditingMetaChange: function onEditingMetaChange(event) {\n      var data = event.data,\n        field = event.field,\n        index = event.index,\n        editing = event.editing;\n      var editingMeta = _objectSpread$1({}, this.d_editingMeta);\n      var meta = editingMeta[index];\n      if (editing) {\n        !meta && (meta = editingMeta[index] = {\n          data: _objectSpread$1({}, data),\n          fields: []\n        });\n        meta['fields'].push(field);\n      } else if (meta) {\n        var fields = meta['fields'].filter(function (f) {\n          return f !== field;\n        });\n        !fields.length ? delete editingMeta[index] : meta['fields'] = fields;\n      }\n      this.d_editingMeta = editingMeta;\n    },\n    clearEditingMetaData: function clearEditingMetaData() {\n      if (this.editMode) {\n        this.d_editingMeta = {};\n      }\n    },\n    createLazyLoadEvent: function createLazyLoadEvent(event) {\n      return {\n        originalEvent: event,\n        first: this.d_first,\n        rows: this.d_rows,\n        sortField: this.d_sortField,\n        sortOrder: this.d_sortOrder,\n        multiSortMeta: this.d_multiSortMeta,\n        filters: this.d_filters\n      };\n    },\n    hasGlobalFilter: function hasGlobalFilter() {\n      return this.filters && Object.prototype.hasOwnProperty.call(this.filters, 'global');\n    },\n    onFilterChange: function onFilterChange(filters) {\n      this.d_filters = filters;\n    },\n    onFilterApply: function onFilterApply() {\n      this.d_first = 0;\n      this.$emit('update:first', this.d_first);\n      this.$emit('update:filters', this.d_filters);\n      if (this.lazy) {\n        this.$emit('filter', this.createLazyLoadEvent());\n      }\n    },\n    cloneFilters: function cloneFilters() {\n      var cloned = {};\n      if (this.filters) {\n        Object.entries(this.filters).forEach(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n            prop = _ref4[0],\n            value = _ref4[1];\n          cloned[prop] = value.operator ? {\n            operator: value.operator,\n            constraints: value.constraints.map(function (constraint) {\n              return _objectSpread$1({}, constraint);\n            })\n          } : _objectSpread$1({}, value);\n        });\n      }\n      return cloned;\n    },\n    updateReorderableColumns: function updateReorderableColumns() {\n      var _this10 = this;\n      var columnOrder = [];\n      this.columns.forEach(function (col) {\n        return columnOrder.push(_this10.columnProp(col, 'columnKey') || _this10.columnProp(col, 'field'));\n      });\n      this.d_columnOrder = columnOrder;\n    },\n    createStyleElement: function createStyleElement() {\n      var _this$$primevue;\n      this.styleElement = document.createElement('style');\n      this.styleElement.type = 'text/css';\n      DomHandler.setAttribute(this.styleElement, 'nonce', (_this$$primevue = this.$primevue) === null || _this$$primevue === void 0 || (_this$$primevue = _this$$primevue.config) === null || _this$$primevue === void 0 || (_this$$primevue = _this$$primevue.csp) === null || _this$$primevue === void 0 ? void 0 : _this$$primevue.nonce);\n      document.head.appendChild(this.styleElement);\n    },\n    createResponsiveStyle: function createResponsiveStyle() {\n      if (!this.responsiveStyleElement) {\n        var _this$$primevue2;\n        this.responsiveStyleElement = document.createElement('style');\n        this.responsiveStyleElement.type = 'text/css';\n        DomHandler.setAttribute(this.responsiveStyleElement, 'nonce', (_this$$primevue2 = this.$primevue) === null || _this$$primevue2 === void 0 || (_this$$primevue2 = _this$$primevue2.config) === null || _this$$primevue2 === void 0 || (_this$$primevue2 = _this$$primevue2.csp) === null || _this$$primevue2 === void 0 ? void 0 : _this$$primevue2.nonce);\n        document.head.appendChild(this.responsiveStyleElement);\n        var tableSelector = \".p-datatable-wrapper \".concat(this.virtualScrollerDisabled ? '' : '> .p-virtualscroller', \" > .p-datatable-table\");\n        var selector = \".p-datatable[\".concat(this.attributeSelector, \"] > \").concat(tableSelector);\n        var gridLinesSelector = \".p-datatable[\".concat(this.attributeSelector, \"].p-datatable-gridlines > \").concat(tableSelector);\n        var innerHTML = \"\\n@media screen and (max-width: \".concat(this.breakpoint, \") {\\n    \").concat(selector, \" > .p-datatable-thead > tr > th,\\n    \").concat(selector, \" > .p-datatable-tfoot > tr > td {\\n        display: none;\\n    }\\n\\n    \").concat(selector, \" > .p-datatable-tbody > tr > td {\\n        display: flex;\\n        width: 100%;\\n        align-items: center;\\n        justify-content: space-between;\\n    }\\n\\n    \").concat(selector, \" > .p-datatable-tbody > tr > td:not(:last-child) {\\n        border: 0 none;\\n    }\\n\\n    \").concat(gridLinesSelector, \" > .p-datatable-tbody > tr > td:last-child {\\n        border-top: 0;\\n        border-right: 0;\\n        border-left: 0;\\n    }\\n\\n    \").concat(selector, \" > .p-datatable-tbody > tr > td > .p-column-title {\\n        display: block;\\n    }\\n}\\n\");\n        this.responsiveStyleElement.innerHTML = innerHTML;\n      }\n    },\n    destroyResponsiveStyle: function destroyResponsiveStyle() {\n      if (this.responsiveStyleElement) {\n        document.head.removeChild(this.responsiveStyleElement);\n        this.responsiveStyleElement = null;\n      }\n    },\n    destroyStyleElement: function destroyStyleElement() {\n      if (this.styleElement) {\n        document.head.removeChild(this.styleElement);\n        this.styleElement = null;\n      }\n    },\n    dataToRender: function dataToRender(data) {\n      var _data = data || this.processedData;\n      if (_data && this.paginator) {\n        var first = this.lazy ? 0 : this.d_first;\n        return _data.slice(first, first + this.d_rows);\n      }\n      return _data;\n    },\n    getVirtualScrollerRef: function getVirtualScrollerRef() {\n      return this.$refs.virtualScroller;\n    },\n    hasSpacerStyle: function hasSpacerStyle(style) {\n      return ObjectUtils.isNotEmpty(style);\n    }\n  },\n  computed: {\n    columns: function columns() {\n      var cols = this.d_columns.get(this);\n      if (this.reorderableColumns && this.d_columnOrder) {\n        var orderedColumns = [];\n        var _iterator5 = _createForOfIteratorHelper(this.d_columnOrder),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var columnKey = _step5.value;\n            var column = this.findColumnByKey(cols, columnKey);\n            if (column && !this.columnProp(column, 'hidden')) {\n              orderedColumns.push(column);\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        return [].concat(orderedColumns, _toConsumableArray(cols.filter(function (item) {\n          return orderedColumns.indexOf(item) < 0;\n        })));\n      }\n      return cols;\n    },\n    columnGroups: function columnGroups() {\n      return this.d_columnGroups.get(this);\n    },\n    headerColumnGroup: function headerColumnGroup() {\n      var _this$columnGroups,\n        _this11 = this;\n      return (_this$columnGroups = this.columnGroups) === null || _this$columnGroups === void 0 ? void 0 : _this$columnGroups.find(function (group) {\n        return _this11.columnProp(group, 'type') === 'header';\n      });\n    },\n    footerColumnGroup: function footerColumnGroup() {\n      var _this$columnGroups2,\n        _this12 = this;\n      return (_this$columnGroups2 = this.columnGroups) === null || _this$columnGroups2 === void 0 ? void 0 : _this$columnGroups2.find(function (group) {\n        return _this12.columnProp(group, 'type') === 'footer';\n      });\n    },\n    hasFilters: function hasFilters() {\n      return this.filters && Object.keys(this.filters).length > 0 && this.filters.constructor === Object;\n    },\n    processedData: function processedData() {\n      var _this$virtualScroller;\n      var data = this.value || [];\n      if (!this.lazy && !((_this$virtualScroller = this.virtualScrollerOptions) !== null && _this$virtualScroller !== void 0 && _this$virtualScroller.lazy)) {\n        if (data && data.length) {\n          if (this.hasFilters) {\n            data = this.filter(data);\n          }\n          if (this.sorted) {\n            if (this.sortMode === 'single') data = this.sortSingle(data);else if (this.sortMode === 'multiple') data = this.sortMultiple(data);\n          }\n        }\n      }\n      return data;\n    },\n    totalRecordsLength: function totalRecordsLength() {\n      if (this.lazy) {\n        return this.totalRecords;\n      } else {\n        var data = this.processedData;\n        return data ? data.length : 0;\n      }\n    },\n    empty: function empty() {\n      var data = this.processedData;\n      return !data || data.length === 0;\n    },\n    paginatorTop: function paginatorTop() {\n      return this.paginator && (this.paginatorPosition !== 'bottom' || this.paginatorPosition === 'both');\n    },\n    paginatorBottom: function paginatorBottom() {\n      return this.paginator && (this.paginatorPosition !== 'top' || this.paginatorPosition === 'both');\n    },\n    sorted: function sorted() {\n      return this.d_sortField || this.d_multiSortMeta && this.d_multiSortMeta.length > 0;\n    },\n    allRowsSelected: function allRowsSelected() {\n      var _this13 = this;\n      if (this.selectAll !== null) {\n        return this.selectAll;\n      } else {\n        var val = this.frozenValue ? [].concat(_toConsumableArray(this.frozenValue), _toConsumableArray(this.processedData)) : this.processedData;\n        return ObjectUtils.isNotEmpty(val) && this.selection && Array.isArray(this.selection) && val.every(function (v) {\n          return _this13.selection.some(function (s) {\n            return _this13.equals(s, v);\n          });\n        });\n      }\n    },\n    attributeSelector: function attributeSelector() {\n      return UniqueComponentId();\n    },\n    groupRowSortField: function groupRowSortField() {\n      return this.sortMode === 'single' ? this.sortField : this.d_groupRowsSortMeta ? this.d_groupRowsSortMeta.field : null;\n    },\n    virtualScrollerDisabled: function virtualScrollerDisabled() {\n      return ObjectUtils.isEmpty(this.virtualScrollerOptions) || !this.scrollable;\n    }\n  },\n  components: {\n    DTPaginator: Paginator,\n    DTTableHeader: script$1,\n    DTTableBody: script$7,\n    DTTableFooter: script$5,\n    DTVirtualScroller: VirtualScroller,\n    ArrowDownIcon: ArrowDownIcon,\n    ArrowUpIcon: ArrowUpIcon,\n    SpinnerIcon: SpinnerIcon\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_SpinnerIcon = resolveComponent(\"SpinnerIcon\");\n  var _component_DTPaginator = resolveComponent(\"DTPaginator\");\n  var _component_DTTableHeader = resolveComponent(\"DTTableHeader\");\n  var _component_DTTableBody = resolveComponent(\"DTTableBody\");\n  var _component_DTTableFooter = resolveComponent(\"DTTableFooter\");\n  var _component_DTVirtualScroller = resolveComponent(\"DTVirtualScroller\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    \"data-scrollselectors\": \".p-datatable-wrapper\"\n  }, _ctx.ptmi('root')), [renderSlot(_ctx.$slots, \"default\"), _ctx.loading ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('loadingOverlay')\n  }, _ctx.ptm('loadingOverlay')), [_ctx.$slots.loading ? renderSlot(_ctx.$slots, \"loading\", {\n    key: 0\n  }) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [_ctx.$slots.loadingicon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.$slots.loadingicon), {\n    key: 0,\n    \"class\": normalizeClass(_ctx.cx('loadingIcon'))\n  }, null, 8, [\"class\"])) : _ctx.loadingIcon ? (openBlock(), createElementBlock(\"i\", mergeProps({\n    key: 1,\n    \"class\": [_ctx.cx('loadingIcon'), 'pi-spin', _ctx.loadingIcon]\n  }, _ctx.ptm('loadingIcon')), null, 16)) : (openBlock(), createBlock(_component_SpinnerIcon, mergeProps({\n    key: 2,\n    spin: \"\",\n    \"class\": _ctx.cx('loadingIcon')\n  }, _ctx.ptm('loadingIcon')), null, 16, [\"class\"]))], 64))], 16)) : createCommentVNode(\"\", true), _ctx.$slots.header ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('header')\n  }, _ctx.ptm('header')), [renderSlot(_ctx.$slots, \"header\")], 16)) : createCommentVNode(\"\", true), $options.paginatorTop ? (openBlock(), createBlock(_component_DTPaginator, {\n    key: 2,\n    rows: $data.d_rows,\n    first: $data.d_first,\n    totalRecords: $options.totalRecordsLength,\n    pageLinkSize: _ctx.pageLinkSize,\n    template: _ctx.paginatorTemplate,\n    rowsPerPageOptions: _ctx.rowsPerPageOptions,\n    currentPageReportTemplate: _ctx.currentPageReportTemplate,\n    \"class\": normalizeClass(_ctx.cx('paginator')),\n    onPage: _cache[0] || (_cache[0] = function ($event) {\n      return $options.onPage($event);\n    }),\n    alwaysShow: _ctx.alwaysShowPaginator,\n    unstyled: _ctx.unstyled,\n    pt: _ctx.ptm('paginator')\n  }, createSlots({\n    _: 2\n  }, [_ctx.$slots.paginatorstart ? {\n    name: \"start\",\n    fn: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"paginatorstart\")];\n    }),\n    key: \"0\"\n  } : undefined, _ctx.$slots.paginatorend ? {\n    name: \"end\",\n    fn: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"paginatorend\")];\n    }),\n    key: \"1\"\n  } : undefined, _ctx.$slots.paginatorfirstpagelinkicon ? {\n    name: \"firstpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorfirstpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"2\"\n  } : undefined, _ctx.$slots.paginatorprevpagelinkicon ? {\n    name: \"prevpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorprevpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"3\"\n  } : undefined, _ctx.$slots.paginatornextpagelinkicon ? {\n    name: \"nextpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatornextpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"4\"\n  } : undefined, _ctx.$slots.paginatorlastpagelinkicon ? {\n    name: \"lastpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorlastpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"5\"\n  } : undefined, _ctx.$slots.paginatorjumptopagedropdownicon ? {\n    name: \"jumptopagedropdownicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorjumptopagedropdownicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"6\"\n  } : undefined, _ctx.$slots.paginatorrowsperpagedropdownicon ? {\n    name: \"rowsperpagedropdownicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorrowsperpagedropdownicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"7\"\n  } : undefined]), 1032, [\"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"template\", \"rowsPerPageOptions\", \"currentPageReportTemplate\", \"class\", \"alwaysShow\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('wrapper'),\n    style: [_ctx.sx('wrapper'), {\n      maxHeight: $options.virtualScrollerDisabled ? _ctx.scrollHeight : ''\n    }]\n  }, _ctx.ptm('wrapper')), [createVNode(_component_DTVirtualScroller, mergeProps({\n    ref: \"virtualScroller\"\n  }, _ctx.virtualScrollerOptions, {\n    items: $options.processedData,\n    columns: $options.columns,\n    style: _ctx.scrollHeight !== 'flex' ? {\n      height: _ctx.scrollHeight\n    } : undefined,\n    scrollHeight: _ctx.scrollHeight !== 'flex' ? undefined : '100%',\n    disabled: $options.virtualScrollerDisabled,\n    loaderDisabled: \"\",\n    inline: \"\",\n    autoSize: \"\",\n    showSpacer: false,\n    pt: _ctx.ptm('virtualScroller')\n  }), {\n    content: withCtx(function (slotProps) {\n      return [createElementVNode(\"table\", mergeProps({\n        ref: \"table\",\n        role: \"table\",\n        \"class\": [_ctx.cx('table'), _ctx.tableClass],\n        style: [_ctx.tableStyle, slotProps.spacerStyle]\n      }, _objectSpread(_objectSpread({}, _ctx.tableProps), _ctx.ptm('table'))), [createVNode(_component_DTTableHeader, {\n        columnGroup: $options.headerColumnGroup,\n        columns: slotProps.columns,\n        rowGroupMode: _ctx.rowGroupMode,\n        groupRowsBy: _ctx.groupRowsBy,\n        groupRowSortField: $options.groupRowSortField,\n        reorderableColumns: _ctx.reorderableColumns,\n        resizableColumns: _ctx.resizableColumns,\n        allRowsSelected: $options.allRowsSelected,\n        empty: $options.empty,\n        sortMode: _ctx.sortMode,\n        sortField: $data.d_sortField,\n        sortOrder: $data.d_sortOrder,\n        multiSortMeta: $data.d_multiSortMeta,\n        filters: $data.d_filters,\n        filtersStore: _ctx.filters,\n        filterDisplay: _ctx.filterDisplay,\n        filterInputProps: _ctx.filterInputProps,\n        first: $data.d_first,\n        onColumnClick: _cache[1] || (_cache[1] = function ($event) {\n          return $options.onColumnHeaderClick($event);\n        }),\n        onColumnMousedown: _cache[2] || (_cache[2] = function ($event) {\n          return $options.onColumnHeaderMouseDown($event);\n        }),\n        onFilterChange: $options.onFilterChange,\n        onFilterApply: $options.onFilterApply,\n        onColumnDragstart: _cache[3] || (_cache[3] = function ($event) {\n          return $options.onColumnHeaderDragStart($event);\n        }),\n        onColumnDragover: _cache[4] || (_cache[4] = function ($event) {\n          return $options.onColumnHeaderDragOver($event);\n        }),\n        onColumnDragleave: _cache[5] || (_cache[5] = function ($event) {\n          return $options.onColumnHeaderDragLeave($event);\n        }),\n        onColumnDrop: _cache[6] || (_cache[6] = function ($event) {\n          return $options.onColumnHeaderDrop($event);\n        }),\n        onColumnResizestart: _cache[7] || (_cache[7] = function ($event) {\n          return $options.onColumnResizeStart($event);\n        }),\n        onCheckboxChange: _cache[8] || (_cache[8] = function ($event) {\n          return $options.toggleRowsWithCheckbox($event);\n        }),\n        unstyled: _ctx.unstyled,\n        pt: _ctx.pt\n      }, null, 8, [\"columnGroup\", \"columns\", \"rowGroupMode\", \"groupRowsBy\", \"groupRowSortField\", \"reorderableColumns\", \"resizableColumns\", \"allRowsSelected\", \"empty\", \"sortMode\", \"sortField\", \"sortOrder\", \"multiSortMeta\", \"filters\", \"filtersStore\", \"filterDisplay\", \"filterInputProps\", \"first\", \"onFilterChange\", \"onFilterApply\", \"unstyled\", \"pt\"]), _ctx.frozenValue ? (openBlock(), createBlock(_component_DTTableBody, {\n        key: 0,\n        ref: \"frozenBodyRef\",\n        value: _ctx.frozenValue,\n        frozenRow: true,\n        columns: slotProps.columns,\n        first: $data.d_first,\n        dataKey: _ctx.dataKey,\n        selection: _ctx.selection,\n        selectionKeys: $data.d_selectionKeys,\n        selectionMode: _ctx.selectionMode,\n        contextMenu: _ctx.contextMenu,\n        contextMenuSelection: _ctx.contextMenuSelection,\n        rowGroupMode: _ctx.rowGroupMode,\n        groupRowsBy: _ctx.groupRowsBy,\n        expandableRowGroups: _ctx.expandableRowGroups,\n        rowClass: _ctx.rowClass,\n        rowStyle: _ctx.rowStyle,\n        editMode: _ctx.editMode,\n        compareSelectionBy: _ctx.compareSelectionBy,\n        scrollable: _ctx.scrollable,\n        expandedRowIcon: _ctx.expandedRowIcon,\n        collapsedRowIcon: _ctx.collapsedRowIcon,\n        expandedRows: _ctx.expandedRows,\n        expandedRowGroups: _ctx.expandedRowGroups,\n        editingRows: _ctx.editingRows,\n        editingRowKeys: $data.d_editingRowKeys,\n        templates: _ctx.$slots,\n        responsiveLayout: _ctx.responsiveLayout,\n        isVirtualScrollerDisabled: true,\n        onRowgroupToggle: $options.toggleRowGroup,\n        onRowClick: _cache[9] || (_cache[9] = function ($event) {\n          return $options.onRowClick($event);\n        }),\n        onRowDblclick: _cache[10] || (_cache[10] = function ($event) {\n          return $options.onRowDblClick($event);\n        }),\n        onRowRightclick: _cache[11] || (_cache[11] = function ($event) {\n          return $options.onRowRightClick($event);\n        }),\n        onRowTouchend: $options.onRowTouchEnd,\n        onRowKeydown: $options.onRowKeyDown,\n        onRowMousedown: $options.onRowMouseDown,\n        onRowDragstart: _cache[12] || (_cache[12] = function ($event) {\n          return $options.onRowDragStart($event);\n        }),\n        onRowDragover: _cache[13] || (_cache[13] = function ($event) {\n          return $options.onRowDragOver($event);\n        }),\n        onRowDragleave: _cache[14] || (_cache[14] = function ($event) {\n          return $options.onRowDragLeave($event);\n        }),\n        onRowDragend: _cache[15] || (_cache[15] = function ($event) {\n          return $options.onRowDragEnd($event);\n        }),\n        onRowDrop: _cache[16] || (_cache[16] = function ($event) {\n          return $options.onRowDrop($event);\n        }),\n        onRowToggle: _cache[17] || (_cache[17] = function ($event) {\n          return $options.toggleRow($event);\n        }),\n        onRadioChange: _cache[18] || (_cache[18] = function ($event) {\n          return $options.toggleRowWithRadio($event);\n        }),\n        onCheckboxChange: _cache[19] || (_cache[19] = function ($event) {\n          return $options.toggleRowWithCheckbox($event);\n        }),\n        onCellEditInit: _cache[20] || (_cache[20] = function ($event) {\n          return $options.onCellEditInit($event);\n        }),\n        onCellEditComplete: _cache[21] || (_cache[21] = function ($event) {\n          return $options.onCellEditComplete($event);\n        }),\n        onCellEditCancel: _cache[22] || (_cache[22] = function ($event) {\n          return $options.onCellEditCancel($event);\n        }),\n        onRowEditInit: _cache[23] || (_cache[23] = function ($event) {\n          return $options.onRowEditInit($event);\n        }),\n        onRowEditSave: _cache[24] || (_cache[24] = function ($event) {\n          return $options.onRowEditSave($event);\n        }),\n        onRowEditCancel: _cache[25] || (_cache[25] = function ($event) {\n          return $options.onRowEditCancel($event);\n        }),\n        editingMeta: $data.d_editingMeta,\n        onEditingMetaChange: $options.onEditingMetaChange,\n        unstyled: _ctx.unstyled,\n        pt: _ctx.pt\n      }, null, 8, [\"value\", \"columns\", \"first\", \"dataKey\", \"selection\", \"selectionKeys\", \"selectionMode\", \"contextMenu\", \"contextMenuSelection\", \"rowGroupMode\", \"groupRowsBy\", \"expandableRowGroups\", \"rowClass\", \"rowStyle\", \"editMode\", \"compareSelectionBy\", \"scrollable\", \"expandedRowIcon\", \"collapsedRowIcon\", \"expandedRows\", \"expandedRowGroups\", \"editingRows\", \"editingRowKeys\", \"templates\", \"responsiveLayout\", \"onRowgroupToggle\", \"onRowTouchend\", \"onRowKeydown\", \"onRowMousedown\", \"editingMeta\", \"onEditingMetaChange\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true), createVNode(_component_DTTableBody, {\n        ref: \"bodyRef\",\n        value: $options.dataToRender(slotProps.rows),\n        \"class\": normalizeClass(slotProps.styleClass),\n        columns: slotProps.columns,\n        empty: $options.empty,\n        first: $data.d_first,\n        dataKey: _ctx.dataKey,\n        selection: _ctx.selection,\n        selectionKeys: $data.d_selectionKeys,\n        selectionMode: _ctx.selectionMode,\n        contextMenu: _ctx.contextMenu,\n        contextMenuSelection: _ctx.contextMenuSelection,\n        rowGroupMode: _ctx.rowGroupMode,\n        groupRowsBy: _ctx.groupRowsBy,\n        expandableRowGroups: _ctx.expandableRowGroups,\n        rowClass: _ctx.rowClass,\n        rowStyle: _ctx.rowStyle,\n        editMode: _ctx.editMode,\n        compareSelectionBy: _ctx.compareSelectionBy,\n        scrollable: _ctx.scrollable,\n        expandedRowIcon: _ctx.expandedRowIcon,\n        collapsedRowIcon: _ctx.collapsedRowIcon,\n        expandedRows: _ctx.expandedRows,\n        expandedRowGroups: _ctx.expandedRowGroups,\n        editingRows: _ctx.editingRows,\n        editingRowKeys: $data.d_editingRowKeys,\n        templates: _ctx.$slots,\n        responsiveLayout: _ctx.responsiveLayout,\n        virtualScrollerContentProps: slotProps,\n        isVirtualScrollerDisabled: $options.virtualScrollerDisabled,\n        onRowgroupToggle: $options.toggleRowGroup,\n        onRowClick: _cache[26] || (_cache[26] = function ($event) {\n          return $options.onRowClick($event);\n        }),\n        onRowDblclick: _cache[27] || (_cache[27] = function ($event) {\n          return $options.onRowDblClick($event);\n        }),\n        onRowRightclick: _cache[28] || (_cache[28] = function ($event) {\n          return $options.onRowRightClick($event);\n        }),\n        onRowTouchend: $options.onRowTouchEnd,\n        onRowKeydown: function onRowKeydown($event) {\n          return $options.onRowKeyDown($event, slotProps);\n        },\n        onRowMousedown: $options.onRowMouseDown,\n        onRowDragstart: _cache[29] || (_cache[29] = function ($event) {\n          return $options.onRowDragStart($event);\n        }),\n        onRowDragover: _cache[30] || (_cache[30] = function ($event) {\n          return $options.onRowDragOver($event);\n        }),\n        onRowDragleave: _cache[31] || (_cache[31] = function ($event) {\n          return $options.onRowDragLeave($event);\n        }),\n        onRowDragend: _cache[32] || (_cache[32] = function ($event) {\n          return $options.onRowDragEnd($event);\n        }),\n        onRowDrop: _cache[33] || (_cache[33] = function ($event) {\n          return $options.onRowDrop($event);\n        }),\n        onRowToggle: _cache[34] || (_cache[34] = function ($event) {\n          return $options.toggleRow($event);\n        }),\n        onRadioChange: _cache[35] || (_cache[35] = function ($event) {\n          return $options.toggleRowWithRadio($event);\n        }),\n        onCheckboxChange: _cache[36] || (_cache[36] = function ($event) {\n          return $options.toggleRowWithCheckbox($event);\n        }),\n        onCellEditInit: _cache[37] || (_cache[37] = function ($event) {\n          return $options.onCellEditInit($event);\n        }),\n        onCellEditComplete: _cache[38] || (_cache[38] = function ($event) {\n          return $options.onCellEditComplete($event);\n        }),\n        onCellEditCancel: _cache[39] || (_cache[39] = function ($event) {\n          return $options.onCellEditCancel($event);\n        }),\n        onRowEditInit: _cache[40] || (_cache[40] = function ($event) {\n          return $options.onRowEditInit($event);\n        }),\n        onRowEditSave: _cache[41] || (_cache[41] = function ($event) {\n          return $options.onRowEditSave($event);\n        }),\n        onRowEditCancel: _cache[42] || (_cache[42] = function ($event) {\n          return $options.onRowEditCancel($event);\n        }),\n        editingMeta: $data.d_editingMeta,\n        onEditingMetaChange: $options.onEditingMetaChange,\n        unstyled: _ctx.unstyled,\n        pt: _ctx.pt\n      }, null, 8, [\"value\", \"class\", \"columns\", \"empty\", \"first\", \"dataKey\", \"selection\", \"selectionKeys\", \"selectionMode\", \"contextMenu\", \"contextMenuSelection\", \"rowGroupMode\", \"groupRowsBy\", \"expandableRowGroups\", \"rowClass\", \"rowStyle\", \"editMode\", \"compareSelectionBy\", \"scrollable\", \"expandedRowIcon\", \"collapsedRowIcon\", \"expandedRows\", \"expandedRowGroups\", \"editingRows\", \"editingRowKeys\", \"templates\", \"responsiveLayout\", \"virtualScrollerContentProps\", \"isVirtualScrollerDisabled\", \"onRowgroupToggle\", \"onRowTouchend\", \"onRowKeydown\", \"onRowMousedown\", \"editingMeta\", \"onEditingMetaChange\", \"unstyled\", \"pt\"]), $options.hasSpacerStyle(slotProps.spacerStyle) ? (openBlock(), createElementBlock(\"tbody\", mergeProps({\n        key: 1,\n        \"class\": _ctx.cx('virtualScrollerSpacer'),\n        style: {\n          height: \"calc(\".concat(slotProps.spacerStyle.height, \" - \").concat(slotProps.rows.length * slotProps.itemSize, \"px)\")\n        }\n      }, _ctx.ptm('virtualScrollerSpacer')), null, 16)) : createCommentVNode(\"\", true), createVNode(_component_DTTableFooter, {\n        columnGroup: $options.footerColumnGroup,\n        columns: slotProps.columns,\n        pt: _ctx.pt\n      }, null, 8, [\"columnGroup\", \"columns\", \"pt\"])], 16)];\n    }),\n    _: 1\n  }, 16, [\"items\", \"columns\", \"style\", \"scrollHeight\", \"disabled\", \"pt\"])], 16), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 3,\n    \"class\": _ctx.cx('footer')\n  }, _ctx.ptm('footer')), [renderSlot(_ctx.$slots, \"footer\")], 16)) : createCommentVNode(\"\", true), $options.paginatorBottom ? (openBlock(), createBlock(_component_DTPaginator, {\n    key: 4,\n    rows: $data.d_rows,\n    first: $data.d_first,\n    totalRecords: $options.totalRecordsLength,\n    pageLinkSize: _ctx.pageLinkSize,\n    template: _ctx.paginatorTemplate,\n    rowsPerPageOptions: _ctx.rowsPerPageOptions,\n    currentPageReportTemplate: _ctx.currentPageReportTemplate,\n    \"class\": normalizeClass(_ctx.cx('paginator')),\n    onPage: _cache[43] || (_cache[43] = function ($event) {\n      return $options.onPage($event);\n    }),\n    alwaysShow: _ctx.alwaysShowPaginator,\n    unstyled: _ctx.unstyled,\n    pt: _ctx.ptm('paginator')\n  }, createSlots({\n    _: 2\n  }, [_ctx.$slots.paginatorstart ? {\n    name: \"start\",\n    fn: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"paginatorstart\")];\n    }),\n    key: \"0\"\n  } : undefined, _ctx.$slots.paginatorend ? {\n    name: \"end\",\n    fn: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"paginatorend\")];\n    }),\n    key: \"1\"\n  } : undefined, _ctx.$slots.paginatorfirstpagelinkicon ? {\n    name: \"firstpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorfirstpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"2\"\n  } : undefined, _ctx.$slots.paginatorprevpagelinkicon ? {\n    name: \"prevpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorprevpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"3\"\n  } : undefined, _ctx.$slots.paginatornextpagelinkicon ? {\n    name: \"nextpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatornextpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"4\"\n  } : undefined, _ctx.$slots.paginatorlastpagelinkicon ? {\n    name: \"lastpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorlastpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"5\"\n  } : undefined, _ctx.$slots.paginatorjumptopagedropdownicon ? {\n    name: \"jumptopagedropdownicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorjumptopagedropdownicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"6\"\n  } : undefined, _ctx.$slots.paginatorrowsperpagedropdownicon ? {\n    name: \"rowsperpagedropdownicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorrowsperpagedropdownicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"7\"\n  } : undefined]), 1032, [\"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"template\", \"rowsPerPageOptions\", \"currentPageReportTemplate\", \"class\", \"alwaysShow\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    ref: \"resizeHelper\",\n    \"class\": _ctx.cx('resizeHelper'),\n    style: {\n      \"display\": \"none\"\n    }\n  }, _ctx.ptm('resizeHelper')), null, 16), _ctx.reorderableColumns ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 5,\n    ref: \"reorderIndicatorUp\",\n    \"class\": _ctx.cx('reorderIndicatorUp'),\n    style: {\n      \"position\": \"absolute\",\n      \"display\": \"none\"\n    }\n  }, _ctx.ptm('reorderIndicatorUp')), [(openBlock(), createBlock(resolveDynamicComponent(_ctx.$slots.reorderindicatorupicon || 'ArrowDownIcon')))], 16)) : createCommentVNode(\"\", true), _ctx.reorderableColumns ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 6,\n    ref: \"reorderIndicatorDown\",\n    \"class\": _ctx.cx('reorderIndicatorDown'),\n    style: {\n      \"position\": \"absolute\",\n      \"display\": \"none\"\n    }\n  }, _ctx.ptm('reorderIndicatorDown')), [(openBlock(), createBlock(resolveDynamicComponent(_ctx.$slots.reorderindicatordownicon || 'ArrowUpIcon')))], 16)) : createCommentVNode(\"\", true)], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n",
      "start": 1756100531609,
      "end": 1756100531675,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100531675,
      "end": 1756100531675,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100531675,
      "end": 1756100531676,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100531676,
      "end": 1756100531676,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100531676,
      "end": 1756100531676,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100531676,
      "end": 1756100531676,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100531676,
      "end": 1756100531676,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100531676,
      "end": 1756100531688,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100531688,
      "end": 1756100531688,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100531688,
      "end": 1756100531688,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100531688,
      "end": 1756100531688,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100531688,
      "end": 1756100531688,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100531688,
      "end": 1756100531688,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100531688,
      "end": 1756100531689,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100531689,
      "end": 1756100531689,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100531689,
      "end": 1756100531689,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100531689,
      "end": 1756100531689,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100531689,
      "end": 1756100531689,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100531689,
      "end": 1756100531689,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100531689,
      "end": 1756100531689,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100531689,
      "end": 1756100531689,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100531689,
      "end": 1756100531689,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100531689,
      "end": 1756100531689,
      "order": "normal"
    }
  ]
}
