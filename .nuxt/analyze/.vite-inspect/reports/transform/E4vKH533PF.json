{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/vant@4.9.16_vue@3.5.11/node_modules/vant/es/calendar/Calendar.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { ref, watch, computed, defineComponent, mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport { pick, isDate, truthProp, numericProp, getScrollTop, makeStringProp, makeNumericProp } from \"../utils/index.mjs\";\nimport { t, bem, name, getToday, cloneDate, cloneDates, getPrevDay, getNextDay, compareDay, calcDateNum, compareMonth, getDayByOffset, getMonthByOffset } from \"./utils.mjs\";\nimport { raf, useRect, onMountedOrActivated } from \"@vant/use\";\nimport { useRefs } from \"../composables/use-refs.mjs\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { Popup } from \"../popup/index.mjs\";\nimport { Button } from \"../button/index.mjs\";\nimport { showToast } from \"../toast/index.mjs\";\nimport CalendarMonth from \"./CalendarMonth.mjs\";\nimport CalendarHeader from \"./CalendarHeader.mjs\";\nconst calendarProps = {\n  show: Boolean,\n  type: makeStringProp(\"single\"),\n  switchMode: makeStringProp(\"none\"),\n  title: String,\n  color: String,\n  round: truthProp,\n  readonly: Boolean,\n  poppable: truthProp,\n  maxRange: makeNumericProp(null),\n  position: makeStringProp(\"bottom\"),\n  teleport: [String, Object],\n  showMark: truthProp,\n  showTitle: truthProp,\n  formatter: Function,\n  rowHeight: numericProp,\n  confirmText: String,\n  rangePrompt: String,\n  lazyRender: truthProp,\n  showConfirm: truthProp,\n  defaultDate: [Date, Array],\n  allowSameDay: Boolean,\n  showSubtitle: truthProp,\n  closeOnPopstate: truthProp,\n  showRangePrompt: truthProp,\n  confirmDisabledText: String,\n  closeOnClickOverlay: truthProp,\n  safeAreaInsetTop: Boolean,\n  safeAreaInsetBottom: truthProp,\n  minDate: {\n    type: Date,\n    validator: isDate\n  },\n  maxDate: {\n    type: Date,\n    validator: isDate\n  },\n  firstDayOfWeek: {\n    type: numericProp,\n    default: 0,\n    validator: (val) => val >= 0 && val <= 6\n  }\n};\nvar stdin_default = defineComponent({\n  name,\n  props: calendarProps,\n  emits: [\"select\", \"confirm\", \"unselect\", \"monthShow\", \"overRange\", \"update:show\", \"clickSubtitle\", \"clickDisabledDate\", \"clickOverlay\", \"panelChange\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const canSwitch = computed(() => props.switchMode !== \"none\");\n    const minDate = computed(() => {\n      if (!props.minDate && !canSwitch.value) {\n        return getToday();\n      }\n      return props.minDate;\n    });\n    const maxDate = computed(() => {\n      if (!props.maxDate && !canSwitch.value) {\n        return getMonthByOffset(getToday(), 6);\n      }\n      return props.maxDate;\n    });\n    const limitDateRange = (date, min = minDate.value, max = maxDate.value) => {\n      if (min && compareDay(date, min) === -1) {\n        return min;\n      }\n      if (max && compareDay(date, max) === 1) {\n        return max;\n      }\n      return date;\n    };\n    const getInitialDate = (defaultDate = props.defaultDate) => {\n      const {\n        type,\n        allowSameDay\n      } = props;\n      if (defaultDate === null) {\n        return defaultDate;\n      }\n      const now = getToday();\n      if (type === \"range\") {\n        if (!Array.isArray(defaultDate)) {\n          defaultDate = [];\n        }\n        if (defaultDate.length === 1 && compareDay(defaultDate[0], now) === 1) {\n          defaultDate = [];\n        }\n        const min = minDate.value;\n        const max = maxDate.value;\n        const start = limitDateRange(defaultDate[0] || now, min, max ? allowSameDay ? max : getPrevDay(max) : void 0);\n        const end = limitDateRange(defaultDate[1] || (allowSameDay ? now : getNextDay(now)), min ? allowSameDay ? min : getNextDay(min) : void 0);\n        return [start, end];\n      }\n      if (type === \"multiple\") {\n        if (Array.isArray(defaultDate)) {\n          return defaultDate.map((date) => limitDateRange(date));\n        }\n        return [limitDateRange(now)];\n      }\n      if (!defaultDate || Array.isArray(defaultDate)) {\n        defaultDate = now;\n      }\n      return limitDateRange(defaultDate);\n    };\n    const getInitialPanelDate = () => {\n      const date = Array.isArray(currentDate.value) ? currentDate.value[0] : currentDate.value;\n      return date ? date : limitDateRange(getToday());\n    };\n    let bodyHeight;\n    const bodyRef = ref();\n    const currentDate = ref(getInitialDate());\n    const currentPanelDate = ref(getInitialPanelDate());\n    const currentMonthRef = ref();\n    const [monthRefs, setMonthRefs] = useRefs();\n    const dayOffset = computed(() => props.firstDayOfWeek ? +props.firstDayOfWeek % 7 : 0);\n    const months = computed(() => {\n      const months2 = [];\n      if (!minDate.value || !maxDate.value) {\n        return months2;\n      }\n      const cursor = new Date(minDate.value);\n      cursor.setDate(1);\n      do {\n        months2.push(new Date(cursor));\n        cursor.setMonth(cursor.getMonth() + 1);\n      } while (compareMonth(cursor, maxDate.value) !== 1);\n      return months2;\n    });\n    const buttonDisabled = computed(() => {\n      if (currentDate.value) {\n        if (props.type === \"range\") {\n          return !currentDate.value[0] || !currentDate.value[1];\n        }\n        if (props.type === \"multiple\") {\n          return !currentDate.value.length;\n        }\n      }\n      return !currentDate.value;\n    });\n    const getSelectedDate = () => currentDate.value;\n    const onScroll = () => {\n      const top = getScrollTop(bodyRef.value);\n      const bottom = top + bodyHeight;\n      const heights = months.value.map((item, index) => monthRefs.value[index].getHeight());\n      const heightSum = heights.reduce((a, b) => a + b, 0);\n      if (bottom > heightSum && top > 0) {\n        return;\n      }\n      let height = 0;\n      let currentMonth;\n      const visibleRange = [-1, -1];\n      for (let i = 0; i < months.value.length; i++) {\n        const month = monthRefs.value[i];\n        const visible = height <= bottom && height + heights[i] >= top;\n        if (visible) {\n          visibleRange[1] = i;\n          if (!currentMonth) {\n            currentMonth = month;\n            visibleRange[0] = i;\n          }\n          if (!monthRefs.value[i].showed) {\n            monthRefs.value[i].showed = true;\n            emit(\"monthShow\", {\n              date: month.date,\n              title: month.getTitle()\n            });\n          }\n        }\n        height += heights[i];\n      }\n      months.value.forEach((month, index) => {\n        const visible = index >= visibleRange[0] - 1 && index <= visibleRange[1] + 1;\n        monthRefs.value[index].setVisible(visible);\n      });\n      if (currentMonth) {\n        currentMonthRef.value = currentMonth;\n      }\n    };\n    const scrollToDate = (targetDate) => {\n      if (canSwitch.value) {\n        currentPanelDate.value = targetDate;\n      } else {\n        raf(() => {\n          months.value.some((month, index) => {\n            if (compareMonth(month, targetDate) === 0) {\n              if (bodyRef.value) {\n                monthRefs.value[index].scrollToDate(bodyRef.value, targetDate);\n              }\n              return true;\n            }\n            return false;\n          });\n          onScroll();\n        });\n      }\n    };\n    const scrollToCurrentDate = () => {\n      if (props.poppable && !props.show) {\n        return;\n      }\n      if (currentDate.value) {\n        const targetDate = props.type === \"single\" ? currentDate.value : currentDate.value[0];\n        if (isDate(targetDate)) {\n          scrollToDate(targetDate);\n        }\n      } else if (!canSwitch.value) {\n        raf(onScroll);\n      }\n    };\n    const init = () => {\n      if (props.poppable && !props.show) {\n        return;\n      }\n      if (!canSwitch.value) {\n        raf(() => {\n          bodyHeight = Math.floor(useRect(bodyRef).height);\n        });\n      }\n      scrollToCurrentDate();\n    };\n    const reset = (date = getInitialDate()) => {\n      currentDate.value = date;\n      scrollToCurrentDate();\n    };\n    const checkRange = (date) => {\n      const {\n        maxRange,\n        rangePrompt,\n        showRangePrompt\n      } = props;\n      if (maxRange && calcDateNum(date) > +maxRange) {\n        if (showRangePrompt) {\n          showToast(rangePrompt || t(\"rangePrompt\", maxRange));\n        }\n        emit(\"overRange\");\n        return false;\n      }\n      return true;\n    };\n    const onPanelChange = (date) => {\n      currentPanelDate.value = date;\n      emit(\"panelChange\", {\n        date\n      });\n    };\n    const onConfirm = () => {\n      var _a;\n      return emit(\"confirm\", (_a = currentDate.value) != null ? _a : cloneDates(currentDate.value));\n    };\n    const select = (date, complete) => {\n      const setCurrentDate = (date2) => {\n        currentDate.value = date2;\n        emit(\"select\", cloneDates(date2));\n      };\n      if (complete && props.type === \"range\") {\n        const valid = checkRange(date);\n        if (!valid) {\n          setCurrentDate([date[0], getDayByOffset(date[0], +props.maxRange - 1)]);\n          return;\n        }\n      }\n      setCurrentDate(date);\n      if (complete && !props.showConfirm) {\n        onConfirm();\n      }\n    };\n    const getDisabledDate = (disabledDays2, startDay, date) => {\n      var _a;\n      return (_a = disabledDays2.find((day) => compareDay(startDay, day.date) === -1 && compareDay(day.date, date) === -1)) == null ? void 0 : _a.date;\n    };\n    const disabledDays = computed(() => monthRefs.value.reduce((arr, ref2) => {\n      var _a, _b;\n      arr.push(...(_b = (_a = ref2.disabledDays) == null ? void 0 : _a.value) != null ? _b : []);\n      return arr;\n    }, []));\n    const onClickDay = (item) => {\n      if (props.readonly || !item.date) {\n        return;\n      }\n      const {\n        date\n      } = item;\n      const {\n        type\n      } = props;\n      if (type === \"range\") {\n        if (!currentDate.value) {\n          select([date]);\n          return;\n        }\n        const [startDay, endDay] = currentDate.value;\n        if (startDay && !endDay) {\n          const compareToStart = compareDay(date, startDay);\n          if (compareToStart === 1) {\n            const disabledDay = getDisabledDate(disabledDays.value, startDay, date);\n            if (disabledDay) {\n              const endDay2 = getPrevDay(disabledDay);\n              if (compareDay(startDay, endDay2) === -1) {\n                select([startDay, endDay2]);\n              } else {\n                select([date]);\n              }\n            } else {\n              select([startDay, date], true);\n            }\n          } else if (compareToStart === -1) {\n            select([date]);\n          } else if (props.allowSameDay) {\n            select([date, date], true);\n          }\n        } else {\n          select([date]);\n        }\n      } else if (type === \"multiple\") {\n        if (!currentDate.value) {\n          select([date]);\n          return;\n        }\n        const dates = currentDate.value;\n        const selectedIndex = dates.findIndex((dateItem) => compareDay(dateItem, date) === 0);\n        if (selectedIndex !== -1) {\n          const [unselectedDate] = dates.splice(selectedIndex, 1);\n          emit(\"unselect\", cloneDate(unselectedDate));\n        } else if (props.maxRange && dates.length >= +props.maxRange) {\n          showToast(props.rangePrompt || t(\"rangePrompt\", props.maxRange));\n        } else {\n          select([...dates, date]);\n        }\n      } else {\n        select(date, true);\n      }\n    };\n    const onClickOverlay = (event) => emit(\"clickOverlay\", event);\n    const updateShow = (value) => emit(\"update:show\", value);\n    const renderMonth = (date, index) => {\n      const showMonthTitle = index !== 0 || !props.showSubtitle;\n      return _createVNode(CalendarMonth, _mergeProps({\n        \"ref\": canSwitch.value ? currentMonthRef : setMonthRefs(index),\n        \"date\": date,\n        \"currentDate\": currentDate.value,\n        \"showMonthTitle\": showMonthTitle,\n        \"firstDayOfWeek\": dayOffset.value,\n        \"lazyRender\": canSwitch.value ? false : props.lazyRender,\n        \"maxDate\": maxDate.value,\n        \"minDate\": minDate.value\n      }, pick(props, [\"type\", \"color\", \"showMark\", \"formatter\", \"rowHeight\", \"showSubtitle\", \"allowSameDay\"]), {\n        \"onClick\": onClickDay,\n        \"onClickDisabledDate\": (item) => emit(\"clickDisabledDate\", item)\n      }), pick(slots, [\"top-info\", \"bottom-info\", \"month-title\", \"text\"]));\n    };\n    const renderFooterButton = () => {\n      if (slots.footer) {\n        return slots.footer();\n      }\n      if (props.showConfirm) {\n        const slot = slots[\"confirm-text\"];\n        const disabled = buttonDisabled.value;\n        const text = disabled ? props.confirmDisabledText : props.confirmText;\n        return _createVNode(Button, {\n          \"round\": true,\n          \"block\": true,\n          \"type\": \"primary\",\n          \"color\": props.color,\n          \"class\": bem(\"confirm\"),\n          \"disabled\": disabled,\n          \"nativeType\": \"button\",\n          \"onClick\": onConfirm\n        }, {\n          default: () => [slot ? slot({\n            disabled\n          }) : text || t(\"confirm\")]\n        });\n      }\n    };\n    const renderFooter = () => _createVNode(\"div\", {\n      \"class\": [bem(\"footer\"), {\n        \"van-safe-area-bottom\": props.safeAreaInsetBottom\n      }]\n    }, [renderFooterButton()]);\n    const renderCalendar = () => {\n      var _a, _b;\n      return _createVNode(\"div\", {\n        \"class\": bem()\n      }, [_createVNode(CalendarHeader, {\n        \"date\": (_a = currentMonthRef.value) == null ? void 0 : _a.date,\n        \"maxDate\": maxDate.value,\n        \"minDate\": minDate.value,\n        \"title\": props.title,\n        \"subtitle\": (_b = currentMonthRef.value) == null ? void 0 : _b.getTitle(),\n        \"showTitle\": props.showTitle,\n        \"showSubtitle\": props.showSubtitle,\n        \"switchMode\": props.switchMode,\n        \"firstDayOfWeek\": dayOffset.value,\n        \"onClickSubtitle\": (event) => emit(\"clickSubtitle\", event),\n        \"onPanelChange\": onPanelChange\n      }, pick(slots, [\"title\", \"subtitle\", \"prev-month\", \"prev-year\", \"next-month\", \"next-year\"])), _createVNode(\"div\", {\n        \"ref\": bodyRef,\n        \"class\": bem(\"body\"),\n        \"onScroll\": canSwitch.value ? void 0 : onScroll\n      }, [canSwitch.value ? renderMonth(currentPanelDate.value, 0) : months.value.map(renderMonth)]), renderFooter()]);\n    };\n    watch(() => props.show, init);\n    watch(() => [props.type, props.minDate, props.maxDate, props.switchMode], () => reset(getInitialDate(currentDate.value)));\n    watch(() => props.defaultDate, (value) => {\n      reset(value);\n    });\n    useExpose({\n      reset,\n      scrollToDate,\n      getSelectedDate\n    });\n    onMountedOrActivated(init);\n    return () => {\n      if (props.poppable) {\n        return _createVNode(Popup, {\n          \"show\": props.show,\n          \"class\": bem(\"popup\"),\n          \"round\": props.round,\n          \"position\": props.position,\n          \"closeable\": props.showTitle || props.showSubtitle,\n          \"teleport\": props.teleport,\n          \"closeOnPopstate\": props.closeOnPopstate,\n          \"safeAreaInsetTop\": props.safeAreaInsetTop,\n          \"closeOnClickOverlay\": props.closeOnClickOverlay,\n          \"onClickOverlay\": onClickOverlay,\n          \"onUpdate:show\": updateShow\n        }, {\n          default: renderCalendar\n        });\n      }\n      return renderCalendar();\n    };\n  }\n});\nexport {\n  calendarProps,\n  stdin_default as default\n};\n",
      "start": 1756100533365,
      "end": 1756100533397,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100533397,
      "end": 1756100533397,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100533398,
      "end": 1756100533398,
      "order": "normal"
    }
  ]
}
