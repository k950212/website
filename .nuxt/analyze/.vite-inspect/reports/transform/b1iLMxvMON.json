{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/inputmask/inputmask.esm.js?nuxt_component=async&nuxt_component_name=InputMask&nuxt_component_export=default",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { DomHandler } from 'primevue/utils';\nimport BaseComponent from 'primevue/basecomponent';\nimport InputMaskStyle from 'primevue/inputmask/style';\nimport { openBlock, createElementBlock, mergeProps } from 'vue';\n\nvar script$1 = {\n  name: 'BaseInputMask',\n  \"extends\": BaseComponent,\n  props: {\n    modelValue: null,\n    slotChar: {\n      type: String,\n      \"default\": '_'\n    },\n    mask: {\n      type: String,\n      \"default\": null\n    },\n    autoClear: {\n      type: Boolean,\n      \"default\": true\n    },\n    unmask: {\n      type: Boolean,\n      \"default\": false\n    },\n    readonly: {\n      type: Boolean,\n      \"default\": false\n    },\n    invalid: {\n      type: Boolean,\n      \"default\": false\n    },\n    variant: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: InputMaskStyle\n};\n\nvar script = {\n  name: 'InputMask',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:modelValue', 'focus', 'blur', 'keydown', 'complete', 'keypress', 'paste'],\n  watch: {\n    mask: function mask(newMask, oldMask) {\n      if (oldMask !== newMask) {\n        this.initMask();\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.initMask();\n  },\n  updated: function updated() {\n    if (this.isValueUpdated()) {\n      this.updateValue();\n    }\n  },\n  methods: {\n    onInput: function onInput(event) {\n      if (this.androidChrome) this.handleAndroidInput(event);else this.handleInputChange(event);\n      this.$emit('update:modelValue', event.target.value);\n    },\n    onFocus: function onFocus(event) {\n      var _this = this;\n      if (this.readonly) {\n        return;\n      }\n      this.focus = true;\n      clearTimeout(this.caretTimeoutId);\n      var pos;\n      this.focusText = this.$el.value;\n      pos = this.checkVal();\n      this.caretTimeoutId = setTimeout(function () {\n        if (_this.$el !== document.activeElement) {\n          return;\n        }\n        _this.writeBuffer();\n        if (pos === _this.mask.replace('?', '').length) {\n          _this.caret(0, pos);\n        } else {\n          _this.caret(pos);\n        }\n      }, 10);\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      this.focus = false;\n      this.checkVal();\n      this.updateModel(event);\n      if (this.$el.value !== this.focusText) {\n        var e = document.createEvent('HTMLEvents');\n        e.initEvent('change', true, false);\n        this.$el.dispatchEvent(e);\n      }\n      this.$emit('blur', event);\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (this.readonly) {\n        return;\n      }\n      var k = event.code,\n        pos,\n        begin,\n        end;\n      var iPhone = /iphone/i.test(DomHandler.getUserAgent());\n      this.oldVal = this.$el.value;\n\n      //backspace, delete, and escape get special treatment\n      if (k === 'Backspace' || k === 'Delete' || iPhone && k === 'Escape') {\n        pos = this.caret();\n        begin = pos.begin;\n        end = pos.end;\n        if (end - begin === 0) {\n          begin = k !== 'Delete' ? this.seekPrev(begin) : end = this.seekNext(begin - 1);\n          end = k === 'Delete' ? this.seekNext(end) : end;\n        }\n        this.clearBuffer(begin, end);\n        this.shiftL(begin, end - 1);\n        this.updateModel(event);\n        event.preventDefault();\n      } else if (k === 'Enter') {\n        // enter\n        this.$el.blur();\n        this.updateModel(event);\n      } else if (k === 'Escape') {\n        // escape\n        this.$el.value = this.focusText;\n        this.caret(0, this.checkVal());\n        this.updateModel(event);\n        event.preventDefault();\n      }\n      this.$emit('keydown', event);\n    },\n    onKeyPress: function onKeyPress(event) {\n      var _this2 = this;\n      if (this.readonly) {\n        return;\n      }\n      var k = event.code,\n        pos = this.caret(),\n        p,\n        c,\n        next,\n        completed;\n      if (event.ctrlKey || event.altKey || event.metaKey || event.shiftKey || event.key === 'CapsLock' || event.key === 'Escape' || event.key === 'Tab') {\n        //Ignore\n        return;\n      } else if (k && k !== 'Enter') {\n        if (pos.end - pos.begin !== 0) {\n          this.clearBuffer(pos.begin, pos.end);\n          this.shiftL(pos.begin, pos.end - 1);\n        }\n        p = this.seekNext(pos.begin - 1);\n        if (p < this.len) {\n          c = event.key;\n          if (this.tests[p].test(c)) {\n            this.shiftR(p);\n            this.buffer[p] = c;\n            this.writeBuffer();\n            next = this.seekNext(p);\n            if (/android/i.test(DomHandler.getUserAgent())) {\n              //Path for CSP Violation on FireFox OS 1.1\n              var proxy = function proxy() {\n                _this2.caret(next);\n              };\n              setTimeout(proxy, 0);\n            } else {\n              this.caret(next);\n            }\n            if (pos.begin <= this.lastRequiredNonMaskPos) {\n              completed = this.isCompleted();\n            }\n          }\n        }\n        event.preventDefault();\n      }\n      this.updateModel(event);\n      if (completed) {\n        this.$emit('complete', event);\n      }\n      this.$emit('keypress', event);\n    },\n    onPaste: function onPaste(event) {\n      this.handleInputChange(event);\n      this.$emit('paste', event);\n    },\n    caret: function caret(first, last) {\n      var range, begin, end;\n      if (!this.$el.offsetParent || this.$el !== document.activeElement) {\n        return;\n      }\n      if (typeof first === 'number') {\n        begin = first;\n        end = typeof last === 'number' ? last : begin;\n        if (this.$el.setSelectionRange) {\n          this.$el.setSelectionRange(begin, end);\n        } else if (this.$el['createTextRange']) {\n          range = this.$el['createTextRange']();\n          range.collapse(true);\n          range.moveEnd('character', end);\n          range.moveStart('character', begin);\n          range.select();\n        }\n      } else {\n        if (this.$el.setSelectionRange) {\n          begin = this.$el.selectionStart;\n          end = this.$el.selectionEnd;\n        } else if (document['selection'] && document['selection'].createRange) {\n          range = document['selection'].createRange();\n          begin = 0 - range.duplicate().moveStart('character', -100000);\n          end = begin + range.text.length;\n        }\n        return {\n          begin: begin,\n          end: end\n        };\n      }\n    },\n    isCompleted: function isCompleted() {\n      for (var i = this.firstNonMaskPos; i <= this.lastRequiredNonMaskPos; i++) {\n        if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    getPlaceholder: function getPlaceholder(i) {\n      if (i < this.slotChar.length) {\n        return this.slotChar.charAt(i);\n      }\n      return this.slotChar.charAt(0);\n    },\n    seekNext: function seekNext(pos) {\n      while (++pos < this.len && !this.tests[pos]);\n      return pos;\n    },\n    seekPrev: function seekPrev(pos) {\n      while (--pos >= 0 && !this.tests[pos]);\n      return pos;\n    },\n    shiftL: function shiftL(begin, end) {\n      var i, j;\n      if (begin < 0) {\n        return;\n      }\n      for (i = begin, j = this.seekNext(end); i < this.len; i++) {\n        if (this.tests[i]) {\n          if (j < this.len && this.tests[i].test(this.buffer[j])) {\n            this.buffer[i] = this.buffer[j];\n            this.buffer[j] = this.getPlaceholder(j);\n          } else {\n            break;\n          }\n          j = this.seekNext(j);\n        }\n      }\n      this.writeBuffer();\n      this.caret(Math.max(this.firstNonMaskPos, begin));\n    },\n    shiftR: function shiftR(pos) {\n      var i, c, j, t;\n      for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {\n        if (this.tests[i]) {\n          j = this.seekNext(i);\n          t = this.buffer[i];\n          this.buffer[i] = c;\n          if (j < this.len && this.tests[j].test(t)) {\n            c = t;\n          } else {\n            break;\n          }\n        }\n      }\n    },\n    handleAndroidInput: function handleAndroidInput(event) {\n      var curVal = this.$el.value;\n      var pos = this.caret();\n      if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length) {\n        // a deletion or backspace happened\n        this.checkVal(true);\n        while (pos.begin > 0 && !this.tests[pos.begin - 1]) pos.begin--;\n        if (pos.begin === 0) {\n          while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin]) pos.begin++;\n        }\n        this.caret(pos.begin, pos.begin);\n      } else {\n        this.checkVal(true);\n        while (pos.begin < this.len && !this.tests[pos.begin]) pos.begin++;\n        this.caret(pos.begin, pos.begin);\n      }\n      if (this.isCompleted()) {\n        this.$emit('complete', event);\n      }\n    },\n    clearBuffer: function clearBuffer(start, end) {\n      var i;\n      for (i = start; i < end && i < this.len; i++) {\n        if (this.tests[i]) {\n          this.buffer[i] = this.getPlaceholder(i);\n        }\n      }\n    },\n    writeBuffer: function writeBuffer() {\n      this.$el.value = this.buffer.join('');\n    },\n    checkVal: function checkVal(allow) {\n      this.isValueChecked = true;\n      //try to place characters where they belong\n      var test = this.$el.value,\n        lastMatch = -1,\n        i,\n        c,\n        pos;\n      for (i = 0, pos = 0; i < this.len; i++) {\n        if (this.tests[i]) {\n          this.buffer[i] = this.getPlaceholder(i);\n          while (pos++ < test.length) {\n            c = test.charAt(pos - 1);\n            if (this.tests[i].test(c)) {\n              this.buffer[i] = c;\n              lastMatch = i;\n              break;\n            }\n          }\n          if (pos > test.length) {\n            this.clearBuffer(i + 1, this.len);\n            break;\n          }\n        } else {\n          if (this.buffer[i] === test.charAt(pos)) {\n            pos++;\n          }\n          if (i < this.partialPosition) {\n            lastMatch = i;\n          }\n        }\n      }\n      if (allow) {\n        this.writeBuffer();\n      } else if (lastMatch + 1 < this.partialPosition) {\n        if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {\n          // Invalid value. Remove it and replace it with the\n          // mask, which is the default behavior.\n          if (this.$el.value) this.$el.value = '';\n          this.clearBuffer(0, this.len);\n        } else {\n          // Invalid value, but we opt to show the value to the\n          // user and allow them to correct their mistake.\n          this.writeBuffer();\n        }\n      } else {\n        this.writeBuffer();\n        this.$el.value = this.$el.value.substring(0, lastMatch + 1);\n      }\n      return this.partialPosition ? i : this.firstNonMaskPos;\n    },\n    handleInputChange: function handleInputChange(event) {\n      var isPasteEvent = event.type === 'paste';\n      if (this.readonly || isPasteEvent) {\n        return;\n      }\n      var pos = this.checkVal(true);\n      this.caret(pos);\n      this.updateModel(event);\n      if (this.isCompleted()) {\n        this.$emit('complete', event);\n      }\n    },\n    getUnmaskedValue: function getUnmaskedValue() {\n      var unmaskedBuffer = [];\n      for (var i = 0; i < this.buffer.length; i++) {\n        var c = this.buffer[i];\n        if (this.tests[i] && c !== this.getPlaceholder(i)) {\n          unmaskedBuffer.push(c);\n        }\n      }\n      return unmaskedBuffer.join('');\n    },\n    updateModel: function updateModel(e) {\n      var val = this.unmask ? this.getUnmaskedValue() : e.target.value;\n      this.$emit('update:modelValue', this.defaultBuffer !== val ? val : '');\n    },\n    updateValue: function updateValue() {\n      var _this3 = this;\n      var updateModel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (this.$el) {\n        if (this.modelValue == null) {\n          this.$el.value = '';\n          updateModel && this.$emit('update:modelValue', '');\n        } else {\n          this.$el.value = this.modelValue;\n          this.checkVal();\n          setTimeout(function () {\n            if (_this3.$el) {\n              _this3.writeBuffer();\n              _this3.checkVal();\n              if (updateModel) {\n                var val = _this3.unmask ? _this3.getUnmaskedValue() : _this3.$el.value;\n                _this3.$emit('update:modelValue', _this3.defaultBuffer !== val ? val : '');\n              }\n            }\n          }, 10);\n        }\n        this.focusText = this.$el.value;\n      }\n    },\n    initMask: function initMask() {\n      this.tests = [];\n      this.partialPosition = this.mask.length;\n      this.len = this.mask.length;\n      this.firstNonMaskPos = null;\n      this.defs = {\n        9: '[0-9]',\n        a: '[A-Za-z]',\n        '*': '[A-Za-z0-9]'\n      };\n      var ua = DomHandler.getUserAgent();\n      this.androidChrome = /chrome/i.test(ua) && /android/i.test(ua);\n      var maskTokens = this.mask.split('');\n      for (var i = 0; i < maskTokens.length; i++) {\n        var c = maskTokens[i];\n        if (c === '?') {\n          this.len--;\n          this.partialPosition = i;\n        } else if (this.defs[c]) {\n          this.tests.push(new RegExp(this.defs[c]));\n          if (this.firstNonMaskPos === null) {\n            this.firstNonMaskPos = this.tests.length - 1;\n          }\n          if (i < this.partialPosition) {\n            this.lastRequiredNonMaskPos = this.tests.length - 1;\n          }\n        } else {\n          this.tests.push(null);\n        }\n      }\n      this.buffer = [];\n      for (var _i = 0; _i < maskTokens.length; _i++) {\n        var _c = maskTokens[_i];\n        if (_c !== '?') {\n          if (this.defs[_c]) this.buffer.push(this.getPlaceholder(_i));else this.buffer.push(_c);\n        }\n      }\n      this.defaultBuffer = this.buffer.join('');\n      this.updateValue(false);\n    },\n    isValueUpdated: function isValueUpdated() {\n      return this.unmask ? this.modelValue != this.getUnmaskedValue() : this.defaultBuffer !== this.$el.value && this.$el.value !== this.modelValue;\n    }\n  },\n  computed: {\n    filled: function filled() {\n      return this.modelValue != null && this.modelValue.toString().length > 0;\n    },\n    ptmParams: function ptmParams() {\n      return {\n        context: {\n          filled: this.filled,\n          disabled: this.$attrs.disabled || this.$attrs.disabled === ''\n        }\n      };\n    }\n  }\n};\n\nvar _hoisted_1 = [\"readonly\", \"aria-invalid\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"input\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    readonly: _ctx.readonly,\n    \"aria-invalid\": _ctx.invalid || undefined,\n    onInput: _cache[0] || (_cache[0] = function () {\n      return $options.onInput && $options.onInput.apply($options, arguments);\n    }),\n    onFocus: _cache[1] || (_cache[1] = function () {\n      return $options.onFocus && $options.onFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[2] || (_cache[2] = function () {\n      return $options.onBlur && $options.onBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[3] || (_cache[3] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    }),\n    onKeypress: _cache[4] || (_cache[4] = function () {\n      return $options.onKeyPress && $options.onKeyPress.apply($options, arguments);\n    }),\n    onPaste: _cache[5] || (_cache[5] = function () {\n      return $options.onPaste && $options.onPaste.apply($options, arguments);\n    })\n  }, _ctx.ptmi('root', $options.ptmParams)), null, 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n",
      "start": 1756100529564,
      "end": 1756100530517,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100530517,
      "end": 1756100530517,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100530517,
      "end": 1756100530517,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100530517,
      "end": 1756100530517,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100530517,
      "end": 1756100530517,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100530517,
      "end": 1756100530517,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100530517,
      "end": 1756100530517,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100530517,
      "end": 1756100530517,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "result": "import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => import(\"/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/inputmask/inputmask.esm.js\").then(r => r[\"default\"] || r.default || r))",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "replace",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "result": "import { __vitePreload } from \"\u0000vite/preload-helper.js\";import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => __vitePreload(() => import(\"/Users/yunhao/Project/website/node_modules/.pnpm/primevue@3.53.0_vue@3.5.11/node_modules/primevue/inputmask/inputmask.esm.js\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url).then(r => r[\"default\"] || r.default || r))",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:reporter",
      "start": 1756100530518,
      "end": 1756100530518,
      "order": "normal"
    }
  ]
}
