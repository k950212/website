{
  "resolvedId": "/Users/yunhao/Project/website/node_modules/.pnpm/vant@4.9.16_vue@3.5.11/node_modules/vant/es/text-ellipsis/TextEllipsis.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { ref, watch, computed, onActivated, onMounted, defineComponent, nextTick, createVNode as _createVNode } from \"vue\";\nimport { makeNumericProp, makeStringProp, createNamespace, windowWidth } from \"../utils/index.mjs\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nconst [name, bem] = createNamespace(\"text-ellipsis\");\nconst textEllipsisProps = {\n  rows: makeNumericProp(1),\n  dots: makeStringProp(\"...\"),\n  content: makeStringProp(\"\"),\n  expandText: makeStringProp(\"\"),\n  collapseText: makeStringProp(\"\"),\n  position: makeStringProp(\"end\")\n};\nvar stdin_default = defineComponent({\n  name,\n  props: textEllipsisProps,\n  emits: [\"clickAction\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const text = ref(props.content);\n    const expanded = ref(false);\n    const hasAction = ref(false);\n    const root = ref();\n    const actionRef = ref();\n    let needRecalculate = false;\n    const actionText = computed(() => expanded.value ? props.collapseText : props.expandText);\n    const pxToNum = (value) => {\n      if (!value) return 0;\n      const match = value.match(/^\\d*(\\.\\d*)?/);\n      return match ? Number(match[0]) : 0;\n    };\n    const cloneContainer = () => {\n      if (!root.value || !root.value.isConnected) return;\n      const originStyle = window.getComputedStyle(root.value);\n      const container = document.createElement(\"div\");\n      const styleNames = Array.prototype.slice.apply(originStyle);\n      styleNames.forEach((name2) => {\n        container.style.setProperty(name2, originStyle.getPropertyValue(name2));\n      });\n      container.style.position = \"fixed\";\n      container.style.zIndex = \"-9999\";\n      container.style.top = \"-9999px\";\n      container.style.height = \"auto\";\n      container.style.minHeight = \"auto\";\n      container.style.maxHeight = \"auto\";\n      container.innerText = props.content;\n      document.body.appendChild(container);\n      return container;\n    };\n    const calcEllipsisText = (container, maxHeight) => {\n      var _a, _b;\n      const {\n        content,\n        position,\n        dots\n      } = props;\n      const end = content.length;\n      const middle = 0 + end >> 1;\n      const actionHTML = slots.action ? (_b = (_a = actionRef.value) == null ? void 0 : _a.outerHTML) != null ? _b : \"\" : props.expandText;\n      const calcEllipse = () => {\n        const tail = (left, right) => {\n          if (right - left <= 1) {\n            if (position === \"end\") {\n              return content.slice(0, left) + dots;\n            }\n            return dots + content.slice(right, end);\n          }\n          const middle2 = Math.round((left + right) / 2);\n          if (position === \"end\") {\n            container.innerText = content.slice(0, middle2) + dots;\n          } else {\n            container.innerText = dots + content.slice(middle2, end);\n          }\n          container.innerHTML += actionHTML;\n          if (container.offsetHeight > maxHeight) {\n            if (position === \"end\") {\n              return tail(left, middle2);\n            }\n            return tail(middle2, right);\n          }\n          if (position === \"end\") {\n            return tail(middle2, right);\n          }\n          return tail(left, middle2);\n        };\n        return tail(0, end);\n      };\n      const middleTail = (leftPart, rightPart) => {\n        if (leftPart[1] - leftPart[0] <= 1 && rightPart[1] - rightPart[0] <= 1) {\n          return content.slice(0, leftPart[0]) + dots + content.slice(rightPart[1], end);\n        }\n        const leftMiddle = Math.floor((leftPart[0] + leftPart[1]) / 2);\n        const rightMiddle = Math.ceil((rightPart[0] + rightPart[1]) / 2);\n        container.innerText = props.content.slice(0, leftMiddle) + props.dots + props.content.slice(rightMiddle, end);\n        container.innerHTML += actionHTML;\n        if (container.offsetHeight >= maxHeight) {\n          return middleTail([leftPart[0], leftMiddle], [rightMiddle, rightPart[1]]);\n        }\n        return middleTail([leftMiddle, leftPart[1]], [rightPart[0], rightMiddle]);\n      };\n      return props.position === \"middle\" ? middleTail([0, middle], [middle, end]) : calcEllipse();\n    };\n    const calcEllipsised = () => {\n      const container = cloneContainer();\n      if (!container) {\n        needRecalculate = true;\n        return;\n      }\n      const {\n        paddingBottom,\n        paddingTop,\n        lineHeight\n      } = container.style;\n      const maxHeight = Math.ceil((Number(props.rows) + 0.5) * pxToNum(lineHeight) + pxToNum(paddingTop) + pxToNum(paddingBottom));\n      if (maxHeight < container.offsetHeight) {\n        hasAction.value = true;\n        text.value = calcEllipsisText(container, maxHeight);\n      } else {\n        hasAction.value = false;\n        text.value = props.content;\n      }\n      document.body.removeChild(container);\n    };\n    const toggle = (isExpanded = !expanded.value) => {\n      expanded.value = isExpanded;\n    };\n    const onClickAction = (event) => {\n      toggle();\n      emit(\"clickAction\", event);\n    };\n    const renderAction = () => {\n      const action = slots.action ? slots.action({\n        expanded: expanded.value\n      }) : actionText.value;\n      return _createVNode(\"span\", {\n        \"ref\": actionRef,\n        \"class\": bem(\"action\"),\n        \"onClick\": onClickAction\n      }, [action]);\n    };\n    onMounted(() => {\n      calcEllipsised();\n      if (slots.action) {\n        nextTick(calcEllipsised);\n      }\n    });\n    onActivated(() => {\n      if (needRecalculate) {\n        needRecalculate = false;\n        calcEllipsised();\n      }\n    });\n    watch([windowWidth, () => [props.content, props.rows, props.position]], calcEllipsised);\n    useExpose({\n      toggle\n    });\n    return () => _createVNode(\"div\", {\n      \"ref\": root,\n      \"class\": bem()\n    }, [expanded.value ? props.content : text.value, hasAction.value ? renderAction() : null]);\n  }\n});\nexport {\n  stdin_default as default,\n  textEllipsisProps\n};\n",
      "start": 1756100533474,
      "end": 1756100533499,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "post"
    },
    {
      "name": "vant:transform",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1756100533499,
      "end": 1756100533499,
      "order": "normal"
    }
  ]
}
